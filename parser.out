Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> START program_start END
Rule 2     program_start -> statement_list main_declaration
Rule 3     statement_list -> statement
Rule 4     statement_list -> statement_list statement
Rule 5     statement -> identifier
Rule 6     statement -> expression
Rule 7     statement -> if_statement
Rule 8     main_declaration -> MAIN identifier COLON statement_list END
Rule 9     identifier -> IDENTIFIER
Rule 10    primitive -> NUM_INT
Rule 11    primitive -> NUM_FLOAT
Rule 12    primitive -> boolean
Rule 13    expression -> expression PLUS expression PLUS
Rule 14    expression -> expression MINUS expression MINUS
Rule 15    expression -> expression MUL expression MUL
Rule 16    expression -> expression DIV expression DIV
Rule 17    expression -> expression EXP expression EXP
Rule 18    expression -> expression MOD expression MOD
Rule 19    expression -> expression BIT_AND expression
Rule 20    expression -> expression BIT_OR expression
Rule 21    boolean -> expression EQ expression
Rule 22    boolean -> expression NEQ expression
Rule 23    boolean -> expression GT expression
Rule 24    boolean -> expression GTE expression
Rule 25    boolean -> expression LT expression
Rule 26    boolean -> expression LTE expression
Rule 27    boolean -> expression AND expression
Rule 28    boolean -> expression OR expression
Rule 29    expression -> MINUS expression MINUS
Rule 30    expression -> PLUS expression PLUS
Rule 31    expression -> BIT_NEG expression
Rule 32    expression -> NOT expression
Rule 33    expression -> LPAREN expression RPAREN
Rule 34    boolean -> TRUE
Rule 35    boolean -> FALSE
Rule 36    assignable -> primitive
Rule 37    assignable -> expression
Rule 38    arguments -> arguments COMMA expression
Rule 39    arguments -> expression
Rule 40    arguments -> <empty>
Rule 41    expression -> LSQBRACK arguments RSQBRACK
Rule 42    expression -> identifier LSQBRACK expression RSQBRACK
Rule 43    expression -> identifier LSQBRACK expression COLON expression RSQBRACK
Rule 44    expression -> identifier LSQBRACK COLON expression RSQBRACK
Rule 45    expression -> identifier LSQBRACK expression COLON RSQBRACK
Rule 46    expression -> identifier LSQBRACK COLON RSQBRACK
Rule 47    statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression
Rule 48    expression -> identifier EQUALS assignable
Rule 49    if_statement -> IF expression THEN statement_list END
Rule 50    if_statement -> IF expression THEN statement_list ELSE statement_list END
Rule 51    if_statement -> IF expression THEN statement_list ELSE if_statement
Rule 52    expression -> expression IN expression
Rule 53    expression -> expression NOT IN expression
Rule 54    statement -> SETOUT arguments
Rule 55    statement -> GETIN arguments
Rule 56    expression -> identifier DOUBLE_PLUS
Rule 57    expression -> identifier DOUBLE_MINUS
Rule 58    expression -> primitive
Rule 59    expression -> identifier
Rule 60    statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
Rule 61    statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
Rule 62    statement -> FOR identifier IN expression DO statement_list LOOP
Rule 63    statement -> WHILE expression DO statement_list LOOP
Rule 64    statement -> PROCCES identifier COLON statement_list END
Rule 65    expression -> PROCCES identifier ARROW_LTR START
Rule 66    statement -> PROCCES identifier ARROW_LTR START

Terminals, with rules where they appear

AND                  : 27
ARROW_LTR            : 60 65 66
ARROW_RTL            : 61
BIT_AND              : 19
BIT_NEG              : 31
BIT_OR               : 20
COLON                : 8 43 44 45 46 64
COMMA                : 38
DIV                  : 16 16
DO                   : 60 61 62 63
DOUBLE_MINUS         : 57
DOUBLE_PLUS          : 56
ELSE                 : 50 51
END                  : 1 8 49 50 64
EQ                   : 21
EQUALS               : 47 48
EXP                  : 17 17
FALSE                : 35
FOR                  : 60 61 62
GETIN                : 55
GT                   : 23
GTE                  : 24
IDENTIFIER           : 9
IF                   : 49 50 51
IN                   : 52 53 60 61 62
LOOP                 : 60 61 62 63
LPAREN               : 33
LSQBRACK             : 41 42 43 44 45 46 47
LT                   : 25
LTE                  : 26
MAIN                 : 8
MINUS                : 14 14 29 29
MOD                  : 18 18
MUL                  : 15 15
NEQ                  : 22
NOT                  : 32 53
NUM_FLOAT            : 11
NUM_INT              : 10
OR                   : 28
PLUS                 : 13 13 30 30
PROCCES              : 64 65 66
RPAREN               : 33
RSQBRACK             : 41 42 43 44 45 46 47
SETOUT               : 54
START                : 1 65 66
THEN                 : 49 50 51
TRUE                 : 34
WHILE                : 63
error                : 

Nonterminals, with rules where they appear

arguments            : 38 41 54 55
assignable           : 48
boolean              : 12
expression           : 6 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 30 31 32 33 37 38 39 42 43 43 44 45 47 47 49 50 51 52 52 53 53 60 60 61 61 62 63
identifier           : 5 8 42 43 44 45 46 47 48 56 57 59 60 61 62 64 65 66
if_statement         : 7 51
main_declaration     : 2
primitive            : 36 58
program              : 0
program_start        : 1
statement            : 3 4
statement_list       : 2 4 8 49 50 50 51 60 61 62 63 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START program_start END

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . program_start END
    (2) program_start -> . statement_list main_declaration
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    program_start                  shift and go to state 3
    statement_list                 shift and go to state 4
    statement                      shift and go to state 5
    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 3

    (1) program -> START program_start . END

    END             shift and go to state 28


state 4

    (2) program_start -> statement_list . main_declaration
    (4) statement_list -> statement_list . statement
    (8) main_declaration -> . MAIN identifier COLON statement_list END
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MAIN            shift and go to state 31
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    main_declaration               shift and go to state 29
    statement                      shift and go to state 30
    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 5

    (3) statement_list -> statement .

    MAIN            reduce using rule 3 (statement_list -> statement .)
    SETOUT          reduce using rule 3 (statement_list -> statement .)
    GETIN           reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    PROCCES         reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    MINUS           reduce using rule 3 (statement_list -> statement .)
    PLUS            reduce using rule 3 (statement_list -> statement .)
    BIT_NEG         reduce using rule 3 (statement_list -> statement .)
    NOT             reduce using rule 3 (statement_list -> statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement .)
    LSQBRACK        reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    NUM_INT         reduce using rule 3 (statement_list -> statement .)
    NUM_FLOAT       reduce using rule 3 (statement_list -> statement .)
    TRUE            reduce using rule 3 (statement_list -> statement .)
    FALSE           reduce using rule 3 (statement_list -> statement .)
    LOOP            reduce using rule 3 (statement_list -> statement .)
    END             reduce using rule 3 (statement_list -> statement .)
    ELSE            reduce using rule 3 (statement_list -> statement .)


state 6

    (5) statement -> identifier .
    (47) statement -> identifier . LSQBRACK expression RSQBRACK EQUALS expression
    (42) expression -> identifier . LSQBRACK expression RSQBRACK
    (43) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (45) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (46) expression -> identifier . LSQBRACK COLON RSQBRACK
    (48) expression -> identifier . EQUALS assignable
    (56) expression -> identifier . DOUBLE_PLUS
    (57) expression -> identifier . DOUBLE_MINUS
    (59) expression -> identifier .

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for MAIN resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for SETOUT resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for GETIN resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for FOR resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for PROCCES resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (statement -> identifier .)
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for LOOP resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for END resolved using rule 5 (statement -> identifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 5 (statement -> identifier .)
    MAIN            reduce using rule 5 (statement -> identifier .)
    SETOUT          reduce using rule 5 (statement -> identifier .)
    GETIN           reduce using rule 5 (statement -> identifier .)
    FOR             reduce using rule 5 (statement -> identifier .)
    WHILE           reduce using rule 5 (statement -> identifier .)
    PROCCES         reduce using rule 5 (statement -> identifier .)
    IDENTIFIER      reduce using rule 5 (statement -> identifier .)
    MINUS           reduce using rule 5 (statement -> identifier .)
    PLUS            reduce using rule 5 (statement -> identifier .)
    BIT_NEG         reduce using rule 5 (statement -> identifier .)
    NOT             reduce using rule 5 (statement -> identifier .)
    LPAREN          reduce using rule 5 (statement -> identifier .)
    IF              reduce using rule 5 (statement -> identifier .)
    NUM_INT         reduce using rule 5 (statement -> identifier .)
    NUM_FLOAT       reduce using rule 5 (statement -> identifier .)
    TRUE            reduce using rule 5 (statement -> identifier .)
    FALSE           reduce using rule 5 (statement -> identifier .)
    LOOP            reduce using rule 5 (statement -> identifier .)
    END             reduce using rule 5 (statement -> identifier .)
    ELSE            reduce using rule 5 (statement -> identifier .)
    LSQBRACK        shift and go to state 32
    EQUALS          shift and go to state 33
    DOUBLE_PLUS     shift and go to state 34
    DOUBLE_MINUS    shift and go to state 35
    MUL             reduce using rule 59 (expression -> identifier .)
    DIV             reduce using rule 59 (expression -> identifier .)
    EXP             reduce using rule 59 (expression -> identifier .)
    MOD             reduce using rule 59 (expression -> identifier .)
    BIT_AND         reduce using rule 59 (expression -> identifier .)
    BIT_OR          reduce using rule 59 (expression -> identifier .)
    IN              reduce using rule 59 (expression -> identifier .)
    EQ              reduce using rule 59 (expression -> identifier .)
    NEQ             reduce using rule 59 (expression -> identifier .)
    GT              reduce using rule 59 (expression -> identifier .)
    GTE             reduce using rule 59 (expression -> identifier .)
    LT              reduce using rule 59 (expression -> identifier .)
    LTE             reduce using rule 59 (expression -> identifier .)
    AND             reduce using rule 59 (expression -> identifier .)
    OR              reduce using rule 59 (expression -> identifier .)

  ! LSQBRACK        [ reduce using rule 5 (statement -> identifier .) ]
  ! PLUS            [ reduce using rule 59 (expression -> identifier .) ]
  ! MINUS           [ reduce using rule 59 (expression -> identifier .) ]
  ! NOT             [ reduce using rule 59 (expression -> identifier .) ]
  ! MAIN            [ reduce using rule 59 (expression -> identifier .) ]
  ! SETOUT          [ reduce using rule 59 (expression -> identifier .) ]
  ! GETIN           [ reduce using rule 59 (expression -> identifier .) ]
  ! FOR             [ reduce using rule 59 (expression -> identifier .) ]
  ! WHILE           [ reduce using rule 59 (expression -> identifier .) ]
  ! PROCCES         [ reduce using rule 59 (expression -> identifier .) ]
  ! IDENTIFIER      [ reduce using rule 59 (expression -> identifier .) ]
  ! BIT_NEG         [ reduce using rule 59 (expression -> identifier .) ]
  ! LPAREN          [ reduce using rule 59 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 59 (expression -> identifier .) ]
  ! IF              [ reduce using rule 59 (expression -> identifier .) ]
  ! NUM_INT         [ reduce using rule 59 (expression -> identifier .) ]
  ! NUM_FLOAT       [ reduce using rule 59 (expression -> identifier .) ]
  ! TRUE            [ reduce using rule 59 (expression -> identifier .) ]
  ! FALSE           [ reduce using rule 59 (expression -> identifier .) ]
  ! LOOP            [ reduce using rule 59 (expression -> identifier .) ]
  ! END             [ reduce using rule 59 (expression -> identifier .) ]
  ! ELSE            [ reduce using rule 59 (expression -> identifier .) ]


state 7

    (6) statement -> expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    MAIN            reduce using rule 6 (statement -> expression .)
    SETOUT          reduce using rule 6 (statement -> expression .)
    GETIN           reduce using rule 6 (statement -> expression .)
    FOR             reduce using rule 6 (statement -> expression .)
    WHILE           reduce using rule 6 (statement -> expression .)
    PROCCES         reduce using rule 6 (statement -> expression .)
    IDENTIFIER      reduce using rule 6 (statement -> expression .)
    BIT_NEG         reduce using rule 6 (statement -> expression .)
    LPAREN          reduce using rule 6 (statement -> expression .)
    LSQBRACK        reduce using rule 6 (statement -> expression .)
    IF              reduce using rule 6 (statement -> expression .)
    NUM_INT         reduce using rule 6 (statement -> expression .)
    NUM_FLOAT       reduce using rule 6 (statement -> expression .)
    TRUE            reduce using rule 6 (statement -> expression .)
    FALSE           reduce using rule 6 (statement -> expression .)
    LOOP            reduce using rule 6 (statement -> expression .)
    END             reduce using rule 6 (statement -> expression .)
    ELSE            reduce using rule 6 (statement -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! MINUS           [ reduce using rule 6 (statement -> expression .) ]
  ! PLUS            [ reduce using rule 6 (statement -> expression .) ]
  ! NOT             [ reduce using rule 6 (statement -> expression .) ]


state 8

    (7) statement -> if_statement .

    MAIN            reduce using rule 7 (statement -> if_statement .)
    SETOUT          reduce using rule 7 (statement -> if_statement .)
    GETIN           reduce using rule 7 (statement -> if_statement .)
    FOR             reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    PROCCES         reduce using rule 7 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> if_statement .)
    MINUS           reduce using rule 7 (statement -> if_statement .)
    PLUS            reduce using rule 7 (statement -> if_statement .)
    BIT_NEG         reduce using rule 7 (statement -> if_statement .)
    NOT             reduce using rule 7 (statement -> if_statement .)
    LPAREN          reduce using rule 7 (statement -> if_statement .)
    LSQBRACK        reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    NUM_INT         reduce using rule 7 (statement -> if_statement .)
    NUM_FLOAT       reduce using rule 7 (statement -> if_statement .)
    TRUE            reduce using rule 7 (statement -> if_statement .)
    FALSE           reduce using rule 7 (statement -> if_statement .)
    LOOP            reduce using rule 7 (statement -> if_statement .)
    END             reduce using rule 7 (statement -> if_statement .)
    ELSE            reduce using rule 7 (statement -> if_statement .)


state 9

    (41) expression -> LSQBRACK . arguments RSQBRACK
    (38) arguments -> . arguments COMMA expression
    (39) arguments -> . expression
    (40) arguments -> .
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    RSQBRACK        reduce using rule 40 (arguments -> .)
    COMMA           reduce using rule 40 (arguments -> .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    arguments                      shift and go to state 54
    expression                     shift and go to state 55
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 10

    (54) statement -> SETOUT . arguments
    (38) arguments -> . arguments COMMA expression
    (39) arguments -> . expression
    (40) arguments -> .
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    COMMA           reduce using rule 40 (arguments -> .)
    MAIN            reduce using rule 40 (arguments -> .)
    SETOUT          reduce using rule 40 (arguments -> .)
    GETIN           reduce using rule 40 (arguments -> .)
    FOR             reduce using rule 40 (arguments -> .)
    WHILE           reduce using rule 40 (arguments -> .)
    IF              reduce using rule 40 (arguments -> .)
    LOOP            reduce using rule 40 (arguments -> .)
    END             reduce using rule 40 (arguments -> .)
    ELSE            reduce using rule 40 (arguments -> .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PROCCES         [ reduce using rule 40 (arguments -> .) ]
  ! IDENTIFIER      [ reduce using rule 40 (arguments -> .) ]
  ! MINUS           [ reduce using rule 40 (arguments -> .) ]
  ! PLUS            [ reduce using rule 40 (arguments -> .) ]
  ! BIT_NEG         [ reduce using rule 40 (arguments -> .) ]
  ! NOT             [ reduce using rule 40 (arguments -> .) ]
  ! LPAREN          [ reduce using rule 40 (arguments -> .) ]
  ! LSQBRACK        [ reduce using rule 40 (arguments -> .) ]
  ! NUM_INT         [ reduce using rule 40 (arguments -> .) ]
  ! NUM_FLOAT       [ reduce using rule 40 (arguments -> .) ]
  ! TRUE            [ reduce using rule 40 (arguments -> .) ]
  ! FALSE           [ reduce using rule 40 (arguments -> .) ]

    arguments                      shift and go to state 58
    expression                     shift and go to state 55
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 11

    (55) statement -> GETIN . arguments
    (38) arguments -> . arguments COMMA expression
    (39) arguments -> . expression
    (40) arguments -> .
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    COMMA           reduce using rule 40 (arguments -> .)
    MAIN            reduce using rule 40 (arguments -> .)
    SETOUT          reduce using rule 40 (arguments -> .)
    GETIN           reduce using rule 40 (arguments -> .)
    FOR             reduce using rule 40 (arguments -> .)
    WHILE           reduce using rule 40 (arguments -> .)
    IF              reduce using rule 40 (arguments -> .)
    LOOP            reduce using rule 40 (arguments -> .)
    END             reduce using rule 40 (arguments -> .)
    ELSE            reduce using rule 40 (arguments -> .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PROCCES         [ reduce using rule 40 (arguments -> .) ]
  ! IDENTIFIER      [ reduce using rule 40 (arguments -> .) ]
  ! MINUS           [ reduce using rule 40 (arguments -> .) ]
  ! PLUS            [ reduce using rule 40 (arguments -> .) ]
  ! BIT_NEG         [ reduce using rule 40 (arguments -> .) ]
  ! NOT             [ reduce using rule 40 (arguments -> .) ]
  ! LPAREN          [ reduce using rule 40 (arguments -> .) ]
  ! LSQBRACK        [ reduce using rule 40 (arguments -> .) ]
  ! NUM_INT         [ reduce using rule 40 (arguments -> .) ]
  ! NUM_FLOAT       [ reduce using rule 40 (arguments -> .) ]
  ! TRUE            [ reduce using rule 40 (arguments -> .) ]
  ! FALSE           [ reduce using rule 40 (arguments -> .) ]

    arguments                      shift and go to state 59
    expression                     shift and go to state 55
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 12

    (60) statement -> FOR . identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> FOR . identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> FOR . identifier IN expression DO statement_list LOOP
    (9) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 60

state 13

    (63) statement -> WHILE . expression DO statement_list LOOP
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 61
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 14

    (64) statement -> PROCCES . identifier COLON statement_list END
    (66) statement -> PROCCES . identifier ARROW_LTR START
    (65) expression -> PROCCES . identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 62

state 15

    (9) identifier -> IDENTIFIER .

    LSQBRACK        reduce using rule 9 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 9 (identifier -> IDENTIFIER .)
    DOUBLE_PLUS     reduce using rule 9 (identifier -> IDENTIFIER .)
    DOUBLE_MINUS    reduce using rule 9 (identifier -> IDENTIFIER .)
    MAIN            reduce using rule 9 (identifier -> IDENTIFIER .)
    SETOUT          reduce using rule 9 (identifier -> IDENTIFIER .)
    GETIN           reduce using rule 9 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 9 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 9 (identifier -> IDENTIFIER .)
    PROCCES         reduce using rule 9 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 9 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 9 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 9 (identifier -> IDENTIFIER .)
    BIT_NEG         reduce using rule 9 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 9 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 9 (identifier -> IDENTIFIER .)
    IF              reduce using rule 9 (identifier -> IDENTIFIER .)
    NUM_INT         reduce using rule 9 (identifier -> IDENTIFIER .)
    NUM_FLOAT       reduce using rule 9 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 9 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 9 (identifier -> IDENTIFIER .)
    MUL             reduce using rule 9 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 9 (identifier -> IDENTIFIER .)
    EXP             reduce using rule 9 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 9 (identifier -> IDENTIFIER .)
    BIT_AND         reduce using rule 9 (identifier -> IDENTIFIER .)
    BIT_OR          reduce using rule 9 (identifier -> IDENTIFIER .)
    IN              reduce using rule 9 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 9 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 9 (identifier -> IDENTIFIER .)
    GT              reduce using rule 9 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 9 (identifier -> IDENTIFIER .)
    LT              reduce using rule 9 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 9 (identifier -> IDENTIFIER .)
    AND             reduce using rule 9 (identifier -> IDENTIFIER .)
    OR              reduce using rule 9 (identifier -> IDENTIFIER .)
    RSQBRACK        reduce using rule 9 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 9 (identifier -> IDENTIFIER .)
    LOOP            reduce using rule 9 (identifier -> IDENTIFIER .)
    END             reduce using rule 9 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 9 (identifier -> IDENTIFIER .)
    DO              reduce using rule 9 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 9 (identifier -> IDENTIFIER .)
    ARROW_LTR       reduce using rule 9 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 9 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 9 (identifier -> IDENTIFIER .)
    ARROW_RTL       reduce using rule 9 (identifier -> IDENTIFIER .)


state 16

    (30) expression -> PLUS . expression PLUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 63
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 17

    (29) expression -> MINUS . expression MINUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 64
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 18

    (31) expression -> BIT_NEG . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 65
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 19

    (32) expression -> NOT . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 66
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 20

    (33) expression -> LPAREN . expression RPAREN
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 67
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 21

    (58) expression -> primitive .

    PLUS            reduce using rule 58 (expression -> primitive .)
    MINUS           reduce using rule 58 (expression -> primitive .)
    MUL             reduce using rule 58 (expression -> primitive .)
    DIV             reduce using rule 58 (expression -> primitive .)
    EXP             reduce using rule 58 (expression -> primitive .)
    MOD             reduce using rule 58 (expression -> primitive .)
    BIT_AND         reduce using rule 58 (expression -> primitive .)
    BIT_OR          reduce using rule 58 (expression -> primitive .)
    IN              reduce using rule 58 (expression -> primitive .)
    NOT             reduce using rule 58 (expression -> primitive .)
    EQ              reduce using rule 58 (expression -> primitive .)
    NEQ             reduce using rule 58 (expression -> primitive .)
    GT              reduce using rule 58 (expression -> primitive .)
    GTE             reduce using rule 58 (expression -> primitive .)
    LT              reduce using rule 58 (expression -> primitive .)
    LTE             reduce using rule 58 (expression -> primitive .)
    AND             reduce using rule 58 (expression -> primitive .)
    OR              reduce using rule 58 (expression -> primitive .)
    MAIN            reduce using rule 58 (expression -> primitive .)
    SETOUT          reduce using rule 58 (expression -> primitive .)
    GETIN           reduce using rule 58 (expression -> primitive .)
    FOR             reduce using rule 58 (expression -> primitive .)
    WHILE           reduce using rule 58 (expression -> primitive .)
    PROCCES         reduce using rule 58 (expression -> primitive .)
    IDENTIFIER      reduce using rule 58 (expression -> primitive .)
    BIT_NEG         reduce using rule 58 (expression -> primitive .)
    LPAREN          reduce using rule 58 (expression -> primitive .)
    LSQBRACK        reduce using rule 58 (expression -> primitive .)
    IF              reduce using rule 58 (expression -> primitive .)
    NUM_INT         reduce using rule 58 (expression -> primitive .)
    NUM_FLOAT       reduce using rule 58 (expression -> primitive .)
    TRUE            reduce using rule 58 (expression -> primitive .)
    FALSE           reduce using rule 58 (expression -> primitive .)
    RSQBRACK        reduce using rule 58 (expression -> primitive .)
    COMMA           reduce using rule 58 (expression -> primitive .)
    LOOP            reduce using rule 58 (expression -> primitive .)
    END             reduce using rule 58 (expression -> primitive .)
    ELSE            reduce using rule 58 (expression -> primitive .)
    DO              reduce using rule 58 (expression -> primitive .)
    RPAREN          reduce using rule 58 (expression -> primitive .)
    THEN            reduce using rule 58 (expression -> primitive .)
    COLON           reduce using rule 58 (expression -> primitive .)
    ARROW_LTR       reduce using rule 58 (expression -> primitive .)
    ARROW_RTL       reduce using rule 58 (expression -> primitive .)


state 22

    (49) if_statement -> IF . expression THEN statement_list END
    (50) if_statement -> IF . expression THEN statement_list ELSE statement_list END
    (51) if_statement -> IF . expression THEN statement_list ELSE if_statement
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 68
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 23

    (10) primitive -> NUM_INT .

    PLUS            reduce using rule 10 (primitive -> NUM_INT .)
    MINUS           reduce using rule 10 (primitive -> NUM_INT .)
    MUL             reduce using rule 10 (primitive -> NUM_INT .)
    DIV             reduce using rule 10 (primitive -> NUM_INT .)
    EXP             reduce using rule 10 (primitive -> NUM_INT .)
    MOD             reduce using rule 10 (primitive -> NUM_INT .)
    BIT_AND         reduce using rule 10 (primitive -> NUM_INT .)
    BIT_OR          reduce using rule 10 (primitive -> NUM_INT .)
    IN              reduce using rule 10 (primitive -> NUM_INT .)
    NOT             reduce using rule 10 (primitive -> NUM_INT .)
    EQ              reduce using rule 10 (primitive -> NUM_INT .)
    NEQ             reduce using rule 10 (primitive -> NUM_INT .)
    GT              reduce using rule 10 (primitive -> NUM_INT .)
    GTE             reduce using rule 10 (primitive -> NUM_INT .)
    LT              reduce using rule 10 (primitive -> NUM_INT .)
    LTE             reduce using rule 10 (primitive -> NUM_INT .)
    AND             reduce using rule 10 (primitive -> NUM_INT .)
    OR              reduce using rule 10 (primitive -> NUM_INT .)
    MAIN            reduce using rule 10 (primitive -> NUM_INT .)
    SETOUT          reduce using rule 10 (primitive -> NUM_INT .)
    GETIN           reduce using rule 10 (primitive -> NUM_INT .)
    FOR             reduce using rule 10 (primitive -> NUM_INT .)
    WHILE           reduce using rule 10 (primitive -> NUM_INT .)
    PROCCES         reduce using rule 10 (primitive -> NUM_INT .)
    IDENTIFIER      reduce using rule 10 (primitive -> NUM_INT .)
    BIT_NEG         reduce using rule 10 (primitive -> NUM_INT .)
    LPAREN          reduce using rule 10 (primitive -> NUM_INT .)
    LSQBRACK        reduce using rule 10 (primitive -> NUM_INT .)
    IF              reduce using rule 10 (primitive -> NUM_INT .)
    NUM_INT         reduce using rule 10 (primitive -> NUM_INT .)
    NUM_FLOAT       reduce using rule 10 (primitive -> NUM_INT .)
    TRUE            reduce using rule 10 (primitive -> NUM_INT .)
    FALSE           reduce using rule 10 (primitive -> NUM_INT .)
    RSQBRACK        reduce using rule 10 (primitive -> NUM_INT .)
    COMMA           reduce using rule 10 (primitive -> NUM_INT .)
    LOOP            reduce using rule 10 (primitive -> NUM_INT .)
    END             reduce using rule 10 (primitive -> NUM_INT .)
    ELSE            reduce using rule 10 (primitive -> NUM_INT .)
    DO              reduce using rule 10 (primitive -> NUM_INT .)
    RPAREN          reduce using rule 10 (primitive -> NUM_INT .)
    THEN            reduce using rule 10 (primitive -> NUM_INT .)
    COLON           reduce using rule 10 (primitive -> NUM_INT .)
    ARROW_LTR       reduce using rule 10 (primitive -> NUM_INT .)
    ARROW_RTL       reduce using rule 10 (primitive -> NUM_INT .)


state 24

    (11) primitive -> NUM_FLOAT .

    PLUS            reduce using rule 11 (primitive -> NUM_FLOAT .)
    MINUS           reduce using rule 11 (primitive -> NUM_FLOAT .)
    MUL             reduce using rule 11 (primitive -> NUM_FLOAT .)
    DIV             reduce using rule 11 (primitive -> NUM_FLOAT .)
    EXP             reduce using rule 11 (primitive -> NUM_FLOAT .)
    MOD             reduce using rule 11 (primitive -> NUM_FLOAT .)
    BIT_AND         reduce using rule 11 (primitive -> NUM_FLOAT .)
    BIT_OR          reduce using rule 11 (primitive -> NUM_FLOAT .)
    IN              reduce using rule 11 (primitive -> NUM_FLOAT .)
    NOT             reduce using rule 11 (primitive -> NUM_FLOAT .)
    EQ              reduce using rule 11 (primitive -> NUM_FLOAT .)
    NEQ             reduce using rule 11 (primitive -> NUM_FLOAT .)
    GT              reduce using rule 11 (primitive -> NUM_FLOAT .)
    GTE             reduce using rule 11 (primitive -> NUM_FLOAT .)
    LT              reduce using rule 11 (primitive -> NUM_FLOAT .)
    LTE             reduce using rule 11 (primitive -> NUM_FLOAT .)
    AND             reduce using rule 11 (primitive -> NUM_FLOAT .)
    OR              reduce using rule 11 (primitive -> NUM_FLOAT .)
    MAIN            reduce using rule 11 (primitive -> NUM_FLOAT .)
    SETOUT          reduce using rule 11 (primitive -> NUM_FLOAT .)
    GETIN           reduce using rule 11 (primitive -> NUM_FLOAT .)
    FOR             reduce using rule 11 (primitive -> NUM_FLOAT .)
    WHILE           reduce using rule 11 (primitive -> NUM_FLOAT .)
    PROCCES         reduce using rule 11 (primitive -> NUM_FLOAT .)
    IDENTIFIER      reduce using rule 11 (primitive -> NUM_FLOAT .)
    BIT_NEG         reduce using rule 11 (primitive -> NUM_FLOAT .)
    LPAREN          reduce using rule 11 (primitive -> NUM_FLOAT .)
    LSQBRACK        reduce using rule 11 (primitive -> NUM_FLOAT .)
    IF              reduce using rule 11 (primitive -> NUM_FLOAT .)
    NUM_INT         reduce using rule 11 (primitive -> NUM_FLOAT .)
    NUM_FLOAT       reduce using rule 11 (primitive -> NUM_FLOAT .)
    TRUE            reduce using rule 11 (primitive -> NUM_FLOAT .)
    FALSE           reduce using rule 11 (primitive -> NUM_FLOAT .)
    RSQBRACK        reduce using rule 11 (primitive -> NUM_FLOAT .)
    COMMA           reduce using rule 11 (primitive -> NUM_FLOAT .)
    LOOP            reduce using rule 11 (primitive -> NUM_FLOAT .)
    END             reduce using rule 11 (primitive -> NUM_FLOAT .)
    ELSE            reduce using rule 11 (primitive -> NUM_FLOAT .)
    DO              reduce using rule 11 (primitive -> NUM_FLOAT .)
    RPAREN          reduce using rule 11 (primitive -> NUM_FLOAT .)
    THEN            reduce using rule 11 (primitive -> NUM_FLOAT .)
    COLON           reduce using rule 11 (primitive -> NUM_FLOAT .)
    ARROW_LTR       reduce using rule 11 (primitive -> NUM_FLOAT .)
    ARROW_RTL       reduce using rule 11 (primitive -> NUM_FLOAT .)


state 25

    (12) primitive -> boolean .

    PLUS            reduce using rule 12 (primitive -> boolean .)
    MINUS           reduce using rule 12 (primitive -> boolean .)
    MUL             reduce using rule 12 (primitive -> boolean .)
    DIV             reduce using rule 12 (primitive -> boolean .)
    EXP             reduce using rule 12 (primitive -> boolean .)
    MOD             reduce using rule 12 (primitive -> boolean .)
    BIT_AND         reduce using rule 12 (primitive -> boolean .)
    BIT_OR          reduce using rule 12 (primitive -> boolean .)
    IN              reduce using rule 12 (primitive -> boolean .)
    NOT             reduce using rule 12 (primitive -> boolean .)
    EQ              reduce using rule 12 (primitive -> boolean .)
    NEQ             reduce using rule 12 (primitive -> boolean .)
    GT              reduce using rule 12 (primitive -> boolean .)
    GTE             reduce using rule 12 (primitive -> boolean .)
    LT              reduce using rule 12 (primitive -> boolean .)
    LTE             reduce using rule 12 (primitive -> boolean .)
    AND             reduce using rule 12 (primitive -> boolean .)
    OR              reduce using rule 12 (primitive -> boolean .)
    MAIN            reduce using rule 12 (primitive -> boolean .)
    SETOUT          reduce using rule 12 (primitive -> boolean .)
    GETIN           reduce using rule 12 (primitive -> boolean .)
    FOR             reduce using rule 12 (primitive -> boolean .)
    WHILE           reduce using rule 12 (primitive -> boolean .)
    PROCCES         reduce using rule 12 (primitive -> boolean .)
    IDENTIFIER      reduce using rule 12 (primitive -> boolean .)
    BIT_NEG         reduce using rule 12 (primitive -> boolean .)
    LPAREN          reduce using rule 12 (primitive -> boolean .)
    LSQBRACK        reduce using rule 12 (primitive -> boolean .)
    IF              reduce using rule 12 (primitive -> boolean .)
    NUM_INT         reduce using rule 12 (primitive -> boolean .)
    NUM_FLOAT       reduce using rule 12 (primitive -> boolean .)
    TRUE            reduce using rule 12 (primitive -> boolean .)
    FALSE           reduce using rule 12 (primitive -> boolean .)
    RSQBRACK        reduce using rule 12 (primitive -> boolean .)
    COMMA           reduce using rule 12 (primitive -> boolean .)
    LOOP            reduce using rule 12 (primitive -> boolean .)
    END             reduce using rule 12 (primitive -> boolean .)
    ELSE            reduce using rule 12 (primitive -> boolean .)
    DO              reduce using rule 12 (primitive -> boolean .)
    RPAREN          reduce using rule 12 (primitive -> boolean .)
    THEN            reduce using rule 12 (primitive -> boolean .)
    COLON           reduce using rule 12 (primitive -> boolean .)
    ARROW_LTR       reduce using rule 12 (primitive -> boolean .)
    ARROW_RTL       reduce using rule 12 (primitive -> boolean .)


state 26

    (34) boolean -> TRUE .

    PLUS            reduce using rule 34 (boolean -> TRUE .)
    MINUS           reduce using rule 34 (boolean -> TRUE .)
    MUL             reduce using rule 34 (boolean -> TRUE .)
    DIV             reduce using rule 34 (boolean -> TRUE .)
    EXP             reduce using rule 34 (boolean -> TRUE .)
    MOD             reduce using rule 34 (boolean -> TRUE .)
    BIT_AND         reduce using rule 34 (boolean -> TRUE .)
    BIT_OR          reduce using rule 34 (boolean -> TRUE .)
    IN              reduce using rule 34 (boolean -> TRUE .)
    NOT             reduce using rule 34 (boolean -> TRUE .)
    EQ              reduce using rule 34 (boolean -> TRUE .)
    NEQ             reduce using rule 34 (boolean -> TRUE .)
    GT              reduce using rule 34 (boolean -> TRUE .)
    GTE             reduce using rule 34 (boolean -> TRUE .)
    LT              reduce using rule 34 (boolean -> TRUE .)
    LTE             reduce using rule 34 (boolean -> TRUE .)
    AND             reduce using rule 34 (boolean -> TRUE .)
    OR              reduce using rule 34 (boolean -> TRUE .)
    MAIN            reduce using rule 34 (boolean -> TRUE .)
    SETOUT          reduce using rule 34 (boolean -> TRUE .)
    GETIN           reduce using rule 34 (boolean -> TRUE .)
    FOR             reduce using rule 34 (boolean -> TRUE .)
    WHILE           reduce using rule 34 (boolean -> TRUE .)
    PROCCES         reduce using rule 34 (boolean -> TRUE .)
    IDENTIFIER      reduce using rule 34 (boolean -> TRUE .)
    BIT_NEG         reduce using rule 34 (boolean -> TRUE .)
    LPAREN          reduce using rule 34 (boolean -> TRUE .)
    LSQBRACK        reduce using rule 34 (boolean -> TRUE .)
    IF              reduce using rule 34 (boolean -> TRUE .)
    NUM_INT         reduce using rule 34 (boolean -> TRUE .)
    NUM_FLOAT       reduce using rule 34 (boolean -> TRUE .)
    TRUE            reduce using rule 34 (boolean -> TRUE .)
    FALSE           reduce using rule 34 (boolean -> TRUE .)
    RSQBRACK        reduce using rule 34 (boolean -> TRUE .)
    COMMA           reduce using rule 34 (boolean -> TRUE .)
    LOOP            reduce using rule 34 (boolean -> TRUE .)
    END             reduce using rule 34 (boolean -> TRUE .)
    ELSE            reduce using rule 34 (boolean -> TRUE .)
    DO              reduce using rule 34 (boolean -> TRUE .)
    RPAREN          reduce using rule 34 (boolean -> TRUE .)
    THEN            reduce using rule 34 (boolean -> TRUE .)
    COLON           reduce using rule 34 (boolean -> TRUE .)
    ARROW_LTR       reduce using rule 34 (boolean -> TRUE .)
    ARROW_RTL       reduce using rule 34 (boolean -> TRUE .)


state 27

    (35) boolean -> FALSE .

    PLUS            reduce using rule 35 (boolean -> FALSE .)
    MINUS           reduce using rule 35 (boolean -> FALSE .)
    MUL             reduce using rule 35 (boolean -> FALSE .)
    DIV             reduce using rule 35 (boolean -> FALSE .)
    EXP             reduce using rule 35 (boolean -> FALSE .)
    MOD             reduce using rule 35 (boolean -> FALSE .)
    BIT_AND         reduce using rule 35 (boolean -> FALSE .)
    BIT_OR          reduce using rule 35 (boolean -> FALSE .)
    IN              reduce using rule 35 (boolean -> FALSE .)
    NOT             reduce using rule 35 (boolean -> FALSE .)
    EQ              reduce using rule 35 (boolean -> FALSE .)
    NEQ             reduce using rule 35 (boolean -> FALSE .)
    GT              reduce using rule 35 (boolean -> FALSE .)
    GTE             reduce using rule 35 (boolean -> FALSE .)
    LT              reduce using rule 35 (boolean -> FALSE .)
    LTE             reduce using rule 35 (boolean -> FALSE .)
    AND             reduce using rule 35 (boolean -> FALSE .)
    OR              reduce using rule 35 (boolean -> FALSE .)
    MAIN            reduce using rule 35 (boolean -> FALSE .)
    SETOUT          reduce using rule 35 (boolean -> FALSE .)
    GETIN           reduce using rule 35 (boolean -> FALSE .)
    FOR             reduce using rule 35 (boolean -> FALSE .)
    WHILE           reduce using rule 35 (boolean -> FALSE .)
    PROCCES         reduce using rule 35 (boolean -> FALSE .)
    IDENTIFIER      reduce using rule 35 (boolean -> FALSE .)
    BIT_NEG         reduce using rule 35 (boolean -> FALSE .)
    LPAREN          reduce using rule 35 (boolean -> FALSE .)
    LSQBRACK        reduce using rule 35 (boolean -> FALSE .)
    IF              reduce using rule 35 (boolean -> FALSE .)
    NUM_INT         reduce using rule 35 (boolean -> FALSE .)
    NUM_FLOAT       reduce using rule 35 (boolean -> FALSE .)
    TRUE            reduce using rule 35 (boolean -> FALSE .)
    FALSE           reduce using rule 35 (boolean -> FALSE .)
    RSQBRACK        reduce using rule 35 (boolean -> FALSE .)
    COMMA           reduce using rule 35 (boolean -> FALSE .)
    LOOP            reduce using rule 35 (boolean -> FALSE .)
    END             reduce using rule 35 (boolean -> FALSE .)
    ELSE            reduce using rule 35 (boolean -> FALSE .)
    DO              reduce using rule 35 (boolean -> FALSE .)
    RPAREN          reduce using rule 35 (boolean -> FALSE .)
    THEN            reduce using rule 35 (boolean -> FALSE .)
    COLON           reduce using rule 35 (boolean -> FALSE .)
    ARROW_LTR       reduce using rule 35 (boolean -> FALSE .)
    ARROW_RTL       reduce using rule 35 (boolean -> FALSE .)


state 28

    (1) program -> START program_start END .

    $end            reduce using rule 1 (program -> START program_start END .)


state 29

    (2) program_start -> statement_list main_declaration .

    END             reduce using rule 2 (program_start -> statement_list main_declaration .)


state 30

    (4) statement_list -> statement_list statement .

    MAIN            reduce using rule 4 (statement_list -> statement_list statement .)
    SETOUT          reduce using rule 4 (statement_list -> statement_list statement .)
    GETIN           reduce using rule 4 (statement_list -> statement_list statement .)
    FOR             reduce using rule 4 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 4 (statement_list -> statement_list statement .)
    PROCCES         reduce using rule 4 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 4 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 4 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 4 (statement_list -> statement_list statement .)
    BIT_NEG         reduce using rule 4 (statement_list -> statement_list statement .)
    NOT             reduce using rule 4 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 4 (statement_list -> statement_list statement .)
    LSQBRACK        reduce using rule 4 (statement_list -> statement_list statement .)
    IF              reduce using rule 4 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 4 (statement_list -> statement_list statement .)
    NUM_FLOAT       reduce using rule 4 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 4 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 4 (statement_list -> statement_list statement .)
    LOOP            reduce using rule 4 (statement_list -> statement_list statement .)
    END             reduce using rule 4 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 4 (statement_list -> statement_list statement .)


state 31

    (8) main_declaration -> MAIN . identifier COLON statement_list END
    (9) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 69

state 32

    (47) statement -> identifier LSQBRACK . expression RSQBRACK EQUALS expression
    (42) expression -> identifier LSQBRACK . expression RSQBRACK
    (43) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (44) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (45) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (46) expression -> identifier LSQBRACK . COLON RSQBRACK
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    COLON           shift and go to state 71
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 70
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 33

    (48) expression -> identifier EQUALS . assignable
    (36) assignable -> . primitive
    (37) assignable -> . expression
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE
    (9) identifier -> . IDENTIFIER

    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 56
    assignable                     shift and go to state 72
    primitive                      shift and go to state 73
    expression                     shift and go to state 74
    boolean                        shift and go to state 25

state 34

    (56) expression -> identifier DOUBLE_PLUS .

    PLUS            reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    MINUS           reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    MUL             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    DIV             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    EXP             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    MOD             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    BIT_AND         reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    BIT_OR          reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    IN              reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    NOT             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    EQ              reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    NEQ             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    GT              reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    GTE             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    LT              reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    LTE             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    AND             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    OR              reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    MAIN            reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    SETOUT          reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    GETIN           reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    FOR             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    WHILE           reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    PROCCES         reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    IDENTIFIER      reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    BIT_NEG         reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    LPAREN          reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    LSQBRACK        reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    IF              reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    NUM_INT         reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    NUM_FLOAT       reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    TRUE            reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    FALSE           reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    RSQBRACK        reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    COMMA           reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    LOOP            reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    END             reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    ELSE            reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    DO              reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    RPAREN          reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    THEN            reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    COLON           reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    ARROW_LTR       reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)
    ARROW_RTL       reduce using rule 56 (expression -> identifier DOUBLE_PLUS .)


state 35

    (57) expression -> identifier DOUBLE_MINUS .

    PLUS            reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    MINUS           reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    MUL             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    DIV             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    EXP             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    MOD             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    BIT_AND         reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    BIT_OR          reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    IN              reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    NOT             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    EQ              reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    NEQ             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    GT              reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    GTE             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    LT              reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    LTE             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    AND             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    OR              reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    MAIN            reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    SETOUT          reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    GETIN           reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    FOR             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    WHILE           reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    PROCCES         reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    IDENTIFIER      reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    BIT_NEG         reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    LPAREN          reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    LSQBRACK        reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    IF              reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    NUM_INT         reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    NUM_FLOAT       reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    TRUE            reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    FALSE           reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    RSQBRACK        reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    COMMA           reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    LOOP            reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    END             reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    ELSE            reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    DO              reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    RPAREN          reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    THEN            reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    COLON           reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    ARROW_LTR       reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)
    ARROW_RTL       reduce using rule 57 (expression -> identifier DOUBLE_MINUS .)


state 36

    (13) expression -> expression PLUS . expression PLUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 75
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 37

    (14) expression -> expression MINUS . expression MINUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 76
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 38

    (15) expression -> expression MUL . expression MUL
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 77
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 39

    (16) expression -> expression DIV . expression DIV
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 78
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 40

    (17) expression -> expression EXP . expression EXP
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 79
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 41

    (18) expression -> expression MOD . expression MOD
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 80
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 42

    (19) expression -> expression BIT_AND . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 81
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 43

    (20) expression -> expression BIT_OR . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 82
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 44

    (52) expression -> expression IN . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 83
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 45

    (53) expression -> expression NOT . IN expression

    IN              shift and go to state 84


state 46

    (21) boolean -> expression EQ . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 85
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 47

    (22) boolean -> expression NEQ . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 86
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 48

    (23) boolean -> expression GT . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 87
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 49

    (24) boolean -> expression GTE . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 88
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 50

    (25) boolean -> expression LT . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 89
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 51

    (26) boolean -> expression LTE . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 90
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 52

    (27) boolean -> expression AND . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 91
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 53

    (28) boolean -> expression OR . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 92
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 54

    (41) expression -> LSQBRACK arguments . RSQBRACK
    (38) arguments -> arguments . COMMA expression

    RSQBRACK        shift and go to state 93
    COMMA           shift and go to state 94


state 55

    (39) arguments -> expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RSQBRACK        reduce using rule 39 (arguments -> expression .)
    COMMA           reduce using rule 39 (arguments -> expression .)
    MAIN            reduce using rule 39 (arguments -> expression .)
    SETOUT          reduce using rule 39 (arguments -> expression .)
    GETIN           reduce using rule 39 (arguments -> expression .)
    FOR             reduce using rule 39 (arguments -> expression .)
    WHILE           reduce using rule 39 (arguments -> expression .)
    PROCCES         reduce using rule 39 (arguments -> expression .)
    IDENTIFIER      reduce using rule 39 (arguments -> expression .)
    BIT_NEG         reduce using rule 39 (arguments -> expression .)
    LPAREN          reduce using rule 39 (arguments -> expression .)
    LSQBRACK        reduce using rule 39 (arguments -> expression .)
    IF              reduce using rule 39 (arguments -> expression .)
    NUM_INT         reduce using rule 39 (arguments -> expression .)
    NUM_FLOAT       reduce using rule 39 (arguments -> expression .)
    TRUE            reduce using rule 39 (arguments -> expression .)
    FALSE           reduce using rule 39 (arguments -> expression .)
    LOOP            reduce using rule 39 (arguments -> expression .)
    END             reduce using rule 39 (arguments -> expression .)
    ELSE            reduce using rule 39 (arguments -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! MINUS           [ reduce using rule 39 (arguments -> expression .) ]
  ! PLUS            [ reduce using rule 39 (arguments -> expression .) ]
  ! NOT             [ reduce using rule 39 (arguments -> expression .) ]


state 56

    (42) expression -> identifier . LSQBRACK expression RSQBRACK
    (43) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (45) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (46) expression -> identifier . LSQBRACK COLON RSQBRACK
    (48) expression -> identifier . EQUALS assignable
    (56) expression -> identifier . DOUBLE_PLUS
    (57) expression -> identifier . DOUBLE_MINUS
    (59) expression -> identifier .

  ! shift/reduce conflict for LSQBRACK resolved as shift
    LSQBRACK        shift and go to state 95
    EQUALS          shift and go to state 33
    DOUBLE_PLUS     shift and go to state 34
    DOUBLE_MINUS    shift and go to state 35
    PLUS            reduce using rule 59 (expression -> identifier .)
    MINUS           reduce using rule 59 (expression -> identifier .)
    MUL             reduce using rule 59 (expression -> identifier .)
    DIV             reduce using rule 59 (expression -> identifier .)
    EXP             reduce using rule 59 (expression -> identifier .)
    MOD             reduce using rule 59 (expression -> identifier .)
    BIT_AND         reduce using rule 59 (expression -> identifier .)
    BIT_OR          reduce using rule 59 (expression -> identifier .)
    IN              reduce using rule 59 (expression -> identifier .)
    NOT             reduce using rule 59 (expression -> identifier .)
    EQ              reduce using rule 59 (expression -> identifier .)
    NEQ             reduce using rule 59 (expression -> identifier .)
    GT              reduce using rule 59 (expression -> identifier .)
    GTE             reduce using rule 59 (expression -> identifier .)
    LT              reduce using rule 59 (expression -> identifier .)
    LTE             reduce using rule 59 (expression -> identifier .)
    AND             reduce using rule 59 (expression -> identifier .)
    OR              reduce using rule 59 (expression -> identifier .)
    RSQBRACK        reduce using rule 59 (expression -> identifier .)
    COMMA           reduce using rule 59 (expression -> identifier .)
    MAIN            reduce using rule 59 (expression -> identifier .)
    SETOUT          reduce using rule 59 (expression -> identifier .)
    GETIN           reduce using rule 59 (expression -> identifier .)
    FOR             reduce using rule 59 (expression -> identifier .)
    WHILE           reduce using rule 59 (expression -> identifier .)
    PROCCES         reduce using rule 59 (expression -> identifier .)
    IDENTIFIER      reduce using rule 59 (expression -> identifier .)
    BIT_NEG         reduce using rule 59 (expression -> identifier .)
    LPAREN          reduce using rule 59 (expression -> identifier .)
    IF              reduce using rule 59 (expression -> identifier .)
    NUM_INT         reduce using rule 59 (expression -> identifier .)
    NUM_FLOAT       reduce using rule 59 (expression -> identifier .)
    TRUE            reduce using rule 59 (expression -> identifier .)
    FALSE           reduce using rule 59 (expression -> identifier .)
    LOOP            reduce using rule 59 (expression -> identifier .)
    END             reduce using rule 59 (expression -> identifier .)
    ELSE            reduce using rule 59 (expression -> identifier .)
    DO              reduce using rule 59 (expression -> identifier .)
    RPAREN          reduce using rule 59 (expression -> identifier .)
    THEN            reduce using rule 59 (expression -> identifier .)
    COLON           reduce using rule 59 (expression -> identifier .)
    ARROW_LTR       reduce using rule 59 (expression -> identifier .)
    ARROW_RTL       reduce using rule 59 (expression -> identifier .)

  ! LSQBRACK        [ reduce using rule 59 (expression -> identifier .) ]


state 57

    (65) expression -> PROCCES . identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 96

state 58

    (54) statement -> SETOUT arguments .
    (38) arguments -> arguments . COMMA expression

    MAIN            reduce using rule 54 (statement -> SETOUT arguments .)
    SETOUT          reduce using rule 54 (statement -> SETOUT arguments .)
    GETIN           reduce using rule 54 (statement -> SETOUT arguments .)
    FOR             reduce using rule 54 (statement -> SETOUT arguments .)
    WHILE           reduce using rule 54 (statement -> SETOUT arguments .)
    PROCCES         reduce using rule 54 (statement -> SETOUT arguments .)
    IDENTIFIER      reduce using rule 54 (statement -> SETOUT arguments .)
    MINUS           reduce using rule 54 (statement -> SETOUT arguments .)
    PLUS            reduce using rule 54 (statement -> SETOUT arguments .)
    BIT_NEG         reduce using rule 54 (statement -> SETOUT arguments .)
    NOT             reduce using rule 54 (statement -> SETOUT arguments .)
    LPAREN          reduce using rule 54 (statement -> SETOUT arguments .)
    LSQBRACK        reduce using rule 54 (statement -> SETOUT arguments .)
    IF              reduce using rule 54 (statement -> SETOUT arguments .)
    NUM_INT         reduce using rule 54 (statement -> SETOUT arguments .)
    NUM_FLOAT       reduce using rule 54 (statement -> SETOUT arguments .)
    TRUE            reduce using rule 54 (statement -> SETOUT arguments .)
    FALSE           reduce using rule 54 (statement -> SETOUT arguments .)
    LOOP            reduce using rule 54 (statement -> SETOUT arguments .)
    END             reduce using rule 54 (statement -> SETOUT arguments .)
    ELSE            reduce using rule 54 (statement -> SETOUT arguments .)
    COMMA           shift and go to state 94


state 59

    (55) statement -> GETIN arguments .
    (38) arguments -> arguments . COMMA expression

    MAIN            reduce using rule 55 (statement -> GETIN arguments .)
    SETOUT          reduce using rule 55 (statement -> GETIN arguments .)
    GETIN           reduce using rule 55 (statement -> GETIN arguments .)
    FOR             reduce using rule 55 (statement -> GETIN arguments .)
    WHILE           reduce using rule 55 (statement -> GETIN arguments .)
    PROCCES         reduce using rule 55 (statement -> GETIN arguments .)
    IDENTIFIER      reduce using rule 55 (statement -> GETIN arguments .)
    MINUS           reduce using rule 55 (statement -> GETIN arguments .)
    PLUS            reduce using rule 55 (statement -> GETIN arguments .)
    BIT_NEG         reduce using rule 55 (statement -> GETIN arguments .)
    NOT             reduce using rule 55 (statement -> GETIN arguments .)
    LPAREN          reduce using rule 55 (statement -> GETIN arguments .)
    LSQBRACK        reduce using rule 55 (statement -> GETIN arguments .)
    IF              reduce using rule 55 (statement -> GETIN arguments .)
    NUM_INT         reduce using rule 55 (statement -> GETIN arguments .)
    NUM_FLOAT       reduce using rule 55 (statement -> GETIN arguments .)
    TRUE            reduce using rule 55 (statement -> GETIN arguments .)
    FALSE           reduce using rule 55 (statement -> GETIN arguments .)
    LOOP            reduce using rule 55 (statement -> GETIN arguments .)
    END             reduce using rule 55 (statement -> GETIN arguments .)
    ELSE            reduce using rule 55 (statement -> GETIN arguments .)
    COMMA           shift and go to state 94


state 60

    (60) statement -> FOR identifier . IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> FOR identifier . IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> FOR identifier . IN expression DO statement_list LOOP

    IN              shift and go to state 97


state 61

    (63) statement -> WHILE expression . DO statement_list LOOP
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    DO              shift and go to state 98
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 62

    (64) statement -> PROCCES identifier . COLON statement_list END
    (66) statement -> PROCCES identifier . ARROW_LTR START
    (65) expression -> PROCCES identifier . ARROW_LTR START

    COLON           shift and go to state 99
    ARROW_LTR       shift and go to state 100


state 63

    (30) expression -> PLUS expression . PLUS
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    PLUS            shift and go to state 101
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 64

    (29) expression -> MINUS expression . MINUS
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    MINUS           shift and go to state 102
    PLUS            shift and go to state 36
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 65

    (31) expression -> BIT_NEG expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 31 (expression -> BIT_NEG expression .)
    SETOUT          reduce using rule 31 (expression -> BIT_NEG expression .)
    GETIN           reduce using rule 31 (expression -> BIT_NEG expression .)
    FOR             reduce using rule 31 (expression -> BIT_NEG expression .)
    WHILE           reduce using rule 31 (expression -> BIT_NEG expression .)
    PROCCES         reduce using rule 31 (expression -> BIT_NEG expression .)
    IDENTIFIER      reduce using rule 31 (expression -> BIT_NEG expression .)
    BIT_NEG         reduce using rule 31 (expression -> BIT_NEG expression .)
    LPAREN          reduce using rule 31 (expression -> BIT_NEG expression .)
    LSQBRACK        reduce using rule 31 (expression -> BIT_NEG expression .)
    IF              reduce using rule 31 (expression -> BIT_NEG expression .)
    NUM_INT         reduce using rule 31 (expression -> BIT_NEG expression .)
    NUM_FLOAT       reduce using rule 31 (expression -> BIT_NEG expression .)
    TRUE            reduce using rule 31 (expression -> BIT_NEG expression .)
    FALSE           reduce using rule 31 (expression -> BIT_NEG expression .)
    RSQBRACK        reduce using rule 31 (expression -> BIT_NEG expression .)
    COMMA           reduce using rule 31 (expression -> BIT_NEG expression .)
    LOOP            reduce using rule 31 (expression -> BIT_NEG expression .)
    END             reduce using rule 31 (expression -> BIT_NEG expression .)
    ELSE            reduce using rule 31 (expression -> BIT_NEG expression .)
    DO              reduce using rule 31 (expression -> BIT_NEG expression .)
    RPAREN          reduce using rule 31 (expression -> BIT_NEG expression .)
    THEN            reduce using rule 31 (expression -> BIT_NEG expression .)
    COLON           reduce using rule 31 (expression -> BIT_NEG expression .)
    ARROW_LTR       reduce using rule 31 (expression -> BIT_NEG expression .)
    ARROW_RTL       reduce using rule 31 (expression -> BIT_NEG expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! MUL             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! DIV             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! EXP             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! MOD             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! BIT_AND         [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! BIT_OR          [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! IN              [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! NOT             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! EQ              [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! NEQ             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! GT              [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! GTE             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! LT              [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! LTE             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! AND             [ reduce using rule 31 (expression -> BIT_NEG expression .) ]
  ! OR              [ reduce using rule 31 (expression -> BIT_NEG expression .) ]


state 66

    (32) expression -> NOT expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 32 (expression -> NOT expression .)
    SETOUT          reduce using rule 32 (expression -> NOT expression .)
    GETIN           reduce using rule 32 (expression -> NOT expression .)
    FOR             reduce using rule 32 (expression -> NOT expression .)
    WHILE           reduce using rule 32 (expression -> NOT expression .)
    PROCCES         reduce using rule 32 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 32 (expression -> NOT expression .)
    BIT_NEG         reduce using rule 32 (expression -> NOT expression .)
    LPAREN          reduce using rule 32 (expression -> NOT expression .)
    LSQBRACK        reduce using rule 32 (expression -> NOT expression .)
    IF              reduce using rule 32 (expression -> NOT expression .)
    NUM_INT         reduce using rule 32 (expression -> NOT expression .)
    NUM_FLOAT       reduce using rule 32 (expression -> NOT expression .)
    TRUE            reduce using rule 32 (expression -> NOT expression .)
    FALSE           reduce using rule 32 (expression -> NOT expression .)
    RSQBRACK        reduce using rule 32 (expression -> NOT expression .)
    COMMA           reduce using rule 32 (expression -> NOT expression .)
    LOOP            reduce using rule 32 (expression -> NOT expression .)
    END             reduce using rule 32 (expression -> NOT expression .)
    ELSE            reduce using rule 32 (expression -> NOT expression .)
    DO              reduce using rule 32 (expression -> NOT expression .)
    RPAREN          reduce using rule 32 (expression -> NOT expression .)
    THEN            reduce using rule 32 (expression -> NOT expression .)
    COLON           reduce using rule 32 (expression -> NOT expression .)
    ARROW_LTR       reduce using rule 32 (expression -> NOT expression .)
    ARROW_RTL       reduce using rule 32 (expression -> NOT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 32 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! BIT_AND         [ reduce using rule 32 (expression -> NOT expression .) ]
  ! BIT_OR          [ reduce using rule 32 (expression -> NOT expression .) ]
  ! IN              [ reduce using rule 32 (expression -> NOT expression .) ]
  ! NOT             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 32 (expression -> NOT expression .) ]
  ! NEQ             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 32 (expression -> NOT expression .) ]
  ! GTE             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 32 (expression -> NOT expression .) ]
  ! LTE             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 32 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 32 (expression -> NOT expression .) ]


state 67

    (33) expression -> LPAREN expression . RPAREN
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    RPAREN          shift and go to state 103
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 68

    (49) if_statement -> IF expression . THEN statement_list END
    (50) if_statement -> IF expression . THEN statement_list ELSE statement_list END
    (51) if_statement -> IF expression . THEN statement_list ELSE if_statement
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    THEN            shift and go to state 104
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 69

    (8) main_declaration -> MAIN identifier . COLON statement_list END

    COLON           shift and go to state 105


state 70

    (47) statement -> identifier LSQBRACK expression . RSQBRACK EQUALS expression
    (42) expression -> identifier LSQBRACK expression . RSQBRACK
    (43) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (45) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 106
    COLON           shift and go to state 107
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 71

    (44) expression -> identifier LSQBRACK COLON . expression RSQBRACK
    (46) expression -> identifier LSQBRACK COLON . RSQBRACK
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    RSQBRACK        shift and go to state 109
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 108
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 72

    (48) expression -> identifier EQUALS assignable .

    PLUS            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    MINUS           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    MUL             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    DIV             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    EXP             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    MOD             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    BIT_AND         reduce using rule 48 (expression -> identifier EQUALS assignable .)
    BIT_OR          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    IN              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    NOT             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    EQ              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    NEQ             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    GT              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    GTE             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    LT              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    LTE             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    AND             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    OR              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    MAIN            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    SETOUT          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    GETIN           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    FOR             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    WHILE           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    PROCCES         reduce using rule 48 (expression -> identifier EQUALS assignable .)
    IDENTIFIER      reduce using rule 48 (expression -> identifier EQUALS assignable .)
    BIT_NEG         reduce using rule 48 (expression -> identifier EQUALS assignable .)
    LPAREN          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    LSQBRACK        reduce using rule 48 (expression -> identifier EQUALS assignable .)
    IF              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    NUM_INT         reduce using rule 48 (expression -> identifier EQUALS assignable .)
    NUM_FLOAT       reduce using rule 48 (expression -> identifier EQUALS assignable .)
    TRUE            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    FALSE           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    RSQBRACK        reduce using rule 48 (expression -> identifier EQUALS assignable .)
    COMMA           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    LOOP            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    END             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    ELSE            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    DO              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    RPAREN          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    THEN            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    COLON           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    ARROW_LTR       reduce using rule 48 (expression -> identifier EQUALS assignable .)
    ARROW_RTL       reduce using rule 48 (expression -> identifier EQUALS assignable .)


state 73

    (36) assignable -> primitive .
    (58) expression -> primitive .

  ! reduce/reduce conflict for PLUS resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for MUL resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for DIV resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for EXP resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for MOD resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for IN resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for NOT resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for NEQ resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for GT resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for GTE resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for LT resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for LTE resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for AND resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for OR resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for MAIN resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for SETOUT resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for GETIN resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for WHILE resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for PROCCES resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for LPAREN resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for IF resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for TRUE resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for FALSE resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for RSQBRACK resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for LOOP resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for END resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for ELSE resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for DO resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for THEN resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for COLON resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for ARROW_LTR resolved using rule 36 (assignable -> primitive .)
  ! reduce/reduce conflict for ARROW_RTL resolved using rule 36 (assignable -> primitive .)
    PLUS            reduce using rule 36 (assignable -> primitive .)
    MINUS           reduce using rule 36 (assignable -> primitive .)
    MUL             reduce using rule 36 (assignable -> primitive .)
    DIV             reduce using rule 36 (assignable -> primitive .)
    EXP             reduce using rule 36 (assignable -> primitive .)
    MOD             reduce using rule 36 (assignable -> primitive .)
    BIT_AND         reduce using rule 36 (assignable -> primitive .)
    BIT_OR          reduce using rule 36 (assignable -> primitive .)
    IN              reduce using rule 36 (assignable -> primitive .)
    NOT             reduce using rule 36 (assignable -> primitive .)
    EQ              reduce using rule 36 (assignable -> primitive .)
    NEQ             reduce using rule 36 (assignable -> primitive .)
    GT              reduce using rule 36 (assignable -> primitive .)
    GTE             reduce using rule 36 (assignable -> primitive .)
    LT              reduce using rule 36 (assignable -> primitive .)
    LTE             reduce using rule 36 (assignable -> primitive .)
    AND             reduce using rule 36 (assignable -> primitive .)
    OR              reduce using rule 36 (assignable -> primitive .)
    MAIN            reduce using rule 36 (assignable -> primitive .)
    SETOUT          reduce using rule 36 (assignable -> primitive .)
    GETIN           reduce using rule 36 (assignable -> primitive .)
    FOR             reduce using rule 36 (assignable -> primitive .)
    WHILE           reduce using rule 36 (assignable -> primitive .)
    PROCCES         reduce using rule 36 (assignable -> primitive .)
    IDENTIFIER      reduce using rule 36 (assignable -> primitive .)
    BIT_NEG         reduce using rule 36 (assignable -> primitive .)
    LPAREN          reduce using rule 36 (assignable -> primitive .)
    LSQBRACK        reduce using rule 36 (assignable -> primitive .)
    IF              reduce using rule 36 (assignable -> primitive .)
    NUM_INT         reduce using rule 36 (assignable -> primitive .)
    NUM_FLOAT       reduce using rule 36 (assignable -> primitive .)
    TRUE            reduce using rule 36 (assignable -> primitive .)
    FALSE           reduce using rule 36 (assignable -> primitive .)
    RSQBRACK        reduce using rule 36 (assignable -> primitive .)
    COMMA           reduce using rule 36 (assignable -> primitive .)
    LOOP            reduce using rule 36 (assignable -> primitive .)
    END             reduce using rule 36 (assignable -> primitive .)
    ELSE            reduce using rule 36 (assignable -> primitive .)
    DO              reduce using rule 36 (assignable -> primitive .)
    RPAREN          reduce using rule 36 (assignable -> primitive .)
    THEN            reduce using rule 36 (assignable -> primitive .)
    COLON           reduce using rule 36 (assignable -> primitive .)
    ARROW_LTR       reduce using rule 36 (assignable -> primitive .)
    ARROW_RTL       reduce using rule 36 (assignable -> primitive .)

  ! PLUS            [ reduce using rule 58 (expression -> primitive .) ]
  ! MINUS           [ reduce using rule 58 (expression -> primitive .) ]
  ! MUL             [ reduce using rule 58 (expression -> primitive .) ]
  ! DIV             [ reduce using rule 58 (expression -> primitive .) ]
  ! EXP             [ reduce using rule 58 (expression -> primitive .) ]
  ! MOD             [ reduce using rule 58 (expression -> primitive .) ]
  ! BIT_AND         [ reduce using rule 58 (expression -> primitive .) ]
  ! BIT_OR          [ reduce using rule 58 (expression -> primitive .) ]
  ! IN              [ reduce using rule 58 (expression -> primitive .) ]
  ! NOT             [ reduce using rule 58 (expression -> primitive .) ]
  ! EQ              [ reduce using rule 58 (expression -> primitive .) ]
  ! NEQ             [ reduce using rule 58 (expression -> primitive .) ]
  ! GT              [ reduce using rule 58 (expression -> primitive .) ]
  ! GTE             [ reduce using rule 58 (expression -> primitive .) ]
  ! LT              [ reduce using rule 58 (expression -> primitive .) ]
  ! LTE             [ reduce using rule 58 (expression -> primitive .) ]
  ! AND             [ reduce using rule 58 (expression -> primitive .) ]
  ! OR              [ reduce using rule 58 (expression -> primitive .) ]
  ! MAIN            [ reduce using rule 58 (expression -> primitive .) ]
  ! SETOUT          [ reduce using rule 58 (expression -> primitive .) ]
  ! GETIN           [ reduce using rule 58 (expression -> primitive .) ]
  ! FOR             [ reduce using rule 58 (expression -> primitive .) ]
  ! WHILE           [ reduce using rule 58 (expression -> primitive .) ]
  ! PROCCES         [ reduce using rule 58 (expression -> primitive .) ]
  ! IDENTIFIER      [ reduce using rule 58 (expression -> primitive .) ]
  ! BIT_NEG         [ reduce using rule 58 (expression -> primitive .) ]
  ! LPAREN          [ reduce using rule 58 (expression -> primitive .) ]
  ! LSQBRACK        [ reduce using rule 58 (expression -> primitive .) ]
  ! IF              [ reduce using rule 58 (expression -> primitive .) ]
  ! NUM_INT         [ reduce using rule 58 (expression -> primitive .) ]
  ! NUM_FLOAT       [ reduce using rule 58 (expression -> primitive .) ]
  ! TRUE            [ reduce using rule 58 (expression -> primitive .) ]
  ! FALSE           [ reduce using rule 58 (expression -> primitive .) ]
  ! RSQBRACK        [ reduce using rule 58 (expression -> primitive .) ]
  ! COMMA           [ reduce using rule 58 (expression -> primitive .) ]
  ! LOOP            [ reduce using rule 58 (expression -> primitive .) ]
  ! END             [ reduce using rule 58 (expression -> primitive .) ]
  ! ELSE            [ reduce using rule 58 (expression -> primitive .) ]
  ! DO              [ reduce using rule 58 (expression -> primitive .) ]
  ! RPAREN          [ reduce using rule 58 (expression -> primitive .) ]
  ! THEN            [ reduce using rule 58 (expression -> primitive .) ]
  ! COLON           [ reduce using rule 58 (expression -> primitive .) ]
  ! ARROW_LTR       [ reduce using rule 58 (expression -> primitive .) ]
  ! ARROW_RTL       [ reduce using rule 58 (expression -> primitive .) ]


state 74

    (37) assignable -> expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 37 (assignable -> expression .)
    SETOUT          reduce using rule 37 (assignable -> expression .)
    GETIN           reduce using rule 37 (assignable -> expression .)
    FOR             reduce using rule 37 (assignable -> expression .)
    WHILE           reduce using rule 37 (assignable -> expression .)
    PROCCES         reduce using rule 37 (assignable -> expression .)
    IDENTIFIER      reduce using rule 37 (assignable -> expression .)
    BIT_NEG         reduce using rule 37 (assignable -> expression .)
    LPAREN          reduce using rule 37 (assignable -> expression .)
    LSQBRACK        reduce using rule 37 (assignable -> expression .)
    IF              reduce using rule 37 (assignable -> expression .)
    NUM_INT         reduce using rule 37 (assignable -> expression .)
    NUM_FLOAT       reduce using rule 37 (assignable -> expression .)
    TRUE            reduce using rule 37 (assignable -> expression .)
    FALSE           reduce using rule 37 (assignable -> expression .)
    RSQBRACK        reduce using rule 37 (assignable -> expression .)
    COMMA           reduce using rule 37 (assignable -> expression .)
    LOOP            reduce using rule 37 (assignable -> expression .)
    END             reduce using rule 37 (assignable -> expression .)
    ELSE            reduce using rule 37 (assignable -> expression .)
    DO              reduce using rule 37 (assignable -> expression .)
    RPAREN          reduce using rule 37 (assignable -> expression .)
    THEN            reduce using rule 37 (assignable -> expression .)
    COLON           reduce using rule 37 (assignable -> expression .)
    ARROW_LTR       reduce using rule 37 (assignable -> expression .)
    ARROW_RTL       reduce using rule 37 (assignable -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 37 (assignable -> expression .) ]
  ! MINUS           [ reduce using rule 37 (assignable -> expression .) ]
  ! MUL             [ reduce using rule 37 (assignable -> expression .) ]
  ! DIV             [ reduce using rule 37 (assignable -> expression .) ]
  ! EXP             [ reduce using rule 37 (assignable -> expression .) ]
  ! MOD             [ reduce using rule 37 (assignable -> expression .) ]
  ! BIT_AND         [ reduce using rule 37 (assignable -> expression .) ]
  ! BIT_OR          [ reduce using rule 37 (assignable -> expression .) ]
  ! IN              [ reduce using rule 37 (assignable -> expression .) ]
  ! NOT             [ reduce using rule 37 (assignable -> expression .) ]
  ! EQ              [ reduce using rule 37 (assignable -> expression .) ]
  ! NEQ             [ reduce using rule 37 (assignable -> expression .) ]
  ! GT              [ reduce using rule 37 (assignable -> expression .) ]
  ! GTE             [ reduce using rule 37 (assignable -> expression .) ]
  ! LT              [ reduce using rule 37 (assignable -> expression .) ]
  ! LTE             [ reduce using rule 37 (assignable -> expression .) ]
  ! AND             [ reduce using rule 37 (assignable -> expression .) ]
  ! OR              [ reduce using rule 37 (assignable -> expression .) ]


state 75

    (13) expression -> expression PLUS expression . PLUS
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    PLUS            shift and go to state 110
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 76

    (14) expression -> expression MINUS expression . MINUS
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    MINUS           shift and go to state 111
    PLUS            shift and go to state 36
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 77

    (15) expression -> expression MUL expression . MUL
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    MUL             shift and go to state 112
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 78

    (16) expression -> expression DIV expression . DIV
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    DIV             shift and go to state 113
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 79

    (17) expression -> expression EXP expression . EXP
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    EXP             shift and go to state 114
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 80

    (18) expression -> expression MOD expression . MOD
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    MOD             shift and go to state 115
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 81

    (19) expression -> expression BIT_AND expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 19 (expression -> expression BIT_AND expression .)
    SETOUT          reduce using rule 19 (expression -> expression BIT_AND expression .)
    GETIN           reduce using rule 19 (expression -> expression BIT_AND expression .)
    FOR             reduce using rule 19 (expression -> expression BIT_AND expression .)
    WHILE           reduce using rule 19 (expression -> expression BIT_AND expression .)
    PROCCES         reduce using rule 19 (expression -> expression BIT_AND expression .)
    IDENTIFIER      reduce using rule 19 (expression -> expression BIT_AND expression .)
    BIT_NEG         reduce using rule 19 (expression -> expression BIT_AND expression .)
    LPAREN          reduce using rule 19 (expression -> expression BIT_AND expression .)
    LSQBRACK        reduce using rule 19 (expression -> expression BIT_AND expression .)
    IF              reduce using rule 19 (expression -> expression BIT_AND expression .)
    NUM_INT         reduce using rule 19 (expression -> expression BIT_AND expression .)
    NUM_FLOAT       reduce using rule 19 (expression -> expression BIT_AND expression .)
    TRUE            reduce using rule 19 (expression -> expression BIT_AND expression .)
    FALSE           reduce using rule 19 (expression -> expression BIT_AND expression .)
    RSQBRACK        reduce using rule 19 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 19 (expression -> expression BIT_AND expression .)
    LOOP            reduce using rule 19 (expression -> expression BIT_AND expression .)
    END             reduce using rule 19 (expression -> expression BIT_AND expression .)
    ELSE            reduce using rule 19 (expression -> expression BIT_AND expression .)
    DO              reduce using rule 19 (expression -> expression BIT_AND expression .)
    RPAREN          reduce using rule 19 (expression -> expression BIT_AND expression .)
    THEN            reduce using rule 19 (expression -> expression BIT_AND expression .)
    COLON           reduce using rule 19 (expression -> expression BIT_AND expression .)
    ARROW_LTR       reduce using rule 19 (expression -> expression BIT_AND expression .)
    ARROW_RTL       reduce using rule 19 (expression -> expression BIT_AND expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MUL             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! DIV             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! EXP             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MOD             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_AND         [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_OR          [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! IN              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! NOT             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! EQ              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! NEQ             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! GT              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! GTE             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LT              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LTE             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! AND             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! OR              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]


state 82

    (20) expression -> expression BIT_OR expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 20 (expression -> expression BIT_OR expression .)
    SETOUT          reduce using rule 20 (expression -> expression BIT_OR expression .)
    GETIN           reduce using rule 20 (expression -> expression BIT_OR expression .)
    FOR             reduce using rule 20 (expression -> expression BIT_OR expression .)
    WHILE           reduce using rule 20 (expression -> expression BIT_OR expression .)
    PROCCES         reduce using rule 20 (expression -> expression BIT_OR expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression BIT_OR expression .)
    BIT_NEG         reduce using rule 20 (expression -> expression BIT_OR expression .)
    LPAREN          reduce using rule 20 (expression -> expression BIT_OR expression .)
    LSQBRACK        reduce using rule 20 (expression -> expression BIT_OR expression .)
    IF              reduce using rule 20 (expression -> expression BIT_OR expression .)
    NUM_INT         reduce using rule 20 (expression -> expression BIT_OR expression .)
    NUM_FLOAT       reduce using rule 20 (expression -> expression BIT_OR expression .)
    TRUE            reduce using rule 20 (expression -> expression BIT_OR expression .)
    FALSE           reduce using rule 20 (expression -> expression BIT_OR expression .)
    RSQBRACK        reduce using rule 20 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 20 (expression -> expression BIT_OR expression .)
    LOOP            reduce using rule 20 (expression -> expression BIT_OR expression .)
    END             reduce using rule 20 (expression -> expression BIT_OR expression .)
    ELSE            reduce using rule 20 (expression -> expression BIT_OR expression .)
    DO              reduce using rule 20 (expression -> expression BIT_OR expression .)
    RPAREN          reduce using rule 20 (expression -> expression BIT_OR expression .)
    THEN            reduce using rule 20 (expression -> expression BIT_OR expression .)
    COLON           reduce using rule 20 (expression -> expression BIT_OR expression .)
    ARROW_LTR       reduce using rule 20 (expression -> expression BIT_OR expression .)
    ARROW_RTL       reduce using rule 20 (expression -> expression BIT_OR expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MUL             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! EXP             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MOD             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_OR          [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! IN              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! NOT             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! EQ              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! NEQ             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! GT              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! GTE             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LT              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LTE             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]


state 83

    (52) expression -> expression IN expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 52 (expression -> expression IN expression .)
    SETOUT          reduce using rule 52 (expression -> expression IN expression .)
    GETIN           reduce using rule 52 (expression -> expression IN expression .)
    FOR             reduce using rule 52 (expression -> expression IN expression .)
    WHILE           reduce using rule 52 (expression -> expression IN expression .)
    PROCCES         reduce using rule 52 (expression -> expression IN expression .)
    IDENTIFIER      reduce using rule 52 (expression -> expression IN expression .)
    BIT_NEG         reduce using rule 52 (expression -> expression IN expression .)
    LPAREN          reduce using rule 52 (expression -> expression IN expression .)
    LSQBRACK        reduce using rule 52 (expression -> expression IN expression .)
    IF              reduce using rule 52 (expression -> expression IN expression .)
    NUM_INT         reduce using rule 52 (expression -> expression IN expression .)
    NUM_FLOAT       reduce using rule 52 (expression -> expression IN expression .)
    TRUE            reduce using rule 52 (expression -> expression IN expression .)
    FALSE           reduce using rule 52 (expression -> expression IN expression .)
    RSQBRACK        reduce using rule 52 (expression -> expression IN expression .)
    COMMA           reduce using rule 52 (expression -> expression IN expression .)
    LOOP            reduce using rule 52 (expression -> expression IN expression .)
    END             reduce using rule 52 (expression -> expression IN expression .)
    ELSE            reduce using rule 52 (expression -> expression IN expression .)
    DO              reduce using rule 52 (expression -> expression IN expression .)
    RPAREN          reduce using rule 52 (expression -> expression IN expression .)
    THEN            reduce using rule 52 (expression -> expression IN expression .)
    COLON           reduce using rule 52 (expression -> expression IN expression .)
    ARROW_LTR       reduce using rule 52 (expression -> expression IN expression .)
    ARROW_RTL       reduce using rule 52 (expression -> expression IN expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! MUL             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! DIV             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! EXP             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! BIT_AND         [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! BIT_OR          [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! IN              [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! NOT             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! NEQ             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! GT              [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! GTE             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! LT              [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! LTE             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression IN expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression IN expression .) ]


state 84

    (53) expression -> expression NOT IN . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 116
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 85

    (21) boolean -> expression EQ expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 21 (boolean -> expression EQ expression .)
    SETOUT          reduce using rule 21 (boolean -> expression EQ expression .)
    GETIN           reduce using rule 21 (boolean -> expression EQ expression .)
    FOR             reduce using rule 21 (boolean -> expression EQ expression .)
    WHILE           reduce using rule 21 (boolean -> expression EQ expression .)
    PROCCES         reduce using rule 21 (boolean -> expression EQ expression .)
    IDENTIFIER      reduce using rule 21 (boolean -> expression EQ expression .)
    BIT_NEG         reduce using rule 21 (boolean -> expression EQ expression .)
    LPAREN          reduce using rule 21 (boolean -> expression EQ expression .)
    LSQBRACK        reduce using rule 21 (boolean -> expression EQ expression .)
    IF              reduce using rule 21 (boolean -> expression EQ expression .)
    NUM_INT         reduce using rule 21 (boolean -> expression EQ expression .)
    NUM_FLOAT       reduce using rule 21 (boolean -> expression EQ expression .)
    TRUE            reduce using rule 21 (boolean -> expression EQ expression .)
    FALSE           reduce using rule 21 (boolean -> expression EQ expression .)
    RSQBRACK        reduce using rule 21 (boolean -> expression EQ expression .)
    COMMA           reduce using rule 21 (boolean -> expression EQ expression .)
    LOOP            reduce using rule 21 (boolean -> expression EQ expression .)
    END             reduce using rule 21 (boolean -> expression EQ expression .)
    ELSE            reduce using rule 21 (boolean -> expression EQ expression .)
    DO              reduce using rule 21 (boolean -> expression EQ expression .)
    RPAREN          reduce using rule 21 (boolean -> expression EQ expression .)
    THEN            reduce using rule 21 (boolean -> expression EQ expression .)
    COLON           reduce using rule 21 (boolean -> expression EQ expression .)
    ARROW_LTR       reduce using rule 21 (boolean -> expression EQ expression .)
    ARROW_RTL       reduce using rule 21 (boolean -> expression EQ expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! EXP             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! BIT_AND         [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! BIT_OR          [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! IN              [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! NOT             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! GT              [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! GTE             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! LT              [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! LTE             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! AND             [ reduce using rule 21 (boolean -> expression EQ expression .) ]
  ! OR              [ reduce using rule 21 (boolean -> expression EQ expression .) ]


state 86

    (22) boolean -> expression NEQ expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 22 (boolean -> expression NEQ expression .)
    SETOUT          reduce using rule 22 (boolean -> expression NEQ expression .)
    GETIN           reduce using rule 22 (boolean -> expression NEQ expression .)
    FOR             reduce using rule 22 (boolean -> expression NEQ expression .)
    WHILE           reduce using rule 22 (boolean -> expression NEQ expression .)
    PROCCES         reduce using rule 22 (boolean -> expression NEQ expression .)
    IDENTIFIER      reduce using rule 22 (boolean -> expression NEQ expression .)
    BIT_NEG         reduce using rule 22 (boolean -> expression NEQ expression .)
    LPAREN          reduce using rule 22 (boolean -> expression NEQ expression .)
    LSQBRACK        reduce using rule 22 (boolean -> expression NEQ expression .)
    IF              reduce using rule 22 (boolean -> expression NEQ expression .)
    NUM_INT         reduce using rule 22 (boolean -> expression NEQ expression .)
    NUM_FLOAT       reduce using rule 22 (boolean -> expression NEQ expression .)
    TRUE            reduce using rule 22 (boolean -> expression NEQ expression .)
    FALSE           reduce using rule 22 (boolean -> expression NEQ expression .)
    RSQBRACK        reduce using rule 22 (boolean -> expression NEQ expression .)
    COMMA           reduce using rule 22 (boolean -> expression NEQ expression .)
    LOOP            reduce using rule 22 (boolean -> expression NEQ expression .)
    END             reduce using rule 22 (boolean -> expression NEQ expression .)
    ELSE            reduce using rule 22 (boolean -> expression NEQ expression .)
    DO              reduce using rule 22 (boolean -> expression NEQ expression .)
    RPAREN          reduce using rule 22 (boolean -> expression NEQ expression .)
    THEN            reduce using rule 22 (boolean -> expression NEQ expression .)
    COLON           reduce using rule 22 (boolean -> expression NEQ expression .)
    ARROW_LTR       reduce using rule 22 (boolean -> expression NEQ expression .)
    ARROW_RTL       reduce using rule 22 (boolean -> expression NEQ expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! MUL             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! EXP             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! BIT_AND         [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! BIT_OR          [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! IN              [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! NOT             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! GTE             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 22 (boolean -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 22 (boolean -> expression NEQ expression .) ]


state 87

    (23) boolean -> expression GT expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 23 (boolean -> expression GT expression .)
    SETOUT          reduce using rule 23 (boolean -> expression GT expression .)
    GETIN           reduce using rule 23 (boolean -> expression GT expression .)
    FOR             reduce using rule 23 (boolean -> expression GT expression .)
    WHILE           reduce using rule 23 (boolean -> expression GT expression .)
    PROCCES         reduce using rule 23 (boolean -> expression GT expression .)
    IDENTIFIER      reduce using rule 23 (boolean -> expression GT expression .)
    BIT_NEG         reduce using rule 23 (boolean -> expression GT expression .)
    LPAREN          reduce using rule 23 (boolean -> expression GT expression .)
    LSQBRACK        reduce using rule 23 (boolean -> expression GT expression .)
    IF              reduce using rule 23 (boolean -> expression GT expression .)
    NUM_INT         reduce using rule 23 (boolean -> expression GT expression .)
    NUM_FLOAT       reduce using rule 23 (boolean -> expression GT expression .)
    TRUE            reduce using rule 23 (boolean -> expression GT expression .)
    FALSE           reduce using rule 23 (boolean -> expression GT expression .)
    RSQBRACK        reduce using rule 23 (boolean -> expression GT expression .)
    COMMA           reduce using rule 23 (boolean -> expression GT expression .)
    LOOP            reduce using rule 23 (boolean -> expression GT expression .)
    END             reduce using rule 23 (boolean -> expression GT expression .)
    ELSE            reduce using rule 23 (boolean -> expression GT expression .)
    DO              reduce using rule 23 (boolean -> expression GT expression .)
    RPAREN          reduce using rule 23 (boolean -> expression GT expression .)
    THEN            reduce using rule 23 (boolean -> expression GT expression .)
    COLON           reduce using rule 23 (boolean -> expression GT expression .)
    ARROW_LTR       reduce using rule 23 (boolean -> expression GT expression .)
    ARROW_RTL       reduce using rule 23 (boolean -> expression GT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! MUL             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! DIV             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! EXP             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! MOD             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! BIT_AND         [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! BIT_OR          [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! IN              [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! NOT             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! EQ              [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! GT              [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! GTE             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! LT              [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! LTE             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! AND             [ reduce using rule 23 (boolean -> expression GT expression .) ]
  ! OR              [ reduce using rule 23 (boolean -> expression GT expression .) ]


state 88

    (24) boolean -> expression GTE expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 24 (boolean -> expression GTE expression .)
    SETOUT          reduce using rule 24 (boolean -> expression GTE expression .)
    GETIN           reduce using rule 24 (boolean -> expression GTE expression .)
    FOR             reduce using rule 24 (boolean -> expression GTE expression .)
    WHILE           reduce using rule 24 (boolean -> expression GTE expression .)
    PROCCES         reduce using rule 24 (boolean -> expression GTE expression .)
    IDENTIFIER      reduce using rule 24 (boolean -> expression GTE expression .)
    BIT_NEG         reduce using rule 24 (boolean -> expression GTE expression .)
    LPAREN          reduce using rule 24 (boolean -> expression GTE expression .)
    LSQBRACK        reduce using rule 24 (boolean -> expression GTE expression .)
    IF              reduce using rule 24 (boolean -> expression GTE expression .)
    NUM_INT         reduce using rule 24 (boolean -> expression GTE expression .)
    NUM_FLOAT       reduce using rule 24 (boolean -> expression GTE expression .)
    TRUE            reduce using rule 24 (boolean -> expression GTE expression .)
    FALSE           reduce using rule 24 (boolean -> expression GTE expression .)
    RSQBRACK        reduce using rule 24 (boolean -> expression GTE expression .)
    COMMA           reduce using rule 24 (boolean -> expression GTE expression .)
    LOOP            reduce using rule 24 (boolean -> expression GTE expression .)
    END             reduce using rule 24 (boolean -> expression GTE expression .)
    ELSE            reduce using rule 24 (boolean -> expression GTE expression .)
    DO              reduce using rule 24 (boolean -> expression GTE expression .)
    RPAREN          reduce using rule 24 (boolean -> expression GTE expression .)
    THEN            reduce using rule 24 (boolean -> expression GTE expression .)
    COLON           reduce using rule 24 (boolean -> expression GTE expression .)
    ARROW_LTR       reduce using rule 24 (boolean -> expression GTE expression .)
    ARROW_RTL       reduce using rule 24 (boolean -> expression GTE expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! MUL             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! DIV             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! EXP             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! BIT_AND         [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! BIT_OR          [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! IN              [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! NOT             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! EQ              [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! NEQ             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! GT              [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! GTE             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! LT              [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! LTE             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! AND             [ reduce using rule 24 (boolean -> expression GTE expression .) ]
  ! OR              [ reduce using rule 24 (boolean -> expression GTE expression .) ]


state 89

    (25) boolean -> expression LT expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 25 (boolean -> expression LT expression .)
    SETOUT          reduce using rule 25 (boolean -> expression LT expression .)
    GETIN           reduce using rule 25 (boolean -> expression LT expression .)
    FOR             reduce using rule 25 (boolean -> expression LT expression .)
    WHILE           reduce using rule 25 (boolean -> expression LT expression .)
    PROCCES         reduce using rule 25 (boolean -> expression LT expression .)
    IDENTIFIER      reduce using rule 25 (boolean -> expression LT expression .)
    BIT_NEG         reduce using rule 25 (boolean -> expression LT expression .)
    LPAREN          reduce using rule 25 (boolean -> expression LT expression .)
    LSQBRACK        reduce using rule 25 (boolean -> expression LT expression .)
    IF              reduce using rule 25 (boolean -> expression LT expression .)
    NUM_INT         reduce using rule 25 (boolean -> expression LT expression .)
    NUM_FLOAT       reduce using rule 25 (boolean -> expression LT expression .)
    TRUE            reduce using rule 25 (boolean -> expression LT expression .)
    FALSE           reduce using rule 25 (boolean -> expression LT expression .)
    RSQBRACK        reduce using rule 25 (boolean -> expression LT expression .)
    COMMA           reduce using rule 25 (boolean -> expression LT expression .)
    LOOP            reduce using rule 25 (boolean -> expression LT expression .)
    END             reduce using rule 25 (boolean -> expression LT expression .)
    ELSE            reduce using rule 25 (boolean -> expression LT expression .)
    DO              reduce using rule 25 (boolean -> expression LT expression .)
    RPAREN          reduce using rule 25 (boolean -> expression LT expression .)
    THEN            reduce using rule 25 (boolean -> expression LT expression .)
    COLON           reduce using rule 25 (boolean -> expression LT expression .)
    ARROW_LTR       reduce using rule 25 (boolean -> expression LT expression .)
    ARROW_RTL       reduce using rule 25 (boolean -> expression LT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! MUL             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! DIV             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! EXP             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! MOD             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! BIT_AND         [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! BIT_OR          [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! IN              [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! NOT             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! EQ              [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! GT              [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! GTE             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! LT              [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! LTE             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! AND             [ reduce using rule 25 (boolean -> expression LT expression .) ]
  ! OR              [ reduce using rule 25 (boolean -> expression LT expression .) ]


state 90

    (26) boolean -> expression LTE expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 26 (boolean -> expression LTE expression .)
    SETOUT          reduce using rule 26 (boolean -> expression LTE expression .)
    GETIN           reduce using rule 26 (boolean -> expression LTE expression .)
    FOR             reduce using rule 26 (boolean -> expression LTE expression .)
    WHILE           reduce using rule 26 (boolean -> expression LTE expression .)
    PROCCES         reduce using rule 26 (boolean -> expression LTE expression .)
    IDENTIFIER      reduce using rule 26 (boolean -> expression LTE expression .)
    BIT_NEG         reduce using rule 26 (boolean -> expression LTE expression .)
    LPAREN          reduce using rule 26 (boolean -> expression LTE expression .)
    LSQBRACK        reduce using rule 26 (boolean -> expression LTE expression .)
    IF              reduce using rule 26 (boolean -> expression LTE expression .)
    NUM_INT         reduce using rule 26 (boolean -> expression LTE expression .)
    NUM_FLOAT       reduce using rule 26 (boolean -> expression LTE expression .)
    TRUE            reduce using rule 26 (boolean -> expression LTE expression .)
    FALSE           reduce using rule 26 (boolean -> expression LTE expression .)
    RSQBRACK        reduce using rule 26 (boolean -> expression LTE expression .)
    COMMA           reduce using rule 26 (boolean -> expression LTE expression .)
    LOOP            reduce using rule 26 (boolean -> expression LTE expression .)
    END             reduce using rule 26 (boolean -> expression LTE expression .)
    ELSE            reduce using rule 26 (boolean -> expression LTE expression .)
    DO              reduce using rule 26 (boolean -> expression LTE expression .)
    RPAREN          reduce using rule 26 (boolean -> expression LTE expression .)
    THEN            reduce using rule 26 (boolean -> expression LTE expression .)
    COLON           reduce using rule 26 (boolean -> expression LTE expression .)
    ARROW_LTR       reduce using rule 26 (boolean -> expression LTE expression .)
    ARROW_RTL       reduce using rule 26 (boolean -> expression LTE expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! MUL             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! DIV             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! EXP             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! BIT_AND         [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! BIT_OR          [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! IN              [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! NOT             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! EQ              [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! GT              [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! GTE             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! LT              [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! AND             [ reduce using rule 26 (boolean -> expression LTE expression .) ]
  ! OR              [ reduce using rule 26 (boolean -> expression LTE expression .) ]


state 91

    (27) boolean -> expression AND expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 27 (boolean -> expression AND expression .)
    SETOUT          reduce using rule 27 (boolean -> expression AND expression .)
    GETIN           reduce using rule 27 (boolean -> expression AND expression .)
    FOR             reduce using rule 27 (boolean -> expression AND expression .)
    WHILE           reduce using rule 27 (boolean -> expression AND expression .)
    PROCCES         reduce using rule 27 (boolean -> expression AND expression .)
    IDENTIFIER      reduce using rule 27 (boolean -> expression AND expression .)
    BIT_NEG         reduce using rule 27 (boolean -> expression AND expression .)
    LPAREN          reduce using rule 27 (boolean -> expression AND expression .)
    LSQBRACK        reduce using rule 27 (boolean -> expression AND expression .)
    IF              reduce using rule 27 (boolean -> expression AND expression .)
    NUM_INT         reduce using rule 27 (boolean -> expression AND expression .)
    NUM_FLOAT       reduce using rule 27 (boolean -> expression AND expression .)
    TRUE            reduce using rule 27 (boolean -> expression AND expression .)
    FALSE           reduce using rule 27 (boolean -> expression AND expression .)
    RSQBRACK        reduce using rule 27 (boolean -> expression AND expression .)
    COMMA           reduce using rule 27 (boolean -> expression AND expression .)
    LOOP            reduce using rule 27 (boolean -> expression AND expression .)
    END             reduce using rule 27 (boolean -> expression AND expression .)
    ELSE            reduce using rule 27 (boolean -> expression AND expression .)
    DO              reduce using rule 27 (boolean -> expression AND expression .)
    RPAREN          reduce using rule 27 (boolean -> expression AND expression .)
    THEN            reduce using rule 27 (boolean -> expression AND expression .)
    COLON           reduce using rule 27 (boolean -> expression AND expression .)
    ARROW_LTR       reduce using rule 27 (boolean -> expression AND expression .)
    ARROW_RTL       reduce using rule 27 (boolean -> expression AND expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! MUL             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! DIV             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! EXP             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! MOD             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! BIT_AND         [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! BIT_OR          [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! IN              [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! NOT             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! EQ              [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! GT              [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! GTE             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! LT              [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! LTE             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! AND             [ reduce using rule 27 (boolean -> expression AND expression .) ]
  ! OR              [ reduce using rule 27 (boolean -> expression AND expression .) ]


state 92

    (28) boolean -> expression OR expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 28 (boolean -> expression OR expression .)
    SETOUT          reduce using rule 28 (boolean -> expression OR expression .)
    GETIN           reduce using rule 28 (boolean -> expression OR expression .)
    FOR             reduce using rule 28 (boolean -> expression OR expression .)
    WHILE           reduce using rule 28 (boolean -> expression OR expression .)
    PROCCES         reduce using rule 28 (boolean -> expression OR expression .)
    IDENTIFIER      reduce using rule 28 (boolean -> expression OR expression .)
    BIT_NEG         reduce using rule 28 (boolean -> expression OR expression .)
    LPAREN          reduce using rule 28 (boolean -> expression OR expression .)
    LSQBRACK        reduce using rule 28 (boolean -> expression OR expression .)
    IF              reduce using rule 28 (boolean -> expression OR expression .)
    NUM_INT         reduce using rule 28 (boolean -> expression OR expression .)
    NUM_FLOAT       reduce using rule 28 (boolean -> expression OR expression .)
    TRUE            reduce using rule 28 (boolean -> expression OR expression .)
    FALSE           reduce using rule 28 (boolean -> expression OR expression .)
    RSQBRACK        reduce using rule 28 (boolean -> expression OR expression .)
    COMMA           reduce using rule 28 (boolean -> expression OR expression .)
    LOOP            reduce using rule 28 (boolean -> expression OR expression .)
    END             reduce using rule 28 (boolean -> expression OR expression .)
    ELSE            reduce using rule 28 (boolean -> expression OR expression .)
    DO              reduce using rule 28 (boolean -> expression OR expression .)
    RPAREN          reduce using rule 28 (boolean -> expression OR expression .)
    THEN            reduce using rule 28 (boolean -> expression OR expression .)
    COLON           reduce using rule 28 (boolean -> expression OR expression .)
    ARROW_LTR       reduce using rule 28 (boolean -> expression OR expression .)
    ARROW_RTL       reduce using rule 28 (boolean -> expression OR expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! MUL             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! DIV             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! EXP             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! MOD             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! BIT_AND         [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! BIT_OR          [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! IN              [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! NOT             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! EQ              [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! GT              [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! GTE             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! LT              [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! LTE             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! AND             [ reduce using rule 28 (boolean -> expression OR expression .) ]
  ! OR              [ reduce using rule 28 (boolean -> expression OR expression .) ]


state 93

    (41) expression -> LSQBRACK arguments RSQBRACK .

    PLUS            reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    MINUS           reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    MUL             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    DIV             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    EXP             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    MOD             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_AND         reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_OR          reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    IN              reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    NOT             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    EQ              reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    NEQ             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    GT              reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    GTE             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    LT              reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    LTE             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    AND             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    OR              reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    MAIN            reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    SETOUT          reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    GETIN           reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    FOR             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    WHILE           reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    PROCCES         reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    IDENTIFIER      reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_NEG         reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    LPAREN          reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    LSQBRACK        reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    IF              reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_INT         reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_FLOAT       reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    TRUE            reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    FALSE           reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    RSQBRACK        reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    COMMA           reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    LOOP            reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    END             reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    ELSE            reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    DO              reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    RPAREN          reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    THEN            reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    COLON           reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    ARROW_LTR       reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)
    ARROW_RTL       reduce using rule 41 (expression -> LSQBRACK arguments RSQBRACK .)


state 94

    (38) arguments -> arguments COMMA . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 117
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 95

    (42) expression -> identifier LSQBRACK . expression RSQBRACK
    (43) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (44) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (45) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (46) expression -> identifier LSQBRACK . COLON RSQBRACK
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    COLON           shift and go to state 71
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 118
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 96

    (65) expression -> PROCCES identifier . ARROW_LTR START

    ARROW_LTR       shift and go to state 119


state 97

    (60) statement -> FOR identifier IN . expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> FOR identifier IN . expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> FOR identifier IN . expression DO statement_list LOOP
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 120
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 98

    (63) statement -> WHILE expression DO . statement_list LOOP
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 7
    statement_list                 shift and go to state 121
    statement                      shift and go to state 5
    identifier                     shift and go to state 6
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 99

    (64) statement -> PROCCES identifier COLON . statement_list END
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    statement_list                 shift and go to state 122
    statement                      shift and go to state 5
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 100

    (66) statement -> PROCCES identifier ARROW_LTR . START
    (65) expression -> PROCCES identifier ARROW_LTR . START

    START           shift and go to state 123


state 101

    (30) expression -> PLUS expression PLUS .
    (13) expression -> expression PLUS . expression PLUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 30 (expression -> PLUS expression PLUS .)
    DIV             reduce using rule 30 (expression -> PLUS expression PLUS .)
    EXP             reduce using rule 30 (expression -> PLUS expression PLUS .)
    MOD             reduce using rule 30 (expression -> PLUS expression PLUS .)
    BIT_AND         reduce using rule 30 (expression -> PLUS expression PLUS .)
    BIT_OR          reduce using rule 30 (expression -> PLUS expression PLUS .)
    IN              reduce using rule 30 (expression -> PLUS expression PLUS .)
    EQ              reduce using rule 30 (expression -> PLUS expression PLUS .)
    NEQ             reduce using rule 30 (expression -> PLUS expression PLUS .)
    GT              reduce using rule 30 (expression -> PLUS expression PLUS .)
    GTE             reduce using rule 30 (expression -> PLUS expression PLUS .)
    LT              reduce using rule 30 (expression -> PLUS expression PLUS .)
    LTE             reduce using rule 30 (expression -> PLUS expression PLUS .)
    AND             reduce using rule 30 (expression -> PLUS expression PLUS .)
    OR              reduce using rule 30 (expression -> PLUS expression PLUS .)
    MAIN            reduce using rule 30 (expression -> PLUS expression PLUS .)
    SETOUT          reduce using rule 30 (expression -> PLUS expression PLUS .)
    GETIN           reduce using rule 30 (expression -> PLUS expression PLUS .)
    FOR             reduce using rule 30 (expression -> PLUS expression PLUS .)
    WHILE           reduce using rule 30 (expression -> PLUS expression PLUS .)
    IF              reduce using rule 30 (expression -> PLUS expression PLUS .)
    RSQBRACK        reduce using rule 30 (expression -> PLUS expression PLUS .)
    COMMA           reduce using rule 30 (expression -> PLUS expression PLUS .)
    LOOP            reduce using rule 30 (expression -> PLUS expression PLUS .)
    END             reduce using rule 30 (expression -> PLUS expression PLUS .)
    ELSE            reduce using rule 30 (expression -> PLUS expression PLUS .)
    DO              reduce using rule 30 (expression -> PLUS expression PLUS .)
    RPAREN          reduce using rule 30 (expression -> PLUS expression PLUS .)
    THEN            reduce using rule 30 (expression -> PLUS expression PLUS .)
    COLON           reduce using rule 30 (expression -> PLUS expression PLUS .)
    ARROW_LTR       reduce using rule 30 (expression -> PLUS expression PLUS .)
    ARROW_RTL       reduce using rule 30 (expression -> PLUS expression PLUS .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! MINUS           [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! NOT             [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! PROCCES         [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! IDENTIFIER      [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! BIT_NEG         [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! LPAREN          [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! LSQBRACK        [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! NUM_INT         [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! NUM_FLOAT       [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! TRUE            [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]
  ! FALSE           [ reduce using rule 30 (expression -> PLUS expression PLUS .) ]

    expression                     shift and go to state 75
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 102

    (29) expression -> MINUS expression MINUS .
    (14) expression -> expression MINUS . expression MINUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 29 (expression -> MINUS expression MINUS .)
    DIV             reduce using rule 29 (expression -> MINUS expression MINUS .)
    EXP             reduce using rule 29 (expression -> MINUS expression MINUS .)
    MOD             reduce using rule 29 (expression -> MINUS expression MINUS .)
    BIT_AND         reduce using rule 29 (expression -> MINUS expression MINUS .)
    BIT_OR          reduce using rule 29 (expression -> MINUS expression MINUS .)
    IN              reduce using rule 29 (expression -> MINUS expression MINUS .)
    EQ              reduce using rule 29 (expression -> MINUS expression MINUS .)
    NEQ             reduce using rule 29 (expression -> MINUS expression MINUS .)
    GT              reduce using rule 29 (expression -> MINUS expression MINUS .)
    GTE             reduce using rule 29 (expression -> MINUS expression MINUS .)
    LT              reduce using rule 29 (expression -> MINUS expression MINUS .)
    LTE             reduce using rule 29 (expression -> MINUS expression MINUS .)
    AND             reduce using rule 29 (expression -> MINUS expression MINUS .)
    OR              reduce using rule 29 (expression -> MINUS expression MINUS .)
    MAIN            reduce using rule 29 (expression -> MINUS expression MINUS .)
    SETOUT          reduce using rule 29 (expression -> MINUS expression MINUS .)
    GETIN           reduce using rule 29 (expression -> MINUS expression MINUS .)
    FOR             reduce using rule 29 (expression -> MINUS expression MINUS .)
    WHILE           reduce using rule 29 (expression -> MINUS expression MINUS .)
    IF              reduce using rule 29 (expression -> MINUS expression MINUS .)
    RSQBRACK        reduce using rule 29 (expression -> MINUS expression MINUS .)
    COMMA           reduce using rule 29 (expression -> MINUS expression MINUS .)
    LOOP            reduce using rule 29 (expression -> MINUS expression MINUS .)
    END             reduce using rule 29 (expression -> MINUS expression MINUS .)
    ELSE            reduce using rule 29 (expression -> MINUS expression MINUS .)
    DO              reduce using rule 29 (expression -> MINUS expression MINUS .)
    RPAREN          reduce using rule 29 (expression -> MINUS expression MINUS .)
    THEN            reduce using rule 29 (expression -> MINUS expression MINUS .)
    COLON           reduce using rule 29 (expression -> MINUS expression MINUS .)
    ARROW_LTR       reduce using rule 29 (expression -> MINUS expression MINUS .)
    ARROW_RTL       reduce using rule 29 (expression -> MINUS expression MINUS .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! MINUS           [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! NOT             [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! PROCCES         [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! IDENTIFIER      [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! BIT_NEG         [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! LPAREN          [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! LSQBRACK        [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! NUM_INT         [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! NUM_FLOAT       [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! TRUE            [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]
  ! FALSE           [ reduce using rule 29 (expression -> MINUS expression MINUS .) ]

    expression                     shift and go to state 76
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 103

    (33) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    BIT_AND         reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    BIT_OR          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    MAIN            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    SETOUT          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    GETIN           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    PROCCES         reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    BIT_NEG         reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LSQBRACK        reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NUM_INT         reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NUM_FLOAT       reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    RSQBRACK        reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    ARROW_LTR       reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    ARROW_RTL       reduce using rule 33 (expression -> LPAREN expression RPAREN .)


state 104

    (49) if_statement -> IF expression THEN . statement_list END
    (50) if_statement -> IF expression THEN . statement_list ELSE statement_list END
    (51) if_statement -> IF expression THEN . statement_list ELSE if_statement
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 7
    statement_list                 shift and go to state 124
    if_statement                   shift and go to state 8
    statement                      shift and go to state 5
    identifier                     shift and go to state 6
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 105

    (8) main_declaration -> MAIN identifier COLON . statement_list END
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    statement_list                 shift and go to state 125
    statement                      shift and go to state 5
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 106

    (47) statement -> identifier LSQBRACK expression RSQBRACK . EQUALS expression
    (42) expression -> identifier LSQBRACK expression RSQBRACK .

    EQUALS          shift and go to state 126
    PLUS            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MAIN            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SETOUT          reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GETIN           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PROCCES         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LOOP            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    END             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 107

    (43) expression -> identifier LSQBRACK expression COLON . expression RSQBRACK
    (45) expression -> identifier LSQBRACK expression COLON . RSQBRACK
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    RSQBRACK        shift and go to state 128
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 127
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 108

    (44) expression -> identifier LSQBRACK COLON expression . RSQBRACK
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 129
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 109

    (46) expression -> identifier LSQBRACK COLON RSQBRACK .

    PLUS            reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MINUS           reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MUL             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    DIV             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EXP             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MOD             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_AND         reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_OR          reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IN              reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NOT             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EQ              reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NEQ             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GT              reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GTE             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LT              reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LTE             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    AND             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    OR              reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MAIN            reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    SETOUT          reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GETIN           reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FOR             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    WHILE           reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    PROCCES         reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_NEG         reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LPAREN          reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IF              reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_INT         reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    TRUE            reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FALSE           reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COMMA           reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LOOP            reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    END             reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    ELSE            reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    DO              reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RPAREN          reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    THEN            reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COLON           reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    ARROW_LTR       reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    ARROW_RTL       reduce using rule 46 (expression -> identifier LSQBRACK COLON RSQBRACK .)


state 110

    (13) expression -> expression PLUS expression PLUS .
    (13) expression -> expression PLUS . expression PLUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    DIV             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    EXP             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    MOD             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    BIT_AND         reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    BIT_OR          reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    IN              reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    EQ              reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    NEQ             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    GT              reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    GTE             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    LT              reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    LTE             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    AND             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    OR              reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    MAIN            reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    SETOUT          reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    GETIN           reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    FOR             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    WHILE           reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    IF              reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    RSQBRACK        reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    COMMA           reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    LOOP            reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    END             reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    ELSE            reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    DO              reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    THEN            reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    COLON           reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    ARROW_LTR       reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    ARROW_RTL       reduce using rule 13 (expression -> expression PLUS expression PLUS .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! MINUS           [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! NOT             [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! PROCCES         [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! IDENTIFIER      [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! BIT_NEG         [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! LPAREN          [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! LSQBRACK        [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! NUM_INT         [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! NUM_FLOAT       [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! TRUE            [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]
  ! FALSE           [ reduce using rule 13 (expression -> expression PLUS expression PLUS .) ]

    expression                     shift and go to state 75
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 111

    (14) expression -> expression MINUS expression MINUS .
    (14) expression -> expression MINUS . expression MINUS
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    DIV             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    EXP             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    MOD             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    BIT_AND         reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    BIT_OR          reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    IN              reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    EQ              reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    NEQ             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    GT              reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    GTE             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    LT              reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    LTE             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    AND             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    OR              reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    MAIN            reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    SETOUT          reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    GETIN           reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    FOR             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    WHILE           reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    IF              reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    RSQBRACK        reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    COMMA           reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    LOOP            reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    END             reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    ELSE            reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    DO              reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    RPAREN          reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    THEN            reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    COLON           reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    ARROW_LTR       reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    ARROW_RTL       reduce using rule 14 (expression -> expression MINUS expression MINUS .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! MINUS           [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! NOT             [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! PROCCES         [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! IDENTIFIER      [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! BIT_NEG         [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! LPAREN          [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! LSQBRACK        [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! NUM_INT         [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! NUM_FLOAT       [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! TRUE            [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]
  ! FALSE           [ reduce using rule 14 (expression -> expression MINUS expression MINUS .) ]

    expression                     shift and go to state 76
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 112

    (15) expression -> expression MUL expression MUL .
    (15) expression -> expression MUL . expression MUL
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 15 (expression -> expression MUL expression MUL .)
    DIV             reduce using rule 15 (expression -> expression MUL expression MUL .)
    EXP             reduce using rule 15 (expression -> expression MUL expression MUL .)
    MOD             reduce using rule 15 (expression -> expression MUL expression MUL .)
    BIT_AND         reduce using rule 15 (expression -> expression MUL expression MUL .)
    BIT_OR          reduce using rule 15 (expression -> expression MUL expression MUL .)
    IN              reduce using rule 15 (expression -> expression MUL expression MUL .)
    EQ              reduce using rule 15 (expression -> expression MUL expression MUL .)
    NEQ             reduce using rule 15 (expression -> expression MUL expression MUL .)
    GT              reduce using rule 15 (expression -> expression MUL expression MUL .)
    GTE             reduce using rule 15 (expression -> expression MUL expression MUL .)
    LT              reduce using rule 15 (expression -> expression MUL expression MUL .)
    LTE             reduce using rule 15 (expression -> expression MUL expression MUL .)
    AND             reduce using rule 15 (expression -> expression MUL expression MUL .)
    OR              reduce using rule 15 (expression -> expression MUL expression MUL .)
    MAIN            reduce using rule 15 (expression -> expression MUL expression MUL .)
    SETOUT          reduce using rule 15 (expression -> expression MUL expression MUL .)
    GETIN           reduce using rule 15 (expression -> expression MUL expression MUL .)
    FOR             reduce using rule 15 (expression -> expression MUL expression MUL .)
    WHILE           reduce using rule 15 (expression -> expression MUL expression MUL .)
    IF              reduce using rule 15 (expression -> expression MUL expression MUL .)
    RSQBRACK        reduce using rule 15 (expression -> expression MUL expression MUL .)
    COMMA           reduce using rule 15 (expression -> expression MUL expression MUL .)
    LOOP            reduce using rule 15 (expression -> expression MUL expression MUL .)
    END             reduce using rule 15 (expression -> expression MUL expression MUL .)
    ELSE            reduce using rule 15 (expression -> expression MUL expression MUL .)
    DO              reduce using rule 15 (expression -> expression MUL expression MUL .)
    RPAREN          reduce using rule 15 (expression -> expression MUL expression MUL .)
    THEN            reduce using rule 15 (expression -> expression MUL expression MUL .)
    COLON           reduce using rule 15 (expression -> expression MUL expression MUL .)
    ARROW_LTR       reduce using rule 15 (expression -> expression MUL expression MUL .)
    ARROW_RTL       reduce using rule 15 (expression -> expression MUL expression MUL .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! MINUS           [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! NOT             [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! PROCCES         [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! IDENTIFIER      [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! BIT_NEG         [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! LPAREN          [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! LSQBRACK        [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! NUM_INT         [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! NUM_FLOAT       [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! TRUE            [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]
  ! FALSE           [ reduce using rule 15 (expression -> expression MUL expression MUL .) ]

    expression                     shift and go to state 77
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 113

    (16) expression -> expression DIV expression DIV .
    (16) expression -> expression DIV . expression DIV
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 16 (expression -> expression DIV expression DIV .)
    DIV             reduce using rule 16 (expression -> expression DIV expression DIV .)
    EXP             reduce using rule 16 (expression -> expression DIV expression DIV .)
    MOD             reduce using rule 16 (expression -> expression DIV expression DIV .)
    BIT_AND         reduce using rule 16 (expression -> expression DIV expression DIV .)
    BIT_OR          reduce using rule 16 (expression -> expression DIV expression DIV .)
    IN              reduce using rule 16 (expression -> expression DIV expression DIV .)
    EQ              reduce using rule 16 (expression -> expression DIV expression DIV .)
    NEQ             reduce using rule 16 (expression -> expression DIV expression DIV .)
    GT              reduce using rule 16 (expression -> expression DIV expression DIV .)
    GTE             reduce using rule 16 (expression -> expression DIV expression DIV .)
    LT              reduce using rule 16 (expression -> expression DIV expression DIV .)
    LTE             reduce using rule 16 (expression -> expression DIV expression DIV .)
    AND             reduce using rule 16 (expression -> expression DIV expression DIV .)
    OR              reduce using rule 16 (expression -> expression DIV expression DIV .)
    MAIN            reduce using rule 16 (expression -> expression DIV expression DIV .)
    SETOUT          reduce using rule 16 (expression -> expression DIV expression DIV .)
    GETIN           reduce using rule 16 (expression -> expression DIV expression DIV .)
    FOR             reduce using rule 16 (expression -> expression DIV expression DIV .)
    WHILE           reduce using rule 16 (expression -> expression DIV expression DIV .)
    IF              reduce using rule 16 (expression -> expression DIV expression DIV .)
    RSQBRACK        reduce using rule 16 (expression -> expression DIV expression DIV .)
    COMMA           reduce using rule 16 (expression -> expression DIV expression DIV .)
    LOOP            reduce using rule 16 (expression -> expression DIV expression DIV .)
    END             reduce using rule 16 (expression -> expression DIV expression DIV .)
    ELSE            reduce using rule 16 (expression -> expression DIV expression DIV .)
    DO              reduce using rule 16 (expression -> expression DIV expression DIV .)
    RPAREN          reduce using rule 16 (expression -> expression DIV expression DIV .)
    THEN            reduce using rule 16 (expression -> expression DIV expression DIV .)
    COLON           reduce using rule 16 (expression -> expression DIV expression DIV .)
    ARROW_LTR       reduce using rule 16 (expression -> expression DIV expression DIV .)
    ARROW_RTL       reduce using rule 16 (expression -> expression DIV expression DIV .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! NOT             [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! PROCCES         [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! IDENTIFIER      [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! BIT_NEG         [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! LPAREN          [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! LSQBRACK        [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! NUM_INT         [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! NUM_FLOAT       [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! TRUE            [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]
  ! FALSE           [ reduce using rule 16 (expression -> expression DIV expression DIV .) ]

    expression                     shift and go to state 78
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 114

    (17) expression -> expression EXP expression EXP .
    (17) expression -> expression EXP . expression EXP
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 17 (expression -> expression EXP expression EXP .)
    DIV             reduce using rule 17 (expression -> expression EXP expression EXP .)
    EXP             reduce using rule 17 (expression -> expression EXP expression EXP .)
    MOD             reduce using rule 17 (expression -> expression EXP expression EXP .)
    BIT_AND         reduce using rule 17 (expression -> expression EXP expression EXP .)
    BIT_OR          reduce using rule 17 (expression -> expression EXP expression EXP .)
    IN              reduce using rule 17 (expression -> expression EXP expression EXP .)
    EQ              reduce using rule 17 (expression -> expression EXP expression EXP .)
    NEQ             reduce using rule 17 (expression -> expression EXP expression EXP .)
    GT              reduce using rule 17 (expression -> expression EXP expression EXP .)
    GTE             reduce using rule 17 (expression -> expression EXP expression EXP .)
    LT              reduce using rule 17 (expression -> expression EXP expression EXP .)
    LTE             reduce using rule 17 (expression -> expression EXP expression EXP .)
    AND             reduce using rule 17 (expression -> expression EXP expression EXP .)
    OR              reduce using rule 17 (expression -> expression EXP expression EXP .)
    MAIN            reduce using rule 17 (expression -> expression EXP expression EXP .)
    SETOUT          reduce using rule 17 (expression -> expression EXP expression EXP .)
    GETIN           reduce using rule 17 (expression -> expression EXP expression EXP .)
    FOR             reduce using rule 17 (expression -> expression EXP expression EXP .)
    WHILE           reduce using rule 17 (expression -> expression EXP expression EXP .)
    IF              reduce using rule 17 (expression -> expression EXP expression EXP .)
    RSQBRACK        reduce using rule 17 (expression -> expression EXP expression EXP .)
    COMMA           reduce using rule 17 (expression -> expression EXP expression EXP .)
    LOOP            reduce using rule 17 (expression -> expression EXP expression EXP .)
    END             reduce using rule 17 (expression -> expression EXP expression EXP .)
    ELSE            reduce using rule 17 (expression -> expression EXP expression EXP .)
    DO              reduce using rule 17 (expression -> expression EXP expression EXP .)
    RPAREN          reduce using rule 17 (expression -> expression EXP expression EXP .)
    THEN            reduce using rule 17 (expression -> expression EXP expression EXP .)
    COLON           reduce using rule 17 (expression -> expression EXP expression EXP .)
    ARROW_LTR       reduce using rule 17 (expression -> expression EXP expression EXP .)
    ARROW_RTL       reduce using rule 17 (expression -> expression EXP expression EXP .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! NOT             [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! PROCCES         [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! IDENTIFIER      [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! BIT_NEG         [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! LPAREN          [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! LSQBRACK        [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! NUM_INT         [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! NUM_FLOAT       [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! TRUE            [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]
  ! FALSE           [ reduce using rule 17 (expression -> expression EXP expression EXP .) ]

    expression                     shift and go to state 79
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 115

    (18) expression -> expression MOD expression MOD .
    (18) expression -> expression MOD . expression MOD
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BIT_NEG resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for NUM_FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    MUL             reduce using rule 18 (expression -> expression MOD expression MOD .)
    DIV             reduce using rule 18 (expression -> expression MOD expression MOD .)
    EXP             reduce using rule 18 (expression -> expression MOD expression MOD .)
    MOD             reduce using rule 18 (expression -> expression MOD expression MOD .)
    BIT_AND         reduce using rule 18 (expression -> expression MOD expression MOD .)
    BIT_OR          reduce using rule 18 (expression -> expression MOD expression MOD .)
    IN              reduce using rule 18 (expression -> expression MOD expression MOD .)
    EQ              reduce using rule 18 (expression -> expression MOD expression MOD .)
    NEQ             reduce using rule 18 (expression -> expression MOD expression MOD .)
    GT              reduce using rule 18 (expression -> expression MOD expression MOD .)
    GTE             reduce using rule 18 (expression -> expression MOD expression MOD .)
    LT              reduce using rule 18 (expression -> expression MOD expression MOD .)
    LTE             reduce using rule 18 (expression -> expression MOD expression MOD .)
    AND             reduce using rule 18 (expression -> expression MOD expression MOD .)
    OR              reduce using rule 18 (expression -> expression MOD expression MOD .)
    MAIN            reduce using rule 18 (expression -> expression MOD expression MOD .)
    SETOUT          reduce using rule 18 (expression -> expression MOD expression MOD .)
    GETIN           reduce using rule 18 (expression -> expression MOD expression MOD .)
    FOR             reduce using rule 18 (expression -> expression MOD expression MOD .)
    WHILE           reduce using rule 18 (expression -> expression MOD expression MOD .)
    IF              reduce using rule 18 (expression -> expression MOD expression MOD .)
    RSQBRACK        reduce using rule 18 (expression -> expression MOD expression MOD .)
    COMMA           reduce using rule 18 (expression -> expression MOD expression MOD .)
    LOOP            reduce using rule 18 (expression -> expression MOD expression MOD .)
    END             reduce using rule 18 (expression -> expression MOD expression MOD .)
    ELSE            reduce using rule 18 (expression -> expression MOD expression MOD .)
    DO              reduce using rule 18 (expression -> expression MOD expression MOD .)
    RPAREN          reduce using rule 18 (expression -> expression MOD expression MOD .)
    THEN            reduce using rule 18 (expression -> expression MOD expression MOD .)
    COLON           reduce using rule 18 (expression -> expression MOD expression MOD .)
    ARROW_LTR       reduce using rule 18 (expression -> expression MOD expression MOD .)
    ARROW_RTL       reduce using rule 18 (expression -> expression MOD expression MOD .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! PLUS            [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! NOT             [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! PROCCES         [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! IDENTIFIER      [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! BIT_NEG         [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! LPAREN          [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! LSQBRACK        [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! NUM_INT         [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! NUM_FLOAT       [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! TRUE            [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]
  ! FALSE           [ reduce using rule 18 (expression -> expression MOD expression MOD .) ]

    expression                     shift and go to state 80
    identifier                     shift and go to state 56
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 116

    (53) expression -> expression NOT IN expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAIN            reduce using rule 53 (expression -> expression NOT IN expression .)
    SETOUT          reduce using rule 53 (expression -> expression NOT IN expression .)
    GETIN           reduce using rule 53 (expression -> expression NOT IN expression .)
    FOR             reduce using rule 53 (expression -> expression NOT IN expression .)
    WHILE           reduce using rule 53 (expression -> expression NOT IN expression .)
    PROCCES         reduce using rule 53 (expression -> expression NOT IN expression .)
    IDENTIFIER      reduce using rule 53 (expression -> expression NOT IN expression .)
    BIT_NEG         reduce using rule 53 (expression -> expression NOT IN expression .)
    LPAREN          reduce using rule 53 (expression -> expression NOT IN expression .)
    LSQBRACK        reduce using rule 53 (expression -> expression NOT IN expression .)
    IF              reduce using rule 53 (expression -> expression NOT IN expression .)
    NUM_INT         reduce using rule 53 (expression -> expression NOT IN expression .)
    NUM_FLOAT       reduce using rule 53 (expression -> expression NOT IN expression .)
    TRUE            reduce using rule 53 (expression -> expression NOT IN expression .)
    FALSE           reduce using rule 53 (expression -> expression NOT IN expression .)
    RSQBRACK        reduce using rule 53 (expression -> expression NOT IN expression .)
    COMMA           reduce using rule 53 (expression -> expression NOT IN expression .)
    LOOP            reduce using rule 53 (expression -> expression NOT IN expression .)
    END             reduce using rule 53 (expression -> expression NOT IN expression .)
    ELSE            reduce using rule 53 (expression -> expression NOT IN expression .)
    DO              reduce using rule 53 (expression -> expression NOT IN expression .)
    RPAREN          reduce using rule 53 (expression -> expression NOT IN expression .)
    THEN            reduce using rule 53 (expression -> expression NOT IN expression .)
    COLON           reduce using rule 53 (expression -> expression NOT IN expression .)
    ARROW_LTR       reduce using rule 53 (expression -> expression NOT IN expression .)
    ARROW_RTL       reduce using rule 53 (expression -> expression NOT IN expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! PLUS            [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! MUL             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! DIV             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! EXP             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! BIT_AND         [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! BIT_OR          [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! IN              [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! NOT             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! NEQ             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! GT              [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! GTE             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! LT              [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! LTE             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! AND             [ reduce using rule 53 (expression -> expression NOT IN expression .) ]
  ! OR              [ reduce using rule 53 (expression -> expression NOT IN expression .) ]


state 117

    (38) arguments -> arguments COMMA expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RSQBRACK        reduce using rule 38 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 38 (arguments -> arguments COMMA expression .)
    MAIN            reduce using rule 38 (arguments -> arguments COMMA expression .)
    SETOUT          reduce using rule 38 (arguments -> arguments COMMA expression .)
    GETIN           reduce using rule 38 (arguments -> arguments COMMA expression .)
    FOR             reduce using rule 38 (arguments -> arguments COMMA expression .)
    WHILE           reduce using rule 38 (arguments -> arguments COMMA expression .)
    PROCCES         reduce using rule 38 (arguments -> arguments COMMA expression .)
    IDENTIFIER      reduce using rule 38 (arguments -> arguments COMMA expression .)
    BIT_NEG         reduce using rule 38 (arguments -> arguments COMMA expression .)
    LPAREN          reduce using rule 38 (arguments -> arguments COMMA expression .)
    LSQBRACK        reduce using rule 38 (arguments -> arguments COMMA expression .)
    IF              reduce using rule 38 (arguments -> arguments COMMA expression .)
    NUM_INT         reduce using rule 38 (arguments -> arguments COMMA expression .)
    NUM_FLOAT       reduce using rule 38 (arguments -> arguments COMMA expression .)
    TRUE            reduce using rule 38 (arguments -> arguments COMMA expression .)
    FALSE           reduce using rule 38 (arguments -> arguments COMMA expression .)
    LOOP            reduce using rule 38 (arguments -> arguments COMMA expression .)
    END             reduce using rule 38 (arguments -> arguments COMMA expression .)
    ELSE            reduce using rule 38 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! MINUS           [ reduce using rule 38 (arguments -> arguments COMMA expression .) ]
  ! PLUS            [ reduce using rule 38 (arguments -> arguments COMMA expression .) ]
  ! NOT             [ reduce using rule 38 (arguments -> arguments COMMA expression .) ]


state 118

    (42) expression -> identifier LSQBRACK expression . RSQBRACK
    (43) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (45) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 130
    COLON           shift and go to state 107
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 119

    (65) expression -> PROCCES identifier ARROW_LTR . START

    START           shift and go to state 131


state 120

    (60) statement -> FOR identifier IN expression . ARROW_LTR expression DO statement_list LOOP
    (61) statement -> FOR identifier IN expression . ARROW_RTL expression DO statement_list LOOP
    (62) statement -> FOR identifier IN expression . DO statement_list LOOP
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    ARROW_LTR       shift and go to state 132
    ARROW_RTL       shift and go to state 134
    DO              shift and go to state 133
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 121

    (63) statement -> WHILE expression DO statement_list . LOOP
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    LOOP            shift and go to state 135
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 7
    statement                      shift and go to state 30
    identifier                     shift and go to state 6
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 122

    (64) statement -> PROCCES identifier COLON statement_list . END
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END             shift and go to state 136
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    statement                      shift and go to state 30
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 123

    (66) statement -> PROCCES identifier ARROW_LTR START .
    (65) expression -> PROCCES identifier ARROW_LTR START .

  ! reduce/reduce conflict for PLUS resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for MINUS resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for NOT resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for MAIN resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for SETOUT resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for GETIN resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for FOR resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for WHILE resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for PROCCES resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for LPAREN resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for IF resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for TRUE resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for FALSE resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for LOOP resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for END resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
  ! reduce/reduce conflict for ELSE resolved using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    PLUS            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MINUS           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MUL             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    DIV             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    EXP             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MOD             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    BIT_AND         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    BIT_OR          reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    IN              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NOT             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    EQ              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NEQ             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    GT              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    GTE             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LT              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LTE             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    AND             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    OR              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MAIN            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    SETOUT          reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    GETIN           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    FOR             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    WHILE           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    PROCCES         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    IDENTIFIER      reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    BIT_NEG         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LPAREN          reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LSQBRACK        reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    IF              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NUM_INT         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NUM_FLOAT       reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    TRUE            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    FALSE           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LOOP            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    END             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    ELSE            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)

  ! MAIN            [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! SETOUT          [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! GETIN           [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! FOR             [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! WHILE           [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! PROCCES         [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! IDENTIFIER      [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! MINUS           [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! PLUS            [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! BIT_NEG         [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! NOT             [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! LPAREN          [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! LSQBRACK        [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! IF              [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! NUM_INT         [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! NUM_FLOAT       [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! TRUE            [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! FALSE           [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! LOOP            [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! END             [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]
  ! ELSE            [ reduce using rule 66 (statement -> PROCCES identifier ARROW_LTR START .) ]


state 124

    (49) if_statement -> IF expression THEN statement_list . END
    (50) if_statement -> IF expression THEN statement_list . ELSE statement_list END
    (51) if_statement -> IF expression THEN statement_list . ELSE if_statement
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END             shift and go to state 137
    ELSE            shift and go to state 138
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    statement                      shift and go to state 30
    identifier                     shift and go to state 6
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 125

    (8) main_declaration -> MAIN identifier COLON statement_list . END
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END             shift and go to state 139
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    statement                      shift and go to state 30
    expression                     shift and go to state 7
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 126

    (47) statement -> identifier LSQBRACK expression RSQBRACK EQUALS . expression
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 140
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 127

    (43) expression -> identifier LSQBRACK expression COLON expression . RSQBRACK
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 141
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 128

    (45) expression -> identifier LSQBRACK expression COLON RSQBRACK .

    PLUS            reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MINUS           reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MUL             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    DIV             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EXP             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MOD             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_AND         reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_OR          reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IN              reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NOT             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EQ              reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NEQ             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GT              reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GTE             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LT              reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LTE             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    AND             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    OR              reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MAIN            reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    SETOUT          reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GETIN           reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FOR             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    WHILE           reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    PROCCES         reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_NEG         reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IF              reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_INT         reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    TRUE            reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FALSE           reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COMMA           reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LOOP            reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    END             reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    ELSE            reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    DO              reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    THEN            reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COLON           reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    ARROW_LTR       reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    ARROW_RTL       reduce using rule 45 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)


state 129

    (44) expression -> identifier LSQBRACK COLON expression RSQBRACK .

    PLUS            reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MINUS           reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MUL             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    DIV             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EXP             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MOD             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IN              reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NOT             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EQ              reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NEQ             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GT              reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GTE             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LT              reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LTE             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    AND             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    OR              reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MAIN            reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    SETOUT          reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GETIN           reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FOR             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    WHILE           reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    PROCCES         reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LPAREN          reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IF              reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    TRUE            reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FALSE           reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COMMA           reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LOOP            reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    END             reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    ELSE            reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    DO              reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RPAREN          reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    THEN            reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COLON           reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    ARROW_LTR       reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    ARROW_RTL       reduce using rule 44 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)


state 130

    (42) expression -> identifier LSQBRACK expression RSQBRACK .

    PLUS            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSQBRACK        reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MAIN            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SETOUT          reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GETIN           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PROCCES         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LOOP            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    END             reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DO              reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RPAREN          reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    THEN            reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COLON           reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ARROW_LTR       reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ARROW_RTL       reduce using rule 42 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 131

    (65) expression -> PROCCES identifier ARROW_LTR START .

    PLUS            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MINUS           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MUL             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    DIV             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    EXP             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MOD             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    BIT_AND         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    BIT_OR          reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    IN              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NOT             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    EQ              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NEQ             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    GT              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    GTE             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LT              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LTE             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    AND             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    OR              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    RSQBRACK        reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    COMMA           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    MAIN            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    SETOUT          reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    GETIN           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    FOR             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    WHILE           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    PROCCES         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    IDENTIFIER      reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    BIT_NEG         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LPAREN          reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LSQBRACK        reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    IF              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NUM_INT         reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    NUM_FLOAT       reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    TRUE            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    FALSE           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    LOOP            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    END             reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    ELSE            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    DO              reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    RPAREN          reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    THEN            reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    COLON           reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    ARROW_LTR       reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)
    ARROW_RTL       reduce using rule 65 (expression -> PROCCES identifier ARROW_LTR START .)


state 132

    (60) statement -> FOR identifier IN expression ARROW_LTR . expression DO statement_list LOOP
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 142
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 133

    (62) statement -> FOR identifier IN expression DO . statement_list LOOP
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    statement_list                 shift and go to state 143
    statement                      shift and go to state 5
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 134

    (61) statement -> FOR identifier IN expression ARROW_RTL . expression DO statement_list LOOP
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    PROCCES         shift and go to state 57
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 56
    expression                     shift and go to state 144
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 135

    (63) statement -> WHILE expression DO statement_list LOOP .

    MAIN            reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    SETOUT          reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    GETIN           reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    FOR             reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    WHILE           reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    PROCCES         reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    IDENTIFIER      reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    MINUS           reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    PLUS            reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    BIT_NEG         reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    NOT             reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    LPAREN          reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    LSQBRACK        reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    IF              reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    NUM_INT         reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    NUM_FLOAT       reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    TRUE            reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    FALSE           reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    LOOP            reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    END             reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)
    ELSE            reduce using rule 63 (statement -> WHILE expression DO statement_list LOOP .)


state 136

    (64) statement -> PROCCES identifier COLON statement_list END .

    MAIN            reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    SETOUT          reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    GETIN           reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    FOR             reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    WHILE           reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    PROCCES         reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    IDENTIFIER      reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    MINUS           reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    PLUS            reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    BIT_NEG         reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    NOT             reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    LPAREN          reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    LSQBRACK        reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    IF              reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    NUM_INT         reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    NUM_FLOAT       reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    TRUE            reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    FALSE           reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    LOOP            reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    END             reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)
    ELSE            reduce using rule 64 (statement -> PROCCES identifier COLON statement_list END .)


state 137

    (49) if_statement -> IF expression THEN statement_list END .

    MAIN            reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    SETOUT          reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    GETIN           reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    FOR             reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    WHILE           reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    PROCCES         reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    IDENTIFIER      reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    MINUS           reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    PLUS            reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    BIT_NEG         reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    NOT             reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    LPAREN          reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    LSQBRACK        reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    IF              reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    NUM_INT         reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    NUM_FLOAT       reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    TRUE            reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    FALSE           reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    LOOP            reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    END             reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)
    ELSE            reduce using rule 49 (if_statement -> IF expression THEN statement_list END .)


state 138

    (50) if_statement -> IF expression THEN statement_list ELSE . statement_list END
    (51) if_statement -> IF expression THEN statement_list ELSE . if_statement
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    IF              shift and go to state 22
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 7
    statement_list                 shift and go to state 145
    if_statement                   shift and go to state 146
    statement                      shift and go to state 5
    identifier                     shift and go to state 6
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 139

    (8) main_declaration -> MAIN identifier COLON statement_list END .

    END             reduce using rule 8 (main_declaration -> MAIN identifier COLON statement_list END .)


state 140

    (47) statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    MAIN            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    SETOUT          reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    GETIN           reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    FOR             reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    WHILE           reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    PROCCES         reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    IDENTIFIER      reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    BIT_NEG         reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    LPAREN          reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    LSQBRACK        reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    IF              reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    NUM_INT         reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    NUM_FLOAT       reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    TRUE            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    FALSE           reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    LOOP            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    END             reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    ELSE            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53

  ! MINUS           [ reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .) ]
  ! PLUS            [ reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .) ]
  ! NOT             [ reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .) ]


state 141

    (43) expression -> identifier LSQBRACK expression COLON expression RSQBRACK .

    PLUS            reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MINUS           reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MUL             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    DIV             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EXP             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MOD             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IN              reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NOT             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EQ              reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NEQ             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GT              reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GTE             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LT              reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LTE             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    AND             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    OR              reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MAIN            reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    SETOUT          reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GETIN           reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FOR             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    WHILE           reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    PROCCES         reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LPAREN          reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IF              reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    TRUE            reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FALSE           reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COMMA           reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LOOP            reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    END             reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    ELSE            reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    DO              reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RPAREN          reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    THEN            reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COLON           reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    ARROW_LTR       reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    ARROW_RTL       reduce using rule 43 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)


state 142

    (60) statement -> FOR identifier IN expression ARROW_LTR expression . DO statement_list LOOP
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    DO              shift and go to state 147
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 143

    (62) statement -> FOR identifier IN expression DO statement_list . LOOP
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    LOOP            shift and go to state 148
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    statement                      shift and go to state 30
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 144

    (61) statement -> FOR identifier IN expression ARROW_RTL expression . DO statement_list LOOP
    (13) expression -> expression . PLUS expression PLUS
    (14) expression -> expression . MINUS expression MINUS
    (15) expression -> expression . MUL expression MUL
    (16) expression -> expression . DIV expression DIV
    (17) expression -> expression . EXP expression EXP
    (18) expression -> expression . MOD expression MOD
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (52) expression -> expression . IN expression
    (53) expression -> expression . NOT IN expression
    (21) boolean -> expression . EQ expression
    (22) boolean -> expression . NEQ expression
    (23) boolean -> expression . GT expression
    (24) boolean -> expression . GTE expression
    (25) boolean -> expression . LT expression
    (26) boolean -> expression . LTE expression
    (27) boolean -> expression . AND expression
    (28) boolean -> expression . OR expression

    DO              shift and go to state 149
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    DIV             shift and go to state 39
    EXP             shift and go to state 40
    MOD             shift and go to state 41
    BIT_AND         shift and go to state 42
    BIT_OR          shift and go to state 43
    IN              shift and go to state 44
    NOT             shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47
    GT              shift and go to state 48
    GTE             shift and go to state 49
    LT              shift and go to state 50
    LTE             shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53


state 145

    (50) if_statement -> IF expression THEN statement_list ELSE statement_list . END
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    END             shift and go to state 150
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 7
    statement                      shift and go to state 30
    identifier                     shift and go to state 6
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 146

    (51) if_statement -> IF expression THEN statement_list ELSE if_statement .
    (7) statement -> if_statement .

  ! reduce/reduce conflict for END resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for SETOUT resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for GETIN resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for PROCCES resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for NOT resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for IF resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 7 (statement -> if_statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 7 (statement -> if_statement .)
    MAIN            reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .)
    LOOP            reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .)
    ELSE            reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .)
    END             reduce using rule 7 (statement -> if_statement .)
    SETOUT          reduce using rule 7 (statement -> if_statement .)
    GETIN           reduce using rule 7 (statement -> if_statement .)
    FOR             reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    PROCCES         reduce using rule 7 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> if_statement .)
    MINUS           reduce using rule 7 (statement -> if_statement .)
    PLUS            reduce using rule 7 (statement -> if_statement .)
    BIT_NEG         reduce using rule 7 (statement -> if_statement .)
    NOT             reduce using rule 7 (statement -> if_statement .)
    LPAREN          reduce using rule 7 (statement -> if_statement .)
    LSQBRACK        reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    NUM_INT         reduce using rule 7 (statement -> if_statement .)
    NUM_FLOAT       reduce using rule 7 (statement -> if_statement .)
    TRUE            reduce using rule 7 (statement -> if_statement .)
    FALSE           reduce using rule 7 (statement -> if_statement .)

  ! SETOUT          [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! GETIN           [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! FOR             [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! WHILE           [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! PROCCES         [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! IDENTIFIER      [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! MINUS           [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! PLUS            [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! BIT_NEG         [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! NOT             [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! LPAREN          [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! LSQBRACK        [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! IF              [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! NUM_INT         [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! NUM_FLOAT       [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! TRUE            [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! FALSE           [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]
  ! END             [ reduce using rule 51 (if_statement -> IF expression THEN statement_list ELSE if_statement .) ]


state 147

    (60) statement -> FOR identifier IN expression ARROW_LTR expression DO . statement_list LOOP
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    statement_list                 shift and go to state 151
    statement                      shift and go to state 5
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 148

    (62) statement -> FOR identifier IN expression DO statement_list LOOP .

    MAIN            reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    SETOUT          reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    GETIN           reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    FOR             reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    WHILE           reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    PROCCES         reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    IDENTIFIER      reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    MINUS           reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    PLUS            reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    BIT_NEG         reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    NOT             reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    LPAREN          reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    LSQBRACK        reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    IF              reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    NUM_INT         reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    NUM_FLOAT       reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    TRUE            reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    FALSE           reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    LOOP            reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    END             reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)
    ELSE            reduce using rule 62 (statement -> FOR identifier IN expression DO statement_list LOOP .)


state 149

    (61) statement -> FOR identifier IN expression ARROW_RTL expression DO . statement_list LOOP
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    statement_list                 shift and go to state 152
    statement                      shift and go to state 5
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 150

    (50) if_statement -> IF expression THEN statement_list ELSE statement_list END .

    MAIN            reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    SETOUT          reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    GETIN           reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    FOR             reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    WHILE           reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    PROCCES         reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    IDENTIFIER      reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    MINUS           reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    PLUS            reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    BIT_NEG         reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    NOT             reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    LPAREN          reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    LSQBRACK        reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    IF              reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    NUM_INT         reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    NUM_FLOAT       reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    TRUE            reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    FALSE           reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    LOOP            reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    END             reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)
    ELSE            reduce using rule 50 (if_statement -> IF expression THEN statement_list ELSE statement_list END .)


state 151

    (60) statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list . LOOP
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    LOOP            shift and go to state 153
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    statement                      shift and go to state 30
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 152

    (61) statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list . LOOP
    (4) statement_list -> statement_list . statement
    (5) statement -> . identifier
    (6) statement -> . expression
    (7) statement -> . if_statement
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (54) statement -> . SETOUT arguments
    (55) statement -> . GETIN arguments
    (60) statement -> . FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP
    (61) statement -> . FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP
    (62) statement -> . FOR identifier IN expression DO statement_list LOOP
    (63) statement -> . WHILE expression DO statement_list LOOP
    (64) statement -> . PROCCES identifier COLON statement_list END
    (66) statement -> . PROCCES identifier ARROW_LTR START
    (9) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression PLUS
    (14) expression -> . expression MINUS expression MINUS
    (15) expression -> . expression MUL expression MUL
    (16) expression -> . expression DIV expression DIV
    (17) expression -> . expression EXP expression EXP
    (18) expression -> . expression MOD expression MOD
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (29) expression -> . MINUS expression MINUS
    (30) expression -> . PLUS expression PLUS
    (31) expression -> . BIT_NEG expression
    (32) expression -> . NOT expression
    (33) expression -> . LPAREN expression RPAREN
    (41) expression -> . LSQBRACK arguments RSQBRACK
    (42) expression -> . identifier LSQBRACK expression RSQBRACK
    (43) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (44) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (45) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (46) expression -> . identifier LSQBRACK COLON RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (52) expression -> . expression IN expression
    (53) expression -> . expression NOT IN expression
    (56) expression -> . identifier DOUBLE_PLUS
    (57) expression -> . identifier DOUBLE_MINUS
    (58) expression -> . primitive
    (59) expression -> . identifier
    (65) expression -> . PROCCES identifier ARROW_LTR START
    (49) if_statement -> . IF expression THEN statement_list END
    (50) if_statement -> . IF expression THEN statement_list ELSE statement_list END
    (51) if_statement -> . IF expression THEN statement_list ELSE if_statement
    (10) primitive -> . NUM_INT
    (11) primitive -> . NUM_FLOAT
    (12) primitive -> . boolean
    (21) boolean -> . expression EQ expression
    (22) boolean -> . expression NEQ expression
    (23) boolean -> . expression GT expression
    (24) boolean -> . expression GTE expression
    (25) boolean -> . expression LT expression
    (26) boolean -> . expression LTE expression
    (27) boolean -> . expression AND expression
    (28) boolean -> . expression OR expression
    (34) boolean -> . TRUE
    (35) boolean -> . FALSE

    LOOP            shift and go to state 154
    SETOUT          shift and go to state 10
    GETIN           shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCCES         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 20
    LSQBRACK        shift and go to state 9
    IF              shift and go to state 22
    NUM_INT         shift and go to state 23
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 6
    expression                     shift and go to state 7
    statement                      shift and go to state 30
    if_statement                   shift and go to state 8
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 153

    (60) statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .

    MAIN            reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    SETOUT          reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    GETIN           reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    FOR             reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    WHILE           reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    PROCCES         reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    IDENTIFIER      reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    MINUS           reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    PLUS            reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    BIT_NEG         reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    NOT             reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    LPAREN          reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    LSQBRACK        reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    IF              reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    NUM_INT         reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    NUM_FLOAT       reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    TRUE            reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    FALSE           reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    LOOP            reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    END             reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)
    ELSE            reduce using rule 60 (statement -> FOR identifier IN expression ARROW_LTR expression DO statement_list LOOP .)


state 154

    (61) statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .

    MAIN            reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    SETOUT          reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    GETIN           reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    FOR             reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    WHILE           reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    PROCCES         reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    IDENTIFIER      reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    MINUS           reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    PLUS            reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    BIT_NEG         reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    NOT             reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    LPAREN          reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    LSQBRACK        reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    IF              reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    NUM_INT         reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    NUM_FLOAT       reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    TRUE            reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    FALSE           reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    LOOP            reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    END             reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)
    ELSE            reduce using rule 61 (statement -> FOR identifier IN expression ARROW_RTL expression DO statement_list LOOP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQBRACK in state 6 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 6 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 7 resolved as shift
WARNING: shift/reduce conflict for NOT in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 10 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 10 resolved as shift
WARNING: shift/reduce conflict for NOT in state 10 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 10 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 10 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 10 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 10 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 10 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 10 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 10 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 11 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 11 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 11 resolved as shift
WARNING: shift/reduce conflict for NOT in state 11 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 11 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 11 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 11 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 11 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 11 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 11 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 11 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 11 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for NOT in state 55 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MUL in state 65 resolved as shift
WARNING: shift/reduce conflict for DIV in state 65 resolved as shift
WARNING: shift/reduce conflict for EXP in state 65 resolved as shift
WARNING: shift/reduce conflict for MOD in state 65 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 65 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 65 resolved as shift
WARNING: shift/reduce conflict for IN in state 65 resolved as shift
WARNING: shift/reduce conflict for NOT in state 65 resolved as shift
WARNING: shift/reduce conflict for EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 65 resolved as shift
WARNING: shift/reduce conflict for GT in state 65 resolved as shift
WARNING: shift/reduce conflict for GTE in state 65 resolved as shift
WARNING: shift/reduce conflict for LT in state 65 resolved as shift
WARNING: shift/reduce conflict for LTE in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MUL in state 66 resolved as shift
WARNING: shift/reduce conflict for DIV in state 66 resolved as shift
WARNING: shift/reduce conflict for EXP in state 66 resolved as shift
WARNING: shift/reduce conflict for MOD in state 66 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 66 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 66 resolved as shift
WARNING: shift/reduce conflict for IN in state 66 resolved as shift
WARNING: shift/reduce conflict for NOT in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for GTE in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for LTE in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MUL in state 74 resolved as shift
WARNING: shift/reduce conflict for DIV in state 74 resolved as shift
WARNING: shift/reduce conflict for EXP in state 74 resolved as shift
WARNING: shift/reduce conflict for MOD in state 74 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 74 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 74 resolved as shift
WARNING: shift/reduce conflict for IN in state 74 resolved as shift
WARNING: shift/reduce conflict for NOT in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 74 resolved as shift
WARNING: shift/reduce conflict for GT in state 74 resolved as shift
WARNING: shift/reduce conflict for GTE in state 74 resolved as shift
WARNING: shift/reduce conflict for LT in state 74 resolved as shift
WARNING: shift/reduce conflict for LTE in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MUL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for EXP in state 81 resolved as shift
WARNING: shift/reduce conflict for MOD in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 81 resolved as shift
WARNING: shift/reduce conflict for IN in state 81 resolved as shift
WARNING: shift/reduce conflict for NOT in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for GTE in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for LTE in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MUL in state 82 resolved as shift
WARNING: shift/reduce conflict for DIV in state 82 resolved as shift
WARNING: shift/reduce conflict for EXP in state 82 resolved as shift
WARNING: shift/reduce conflict for MOD in state 82 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 82 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 82 resolved as shift
WARNING: shift/reduce conflict for IN in state 82 resolved as shift
WARNING: shift/reduce conflict for NOT in state 82 resolved as shift
WARNING: shift/reduce conflict for EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for GTE in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for LTE in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MUL in state 83 resolved as shift
WARNING: shift/reduce conflict for DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for EXP in state 83 resolved as shift
WARNING: shift/reduce conflict for MOD in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 83 resolved as shift
WARNING: shift/reduce conflict for IN in state 83 resolved as shift
WARNING: shift/reduce conflict for NOT in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for GTE in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for LTE in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MUL in state 85 resolved as shift
WARNING: shift/reduce conflict for DIV in state 85 resolved as shift
WARNING: shift/reduce conflict for EXP in state 85 resolved as shift
WARNING: shift/reduce conflict for MOD in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 85 resolved as shift
WARNING: shift/reduce conflict for IN in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 85 resolved as shift
WARNING: shift/reduce conflict for GT in state 85 resolved as shift
WARNING: shift/reduce conflict for GTE in state 85 resolved as shift
WARNING: shift/reduce conflict for LT in state 85 resolved as shift
WARNING: shift/reduce conflict for LTE in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MUL in state 86 resolved as shift
WARNING: shift/reduce conflict for DIV in state 86 resolved as shift
WARNING: shift/reduce conflict for EXP in state 86 resolved as shift
WARNING: shift/reduce conflict for MOD in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 86 resolved as shift
WARNING: shift/reduce conflict for IN in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT in state 86 resolved as shift
WARNING: shift/reduce conflict for EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 86 resolved as shift
WARNING: shift/reduce conflict for GT in state 86 resolved as shift
WARNING: shift/reduce conflict for GTE in state 86 resolved as shift
WARNING: shift/reduce conflict for LT in state 86 resolved as shift
WARNING: shift/reduce conflict for LTE in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MUL in state 87 resolved as shift
WARNING: shift/reduce conflict for DIV in state 87 resolved as shift
WARNING: shift/reduce conflict for EXP in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 87 resolved as shift
WARNING: shift/reduce conflict for IN in state 87 resolved as shift
WARNING: shift/reduce conflict for NOT in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 87 resolved as shift
WARNING: shift/reduce conflict for GT in state 87 resolved as shift
WARNING: shift/reduce conflict for GTE in state 87 resolved as shift
WARNING: shift/reduce conflict for LT in state 87 resolved as shift
WARNING: shift/reduce conflict for LTE in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MUL in state 88 resolved as shift
WARNING: shift/reduce conflict for DIV in state 88 resolved as shift
WARNING: shift/reduce conflict for EXP in state 88 resolved as shift
WARNING: shift/reduce conflict for MOD in state 88 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 88 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 88 resolved as shift
WARNING: shift/reduce conflict for IN in state 88 resolved as shift
WARNING: shift/reduce conflict for NOT in state 88 resolved as shift
WARNING: shift/reduce conflict for EQ in state 88 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 88 resolved as shift
WARNING: shift/reduce conflict for GT in state 88 resolved as shift
WARNING: shift/reduce conflict for GTE in state 88 resolved as shift
WARNING: shift/reduce conflict for LT in state 88 resolved as shift
WARNING: shift/reduce conflict for LTE in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MUL in state 89 resolved as shift
WARNING: shift/reduce conflict for DIV in state 89 resolved as shift
WARNING: shift/reduce conflict for EXP in state 89 resolved as shift
WARNING: shift/reduce conflict for MOD in state 89 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 89 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 89 resolved as shift
WARNING: shift/reduce conflict for IN in state 89 resolved as shift
WARNING: shift/reduce conflict for NOT in state 89 resolved as shift
WARNING: shift/reduce conflict for EQ in state 89 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for GTE in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for LTE in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MUL in state 90 resolved as shift
WARNING: shift/reduce conflict for DIV in state 90 resolved as shift
WARNING: shift/reduce conflict for EXP in state 90 resolved as shift
WARNING: shift/reduce conflict for MOD in state 90 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 90 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 90 resolved as shift
WARNING: shift/reduce conflict for IN in state 90 resolved as shift
WARNING: shift/reduce conflict for NOT in state 90 resolved as shift
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 90 resolved as shift
WARNING: shift/reduce conflict for GT in state 90 resolved as shift
WARNING: shift/reduce conflict for GTE in state 90 resolved as shift
WARNING: shift/reduce conflict for LT in state 90 resolved as shift
WARNING: shift/reduce conflict for LTE in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MUL in state 91 resolved as shift
WARNING: shift/reduce conflict for DIV in state 91 resolved as shift
WARNING: shift/reduce conflict for EXP in state 91 resolved as shift
WARNING: shift/reduce conflict for MOD in state 91 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 91 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 91 resolved as shift
WARNING: shift/reduce conflict for IN in state 91 resolved as shift
WARNING: shift/reduce conflict for NOT in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 91 resolved as shift
WARNING: shift/reduce conflict for GT in state 91 resolved as shift
WARNING: shift/reduce conflict for GTE in state 91 resolved as shift
WARNING: shift/reduce conflict for LT in state 91 resolved as shift
WARNING: shift/reduce conflict for LTE in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MUL in state 92 resolved as shift
WARNING: shift/reduce conflict for DIV in state 92 resolved as shift
WARNING: shift/reduce conflict for EXP in state 92 resolved as shift
WARNING: shift/reduce conflict for MOD in state 92 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 92 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 92 resolved as shift
WARNING: shift/reduce conflict for IN in state 92 resolved as shift
WARNING: shift/reduce conflict for NOT in state 92 resolved as shift
WARNING: shift/reduce conflict for EQ in state 92 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 92 resolved as shift
WARNING: shift/reduce conflict for GT in state 92 resolved as shift
WARNING: shift/reduce conflict for GTE in state 92 resolved as shift
WARNING: shift/reduce conflict for LT in state 92 resolved as shift
WARNING: shift/reduce conflict for LTE in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT in state 101 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 101 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 101 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 101 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 101 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 101 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 101 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT in state 102 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 102 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 102 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 102 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 102 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 102 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 102 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 102 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT in state 110 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 110 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 110 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 110 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 110 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 110 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 110 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 110 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT in state 111 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 111 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 111 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 111 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 111 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 111 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 111 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 111 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 112 resolved as shift
WARNING: shift/reduce conflict for NOT in state 112 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 112 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 112 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 112 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 112 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 112 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 112 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 112 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 113 resolved as shift
WARNING: shift/reduce conflict for NOT in state 113 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 113 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 113 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 113 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 113 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 113 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 113 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT in state 114 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 114 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 114 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 114 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 114 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 114 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 114 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for BIT_NEG in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT in state 115 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 115 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 115 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 115 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 115 resolved as shift
WARNING: shift/reduce conflict for NUM_FLOAT in state 115 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 115 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MUL in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV in state 116 resolved as shift
WARNING: shift/reduce conflict for EXP in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD in state 116 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 116 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 116 resolved as shift
WARNING: shift/reduce conflict for IN in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for GT in state 116 resolved as shift
WARNING: shift/reduce conflict for GTE in state 116 resolved as shift
WARNING: shift/reduce conflict for LT in state 116 resolved as shift
WARNING: shift/reduce conflict for LTE in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for NOT in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (statement -> identifier)
WARNING: rejected rule (expression -> identifier) in state 6
WARNING: reduce/reduce conflict in state 73 resolved using rule (assignable -> primitive)
WARNING: rejected rule (expression -> primitive) in state 73
WARNING: reduce/reduce conflict in state 123 resolved using rule (expression -> PROCCES identifier ARROW_LTR START)
WARNING: rejected rule (statement -> PROCCES identifier ARROW_LTR START) in state 123
WARNING: reduce/reduce conflict in state 146 resolved using rule (statement -> if_statement)
WARNING: rejected rule (if_statement -> IF expression THEN statement_list ELSE if_statement) in state 146
WARNING: Rule (statement -> PROCCES identifier ARROW_LTR START) is never reduced
