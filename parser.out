Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> START program_main END
Rule 2     program_main -> program_sequence main_declaration
Rule 3     main_declaration -> MAIN COLON statements_nont END
Rule 4     program_sequence -> program_sequence
Rule 5     program_sequence -> statements_nont
Rule 6     program_sequence -> PROCESS_declaration
Rule 7     var_declaration -> var_type ID
Rule 8     var_declaration -> var_type ID COMMA ID
Rule 9     var_declaration -> var_type ID EQUAL NUMBER
Rule 10    var_declaration -> var_type ID EQUAL NUMBER_FLOAT
Rule 11    var_declaration -> var_type ID EQUAL var
Rule 12    var_declaration -> var_type ID EQUAL simple_expression
Rule 13    var_type -> INT
Rule 14    var_type -> FLOAT
Rule 15    var_declaration -> var_type ID dimensiones
Rule 16    dimensiones -> dimensiones LBRACKET expression RBRACKET
Rule 17    dimensiones -> LBRACKET expression RBRACKET
Rule 18    PROCESS_declaration -> PROCESS ID DO statements_nont END
Rule 19    statements_nont -> statements_nont statement
Rule 20    statements_nont -> statement
Rule 21    statement -> expression_nont
Rule 22    statement -> condition_nont
Rule 23    statement -> iteration_nont
Rule 24    statement -> var_declaration
Rule 25    statement -> call
Rule 26    expression_nont -> expression
Rule 27    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN
Rule 28    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
Rule 29    expression_nont -> SETOUT LPAREN var RPAREN
Rule 30    expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN
Rule 31    expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN
Rule 32    expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
Rule 33    expression_nont -> GETIN LPAREN var RPAREN
Rule 34    expression_nont -> GETIN LPAREN var COMMA var RPAREN
Rule 35    expression_nont -> var PLUSPLUS
Rule 36    expression_nont -> var MINUSMINUS
Rule 37    condition_nont -> IF expression THEN statements_nont END
Rule 38    condition_nont -> IF expression THEN statements_nont ELSE statements_nont END
Rule 39    iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP
Rule 40    iteration_nont -> WHILE expression DO statements_nont LOOP
Rule 41    expression -> var EQUAL expression
Rule 42    var -> ID
Rule 43    var -> var ID LBRACKET expression RBRACKET
Rule 44    var -> ID vardimen
Rule 45    vardimen -> vardimen LBRACKET expression RBRACKET
Rule 46    vardimen -> LBRACKET expression RBRACKET
Rule 47    expression -> simple_expression
Rule 48    simple_expression -> additive_expression checkop additive_expression
Rule 49    simple_expression -> additive_expression
Rule 50    checkop -> LESS
Rule 51    checkop -> LESSEQUAL
Rule 52    checkop -> GREATER
Rule 53    checkop -> GREATEREQUAL
Rule 54    checkop -> DEQUAL
Rule 55    checkop -> DISTINT
Rule 56    additive_expression -> additive_expression addop term
Rule 57    additive_expression -> term
Rule 58    addop -> PLUS
Rule 59    addop -> MINUS
Rule 60    factor -> var
Rule 61    factor -> NUMBER
Rule 62    factor -> FLOAT
Rule 63    factor -> LPAREN expression RPAREN
Rule 64    call -> CALL LPAREN ID RPAREN
Rule 65    term -> term mulop factor
Rule 66    term -> factor
Rule 67    mulop -> TIMES
Rule 68    mulop -> DIVIDE

Terminals, with rules where they appear

ARROW                : 39
CALL                 : 64
COLON                : 3
COMMA                : 8 28 30 31 31 32 32 34
DEQUAL               : 54
DISTINT              : 55
DIVIDE               : 68
DO                   : 18 39 40
ELSE                 : 38
END                  : 1 3 18 37 38
ENDL                 : 28 30 32
EQUAL                : 9 10 11 12 41
FLOAT                : 14 62
FOR                  : 39
GETIN                : 33 34
GREATER              : 52
GREATEREQUAL         : 53
ID                   : 7 8 8 9 10 11 12 15 18 27 28 42 43 44 64
IF                   : 37 38
INT                  : 13
LBRACKET             : 16 17 43 45 46
LESS                 : 50
LESSEQUAL            : 51
LOOP                 : 39 40
LPAREN               : 27 28 29 30 31 32 33 34 63 64
MAIN                 : 3
MINUS                : 59
MINUSMINUS           : 36
NUMBER               : 9 61
NUMBER_FLOAT         : 10
PLUS                 : 58
PLUSPLUS             : 35
PROCESS              : 18
QUOTES               : 27 27 28 28
RBRACKET             : 16 17 43 45 46
RPAREN               : 27 28 29 30 31 32 33 34 63 64
SETOUT               : 27 28 29 30 31 32
START                : 1
THEN                 : 37 38
TIMES                : 67
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

PROCESS_declaration  : 6
additive_expression  : 48 48 49 56
addop                : 56
call                 : 25
checkop              : 48
condition_nont       : 22
dimensiones          : 15 16
expression           : 16 17 26 37 38 39 39 40 41 43 45 46 63
expression_nont      : 21
factor               : 65 66
iteration_nont       : 23
main_declaration     : 2
mulop                : 65
program              : 0
program_main         : 1
program_sequence     : 2 4
simple_expression    : 12 47
statement            : 19 20
statements_nont      : 3 5 18 19 37 38 38 39 40
term                 : 56 57 65
var                  : 11 29 30 31 31 32 32 33 34 34 35 36 41 43 60
var_declaration      : 24
var_type             : 7 8 9 10 11 12 15
vardimen             : 44 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START program_main END

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . program_main END
    (2) program_main -> . program_sequence main_declaration
    (4) program_sequence -> . program_sequence
    (5) program_sequence -> . statements_nont
    (6) program_sequence -> . PROCESS_declaration
    (19) statements_nont -> . statements_nont statement
    (20) statements_nont -> . statement
    (18) PROCESS_declaration -> . PROCESS ID DO statements_nont END
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    PROCESS         shift and go to state 8
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    program_main                   shift and go to state 3
    program_sequence               shift and go to state 4
    statements_nont                shift and go to state 5
    PROCESS_declaration            shift and go to state 6
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 3

    (1) program -> START program_main . END

    END             shift and go to state 32


state 4

    (2) program_main -> program_sequence . main_declaration
    (4) program_sequence -> program_sequence .
    (3) main_declaration -> . MAIN COLON statements_nont END

  ! shift/reduce conflict for MAIN resolved as shift
    MAIN            shift and go to state 34

  ! MAIN            [ reduce using rule 4 (program_sequence -> program_sequence .) ]

    main_declaration               shift and go to state 33

state 5

    (5) program_sequence -> statements_nont .
    (19) statements_nont -> statements_nont . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    MAIN            reduce using rule 5 (program_sequence -> statements_nont .)
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 6

    (6) program_sequence -> PROCESS_declaration .

    MAIN            reduce using rule 6 (program_sequence -> PROCESS_declaration .)


state 7

    (20) statements_nont -> statement .

    SETOUT          reduce using rule 20 (statements_nont -> statement .)
    GETIN           reduce using rule 20 (statements_nont -> statement .)
    IF              reduce using rule 20 (statements_nont -> statement .)
    FOR             reduce using rule 20 (statements_nont -> statement .)
    WHILE           reduce using rule 20 (statements_nont -> statement .)
    CALL            reduce using rule 20 (statements_nont -> statement .)
    ID              reduce using rule 20 (statements_nont -> statement .)
    INT             reduce using rule 20 (statements_nont -> statement .)
    FLOAT           reduce using rule 20 (statements_nont -> statement .)
    NUMBER          reduce using rule 20 (statements_nont -> statement .)
    LPAREN          reduce using rule 20 (statements_nont -> statement .)
    MAIN            reduce using rule 20 (statements_nont -> statement .)
    END             reduce using rule 20 (statements_nont -> statement .)
    ELSE            reduce using rule 20 (statements_nont -> statement .)
    LOOP            reduce using rule 20 (statements_nont -> statement .)


state 8

    (18) PROCESS_declaration -> PROCESS . ID DO statements_nont END

    ID              shift and go to state 36


state 9

    (42) var -> ID .
    (44) var -> ID . vardimen
    (45) vardimen -> . vardimen LBRACKET expression RBRACKET
    (46) vardimen -> . LBRACKET expression RBRACKET

    PLUSPLUS        reduce using rule 42 (var -> ID .)
    MINUSMINUS      reduce using rule 42 (var -> ID .)
    EQUAL           reduce using rule 42 (var -> ID .)
    ID              reduce using rule 42 (var -> ID .)
    TIMES           reduce using rule 42 (var -> ID .)
    DIVIDE          reduce using rule 42 (var -> ID .)
    LESS            reduce using rule 42 (var -> ID .)
    LESSEQUAL       reduce using rule 42 (var -> ID .)
    GREATER         reduce using rule 42 (var -> ID .)
    GREATEREQUAL    reduce using rule 42 (var -> ID .)
    DEQUAL          reduce using rule 42 (var -> ID .)
    DISTINT         reduce using rule 42 (var -> ID .)
    PLUS            reduce using rule 42 (var -> ID .)
    MINUS           reduce using rule 42 (var -> ID .)
    SETOUT          reduce using rule 42 (var -> ID .)
    GETIN           reduce using rule 42 (var -> ID .)
    IF              reduce using rule 42 (var -> ID .)
    FOR             reduce using rule 42 (var -> ID .)
    WHILE           reduce using rule 42 (var -> ID .)
    CALL            reduce using rule 42 (var -> ID .)
    INT             reduce using rule 42 (var -> ID .)
    FLOAT           reduce using rule 42 (var -> ID .)
    NUMBER          reduce using rule 42 (var -> ID .)
    LPAREN          reduce using rule 42 (var -> ID .)
    MAIN            reduce using rule 42 (var -> ID .)
    RPAREN          reduce using rule 42 (var -> ID .)
    THEN            reduce using rule 42 (var -> ID .)
    ARROW           reduce using rule 42 (var -> ID .)
    DO              reduce using rule 42 (var -> ID .)
    RBRACKET        reduce using rule 42 (var -> ID .)
    COMMA           reduce using rule 42 (var -> ID .)
    END             reduce using rule 42 (var -> ID .)
    ELSE            reduce using rule 42 (var -> ID .)
    LOOP            reduce using rule 42 (var -> ID .)
    LBRACKET        shift and go to state 38

    vardimen                       shift and go to state 37

state 10

    (21) statement -> expression_nont .

    SETOUT          reduce using rule 21 (statement -> expression_nont .)
    GETIN           reduce using rule 21 (statement -> expression_nont .)
    IF              reduce using rule 21 (statement -> expression_nont .)
    FOR             reduce using rule 21 (statement -> expression_nont .)
    WHILE           reduce using rule 21 (statement -> expression_nont .)
    CALL            reduce using rule 21 (statement -> expression_nont .)
    ID              reduce using rule 21 (statement -> expression_nont .)
    INT             reduce using rule 21 (statement -> expression_nont .)
    FLOAT           reduce using rule 21 (statement -> expression_nont .)
    NUMBER          reduce using rule 21 (statement -> expression_nont .)
    LPAREN          reduce using rule 21 (statement -> expression_nont .)
    MAIN            reduce using rule 21 (statement -> expression_nont .)
    END             reduce using rule 21 (statement -> expression_nont .)
    ELSE            reduce using rule 21 (statement -> expression_nont .)
    LOOP            reduce using rule 21 (statement -> expression_nont .)


state 11

    (22) statement -> condition_nont .

    SETOUT          reduce using rule 22 (statement -> condition_nont .)
    GETIN           reduce using rule 22 (statement -> condition_nont .)
    IF              reduce using rule 22 (statement -> condition_nont .)
    FOR             reduce using rule 22 (statement -> condition_nont .)
    WHILE           reduce using rule 22 (statement -> condition_nont .)
    CALL            reduce using rule 22 (statement -> condition_nont .)
    ID              reduce using rule 22 (statement -> condition_nont .)
    INT             reduce using rule 22 (statement -> condition_nont .)
    FLOAT           reduce using rule 22 (statement -> condition_nont .)
    NUMBER          reduce using rule 22 (statement -> condition_nont .)
    LPAREN          reduce using rule 22 (statement -> condition_nont .)
    MAIN            reduce using rule 22 (statement -> condition_nont .)
    END             reduce using rule 22 (statement -> condition_nont .)
    ELSE            reduce using rule 22 (statement -> condition_nont .)
    LOOP            reduce using rule 22 (statement -> condition_nont .)


state 12

    (23) statement -> iteration_nont .

    SETOUT          reduce using rule 23 (statement -> iteration_nont .)
    GETIN           reduce using rule 23 (statement -> iteration_nont .)
    IF              reduce using rule 23 (statement -> iteration_nont .)
    FOR             reduce using rule 23 (statement -> iteration_nont .)
    WHILE           reduce using rule 23 (statement -> iteration_nont .)
    CALL            reduce using rule 23 (statement -> iteration_nont .)
    ID              reduce using rule 23 (statement -> iteration_nont .)
    INT             reduce using rule 23 (statement -> iteration_nont .)
    FLOAT           reduce using rule 23 (statement -> iteration_nont .)
    NUMBER          reduce using rule 23 (statement -> iteration_nont .)
    LPAREN          reduce using rule 23 (statement -> iteration_nont .)
    MAIN            reduce using rule 23 (statement -> iteration_nont .)
    END             reduce using rule 23 (statement -> iteration_nont .)
    ELSE            reduce using rule 23 (statement -> iteration_nont .)
    LOOP            reduce using rule 23 (statement -> iteration_nont .)


state 13

    (24) statement -> var_declaration .

    SETOUT          reduce using rule 24 (statement -> var_declaration .)
    GETIN           reduce using rule 24 (statement -> var_declaration .)
    IF              reduce using rule 24 (statement -> var_declaration .)
    FOR             reduce using rule 24 (statement -> var_declaration .)
    WHILE           reduce using rule 24 (statement -> var_declaration .)
    CALL            reduce using rule 24 (statement -> var_declaration .)
    ID              reduce using rule 24 (statement -> var_declaration .)
    INT             reduce using rule 24 (statement -> var_declaration .)
    FLOAT           reduce using rule 24 (statement -> var_declaration .)
    NUMBER          reduce using rule 24 (statement -> var_declaration .)
    LPAREN          reduce using rule 24 (statement -> var_declaration .)
    MAIN            reduce using rule 24 (statement -> var_declaration .)
    END             reduce using rule 24 (statement -> var_declaration .)
    ELSE            reduce using rule 24 (statement -> var_declaration .)
    LOOP            reduce using rule 24 (statement -> var_declaration .)


state 14

    (25) statement -> call .

    SETOUT          reduce using rule 25 (statement -> call .)
    GETIN           reduce using rule 25 (statement -> call .)
    IF              reduce using rule 25 (statement -> call .)
    FOR             reduce using rule 25 (statement -> call .)
    WHILE           reduce using rule 25 (statement -> call .)
    CALL            reduce using rule 25 (statement -> call .)
    ID              reduce using rule 25 (statement -> call .)
    INT             reduce using rule 25 (statement -> call .)
    FLOAT           reduce using rule 25 (statement -> call .)
    NUMBER          reduce using rule 25 (statement -> call .)
    LPAREN          reduce using rule 25 (statement -> call .)
    MAIN            reduce using rule 25 (statement -> call .)
    END             reduce using rule 25 (statement -> call .)
    ELSE            reduce using rule 25 (statement -> call .)
    LOOP            reduce using rule 25 (statement -> call .)


state 15

    (26) expression_nont -> expression .

    SETOUT          reduce using rule 26 (expression_nont -> expression .)
    GETIN           reduce using rule 26 (expression_nont -> expression .)
    IF              reduce using rule 26 (expression_nont -> expression .)
    FOR             reduce using rule 26 (expression_nont -> expression .)
    WHILE           reduce using rule 26 (expression_nont -> expression .)
    CALL            reduce using rule 26 (expression_nont -> expression .)
    ID              reduce using rule 26 (expression_nont -> expression .)
    INT             reduce using rule 26 (expression_nont -> expression .)
    FLOAT           reduce using rule 26 (expression_nont -> expression .)
    NUMBER          reduce using rule 26 (expression_nont -> expression .)
    LPAREN          reduce using rule 26 (expression_nont -> expression .)
    MAIN            reduce using rule 26 (expression_nont -> expression .)
    END             reduce using rule 26 (expression_nont -> expression .)
    ELSE            reduce using rule 26 (expression_nont -> expression .)
    LOOP            reduce using rule 26 (expression_nont -> expression .)


state 16

    (27) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> SETOUT . LPAREN var RPAREN
    (30) expression_nont -> SETOUT . LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> SETOUT . LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> SETOUT . LPAREN var COMMA var COMMA ENDL RPAREN

    LPAREN          shift and go to state 39


state 17

    (63) factor -> LPAREN . expression RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 40
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 18

    (35) expression_nont -> var . PLUSPLUS
    (36) expression_nont -> var . MINUSMINUS
    (41) expression -> var . EQUAL expression
    (43) var -> var . ID LBRACKET expression RBRACKET
    (60) factor -> var .

  ! shift/reduce conflict for ID resolved as shift
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    EQUAL           shift and go to state 45
    ID              shift and go to state 46
    TIMES           reduce using rule 60 (factor -> var .)
    DIVIDE          reduce using rule 60 (factor -> var .)
    LESS            reduce using rule 60 (factor -> var .)
    LESSEQUAL       reduce using rule 60 (factor -> var .)
    GREATER         reduce using rule 60 (factor -> var .)
    GREATEREQUAL    reduce using rule 60 (factor -> var .)
    DEQUAL          reduce using rule 60 (factor -> var .)
    DISTINT         reduce using rule 60 (factor -> var .)
    PLUS            reduce using rule 60 (factor -> var .)
    MINUS           reduce using rule 60 (factor -> var .)
    SETOUT          reduce using rule 60 (factor -> var .)
    GETIN           reduce using rule 60 (factor -> var .)
    IF              reduce using rule 60 (factor -> var .)
    FOR             reduce using rule 60 (factor -> var .)
    WHILE           reduce using rule 60 (factor -> var .)
    CALL            reduce using rule 60 (factor -> var .)
    INT             reduce using rule 60 (factor -> var .)
    FLOAT           reduce using rule 60 (factor -> var .)
    NUMBER          reduce using rule 60 (factor -> var .)
    LPAREN          reduce using rule 60 (factor -> var .)
    MAIN            reduce using rule 60 (factor -> var .)
    END             reduce using rule 60 (factor -> var .)
    ELSE            reduce using rule 60 (factor -> var .)
    LOOP            reduce using rule 60 (factor -> var .)

  ! ID              [ reduce using rule 60 (factor -> var .) ]


state 19

    (33) expression_nont -> GETIN . LPAREN var RPAREN
    (34) expression_nont -> GETIN . LPAREN var COMMA var RPAREN

    LPAREN          shift and go to state 47


state 20

    (37) condition_nont -> IF . expression THEN statements_nont END
    (38) condition_nont -> IF . expression THEN statements_nont ELSE statements_nont END
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 48
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 21

    (39) iteration_nont -> FOR . expression ARROW expression DO statements_nont LOOP
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 49
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 22

    (40) iteration_nont -> WHILE . expression DO statements_nont LOOP
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 50
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 23

    (7) var_declaration -> var_type . ID
    (8) var_declaration -> var_type . ID COMMA ID
    (9) var_declaration -> var_type . ID EQUAL NUMBER
    (10) var_declaration -> var_type . ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> var_type . ID EQUAL var
    (12) var_declaration -> var_type . ID EQUAL simple_expression
    (15) var_declaration -> var_type . ID dimensiones

    ID              shift and go to state 51


state 24

    (61) factor -> NUMBER .

    TIMES           reduce using rule 61 (factor -> NUMBER .)
    DIVIDE          reduce using rule 61 (factor -> NUMBER .)
    LESS            reduce using rule 61 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 61 (factor -> NUMBER .)
    GREATER         reduce using rule 61 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 61 (factor -> NUMBER .)
    DEQUAL          reduce using rule 61 (factor -> NUMBER .)
    DISTINT         reduce using rule 61 (factor -> NUMBER .)
    PLUS            reduce using rule 61 (factor -> NUMBER .)
    MINUS           reduce using rule 61 (factor -> NUMBER .)
    SETOUT          reduce using rule 61 (factor -> NUMBER .)
    GETIN           reduce using rule 61 (factor -> NUMBER .)
    IF              reduce using rule 61 (factor -> NUMBER .)
    FOR             reduce using rule 61 (factor -> NUMBER .)
    WHILE           reduce using rule 61 (factor -> NUMBER .)
    CALL            reduce using rule 61 (factor -> NUMBER .)
    ID              reduce using rule 61 (factor -> NUMBER .)
    INT             reduce using rule 61 (factor -> NUMBER .)
    FLOAT           reduce using rule 61 (factor -> NUMBER .)
    NUMBER          reduce using rule 61 (factor -> NUMBER .)
    LPAREN          reduce using rule 61 (factor -> NUMBER .)
    MAIN            reduce using rule 61 (factor -> NUMBER .)
    RPAREN          reduce using rule 61 (factor -> NUMBER .)
    THEN            reduce using rule 61 (factor -> NUMBER .)
    ARROW           reduce using rule 61 (factor -> NUMBER .)
    DO              reduce using rule 61 (factor -> NUMBER .)
    RBRACKET        reduce using rule 61 (factor -> NUMBER .)
    END             reduce using rule 61 (factor -> NUMBER .)
    ELSE            reduce using rule 61 (factor -> NUMBER .)
    LOOP            reduce using rule 61 (factor -> NUMBER .)


state 25

    (47) expression -> simple_expression .

    SETOUT          reduce using rule 47 (expression -> simple_expression .)
    GETIN           reduce using rule 47 (expression -> simple_expression .)
    IF              reduce using rule 47 (expression -> simple_expression .)
    FOR             reduce using rule 47 (expression -> simple_expression .)
    WHILE           reduce using rule 47 (expression -> simple_expression .)
    CALL            reduce using rule 47 (expression -> simple_expression .)
    ID              reduce using rule 47 (expression -> simple_expression .)
    INT             reduce using rule 47 (expression -> simple_expression .)
    FLOAT           reduce using rule 47 (expression -> simple_expression .)
    NUMBER          reduce using rule 47 (expression -> simple_expression .)
    LPAREN          reduce using rule 47 (expression -> simple_expression .)
    MAIN            reduce using rule 47 (expression -> simple_expression .)
    RPAREN          reduce using rule 47 (expression -> simple_expression .)
    THEN            reduce using rule 47 (expression -> simple_expression .)
    ARROW           reduce using rule 47 (expression -> simple_expression .)
    DO              reduce using rule 47 (expression -> simple_expression .)
    RBRACKET        reduce using rule 47 (expression -> simple_expression .)
    END             reduce using rule 47 (expression -> simple_expression .)
    ELSE            reduce using rule 47 (expression -> simple_expression .)
    LOOP            reduce using rule 47 (expression -> simple_expression .)


state 26

    (64) call -> CALL . LPAREN ID RPAREN

    LPAREN          shift and go to state 52


state 27

    (13) var_type -> INT .

    ID              reduce using rule 13 (var_type -> INT .)


state 28

    (14) var_type -> FLOAT .
    (62) factor -> FLOAT .

  ! reduce/reduce conflict for ID resolved using rule 14 (var_type -> FLOAT .)
    ID              reduce using rule 14 (var_type -> FLOAT .)
    TIMES           reduce using rule 62 (factor -> FLOAT .)
    DIVIDE          reduce using rule 62 (factor -> FLOAT .)
    LESS            reduce using rule 62 (factor -> FLOAT .)
    LESSEQUAL       reduce using rule 62 (factor -> FLOAT .)
    GREATER         reduce using rule 62 (factor -> FLOAT .)
    GREATEREQUAL    reduce using rule 62 (factor -> FLOAT .)
    DEQUAL          reduce using rule 62 (factor -> FLOAT .)
    DISTINT         reduce using rule 62 (factor -> FLOAT .)
    PLUS            reduce using rule 62 (factor -> FLOAT .)
    MINUS           reduce using rule 62 (factor -> FLOAT .)
    SETOUT          reduce using rule 62 (factor -> FLOAT .)
    GETIN           reduce using rule 62 (factor -> FLOAT .)
    IF              reduce using rule 62 (factor -> FLOAT .)
    FOR             reduce using rule 62 (factor -> FLOAT .)
    WHILE           reduce using rule 62 (factor -> FLOAT .)
    CALL            reduce using rule 62 (factor -> FLOAT .)
    INT             reduce using rule 62 (factor -> FLOAT .)
    FLOAT           reduce using rule 62 (factor -> FLOAT .)
    NUMBER          reduce using rule 62 (factor -> FLOAT .)
    LPAREN          reduce using rule 62 (factor -> FLOAT .)
    MAIN            reduce using rule 62 (factor -> FLOAT .)
    END             reduce using rule 62 (factor -> FLOAT .)
    ELSE            reduce using rule 62 (factor -> FLOAT .)
    LOOP            reduce using rule 62 (factor -> FLOAT .)

  ! ID              [ reduce using rule 62 (factor -> FLOAT .) ]


state 29

    (48) simple_expression -> additive_expression . checkop additive_expression
    (49) simple_expression -> additive_expression .
    (56) additive_expression -> additive_expression . addop term
    (50) checkop -> . LESS
    (51) checkop -> . LESSEQUAL
    (52) checkop -> . GREATER
    (53) checkop -> . GREATEREQUAL
    (54) checkop -> . DEQUAL
    (55) checkop -> . DISTINT
    (58) addop -> . PLUS
    (59) addop -> . MINUS

    SETOUT          reduce using rule 49 (simple_expression -> additive_expression .)
    GETIN           reduce using rule 49 (simple_expression -> additive_expression .)
    IF              reduce using rule 49 (simple_expression -> additive_expression .)
    FOR             reduce using rule 49 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 49 (simple_expression -> additive_expression .)
    CALL            reduce using rule 49 (simple_expression -> additive_expression .)
    ID              reduce using rule 49 (simple_expression -> additive_expression .)
    INT             reduce using rule 49 (simple_expression -> additive_expression .)
    FLOAT           reduce using rule 49 (simple_expression -> additive_expression .)
    NUMBER          reduce using rule 49 (simple_expression -> additive_expression .)
    LPAREN          reduce using rule 49 (simple_expression -> additive_expression .)
    MAIN            reduce using rule 49 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 49 (simple_expression -> additive_expression .)
    THEN            reduce using rule 49 (simple_expression -> additive_expression .)
    ARROW           reduce using rule 49 (simple_expression -> additive_expression .)
    DO              reduce using rule 49 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 49 (simple_expression -> additive_expression .)
    END             reduce using rule 49 (simple_expression -> additive_expression .)
    ELSE            reduce using rule 49 (simple_expression -> additive_expression .)
    LOOP            reduce using rule 49 (simple_expression -> additive_expression .)
    LESS            shift and go to state 55
    LESSEQUAL       shift and go to state 56
    GREATER         shift and go to state 57
    GREATEREQUAL    shift and go to state 58
    DEQUAL          shift and go to state 59
    DISTINT         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62

    checkop                        shift and go to state 53
    addop                          shift and go to state 54

state 30

    (57) additive_expression -> term .
    (65) term -> term . mulop factor
    (67) mulop -> . TIMES
    (68) mulop -> . DIVIDE

    LESS            reduce using rule 57 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 57 (additive_expression -> term .)
    GREATER         reduce using rule 57 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 57 (additive_expression -> term .)
    DEQUAL          reduce using rule 57 (additive_expression -> term .)
    DISTINT         reduce using rule 57 (additive_expression -> term .)
    PLUS            reduce using rule 57 (additive_expression -> term .)
    MINUS           reduce using rule 57 (additive_expression -> term .)
    SETOUT          reduce using rule 57 (additive_expression -> term .)
    GETIN           reduce using rule 57 (additive_expression -> term .)
    IF              reduce using rule 57 (additive_expression -> term .)
    FOR             reduce using rule 57 (additive_expression -> term .)
    WHILE           reduce using rule 57 (additive_expression -> term .)
    CALL            reduce using rule 57 (additive_expression -> term .)
    ID              reduce using rule 57 (additive_expression -> term .)
    INT             reduce using rule 57 (additive_expression -> term .)
    FLOAT           reduce using rule 57 (additive_expression -> term .)
    NUMBER          reduce using rule 57 (additive_expression -> term .)
    LPAREN          reduce using rule 57 (additive_expression -> term .)
    MAIN            reduce using rule 57 (additive_expression -> term .)
    RPAREN          reduce using rule 57 (additive_expression -> term .)
    THEN            reduce using rule 57 (additive_expression -> term .)
    ARROW           reduce using rule 57 (additive_expression -> term .)
    DO              reduce using rule 57 (additive_expression -> term .)
    RBRACKET        reduce using rule 57 (additive_expression -> term .)
    END             reduce using rule 57 (additive_expression -> term .)
    ELSE            reduce using rule 57 (additive_expression -> term .)
    LOOP            reduce using rule 57 (additive_expression -> term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65

    mulop                          shift and go to state 63

state 31

    (66) term -> factor .

    TIMES           reduce using rule 66 (term -> factor .)
    DIVIDE          reduce using rule 66 (term -> factor .)
    LESS            reduce using rule 66 (term -> factor .)
    LESSEQUAL       reduce using rule 66 (term -> factor .)
    GREATER         reduce using rule 66 (term -> factor .)
    GREATEREQUAL    reduce using rule 66 (term -> factor .)
    DEQUAL          reduce using rule 66 (term -> factor .)
    DISTINT         reduce using rule 66 (term -> factor .)
    PLUS            reduce using rule 66 (term -> factor .)
    MINUS           reduce using rule 66 (term -> factor .)
    SETOUT          reduce using rule 66 (term -> factor .)
    GETIN           reduce using rule 66 (term -> factor .)
    IF              reduce using rule 66 (term -> factor .)
    FOR             reduce using rule 66 (term -> factor .)
    WHILE           reduce using rule 66 (term -> factor .)
    CALL            reduce using rule 66 (term -> factor .)
    ID              reduce using rule 66 (term -> factor .)
    INT             reduce using rule 66 (term -> factor .)
    FLOAT           reduce using rule 66 (term -> factor .)
    NUMBER          reduce using rule 66 (term -> factor .)
    LPAREN          reduce using rule 66 (term -> factor .)
    MAIN            reduce using rule 66 (term -> factor .)
    RPAREN          reduce using rule 66 (term -> factor .)
    THEN            reduce using rule 66 (term -> factor .)
    ARROW           reduce using rule 66 (term -> factor .)
    DO              reduce using rule 66 (term -> factor .)
    RBRACKET        reduce using rule 66 (term -> factor .)
    END             reduce using rule 66 (term -> factor .)
    ELSE            reduce using rule 66 (term -> factor .)
    LOOP            reduce using rule 66 (term -> factor .)


state 32

    (1) program -> START program_main END .

    $end            reduce using rule 1 (program -> START program_main END .)


state 33

    (2) program_main -> program_sequence main_declaration .

    END             reduce using rule 2 (program_main -> program_sequence main_declaration .)


state 34

    (3) main_declaration -> MAIN . COLON statements_nont END

    COLON           shift and go to state 66


state 35

    (19) statements_nont -> statements_nont statement .

    SETOUT          reduce using rule 19 (statements_nont -> statements_nont statement .)
    GETIN           reduce using rule 19 (statements_nont -> statements_nont statement .)
    IF              reduce using rule 19 (statements_nont -> statements_nont statement .)
    FOR             reduce using rule 19 (statements_nont -> statements_nont statement .)
    WHILE           reduce using rule 19 (statements_nont -> statements_nont statement .)
    CALL            reduce using rule 19 (statements_nont -> statements_nont statement .)
    ID              reduce using rule 19 (statements_nont -> statements_nont statement .)
    INT             reduce using rule 19 (statements_nont -> statements_nont statement .)
    FLOAT           reduce using rule 19 (statements_nont -> statements_nont statement .)
    NUMBER          reduce using rule 19 (statements_nont -> statements_nont statement .)
    LPAREN          reduce using rule 19 (statements_nont -> statements_nont statement .)
    MAIN            reduce using rule 19 (statements_nont -> statements_nont statement .)
    END             reduce using rule 19 (statements_nont -> statements_nont statement .)
    ELSE            reduce using rule 19 (statements_nont -> statements_nont statement .)
    LOOP            reduce using rule 19 (statements_nont -> statements_nont statement .)


state 36

    (18) PROCESS_declaration -> PROCESS ID . DO statements_nont END

    DO              shift and go to state 67


state 37

    (44) var -> ID vardimen .
    (45) vardimen -> vardimen . LBRACKET expression RBRACKET

    PLUSPLUS        reduce using rule 44 (var -> ID vardimen .)
    MINUSMINUS      reduce using rule 44 (var -> ID vardimen .)
    EQUAL           reduce using rule 44 (var -> ID vardimen .)
    ID              reduce using rule 44 (var -> ID vardimen .)
    TIMES           reduce using rule 44 (var -> ID vardimen .)
    DIVIDE          reduce using rule 44 (var -> ID vardimen .)
    LESS            reduce using rule 44 (var -> ID vardimen .)
    LESSEQUAL       reduce using rule 44 (var -> ID vardimen .)
    GREATER         reduce using rule 44 (var -> ID vardimen .)
    GREATEREQUAL    reduce using rule 44 (var -> ID vardimen .)
    DEQUAL          reduce using rule 44 (var -> ID vardimen .)
    DISTINT         reduce using rule 44 (var -> ID vardimen .)
    PLUS            reduce using rule 44 (var -> ID vardimen .)
    MINUS           reduce using rule 44 (var -> ID vardimen .)
    SETOUT          reduce using rule 44 (var -> ID vardimen .)
    GETIN           reduce using rule 44 (var -> ID vardimen .)
    IF              reduce using rule 44 (var -> ID vardimen .)
    FOR             reduce using rule 44 (var -> ID vardimen .)
    WHILE           reduce using rule 44 (var -> ID vardimen .)
    CALL            reduce using rule 44 (var -> ID vardimen .)
    INT             reduce using rule 44 (var -> ID vardimen .)
    FLOAT           reduce using rule 44 (var -> ID vardimen .)
    NUMBER          reduce using rule 44 (var -> ID vardimen .)
    LPAREN          reduce using rule 44 (var -> ID vardimen .)
    MAIN            reduce using rule 44 (var -> ID vardimen .)
    RPAREN          reduce using rule 44 (var -> ID vardimen .)
    THEN            reduce using rule 44 (var -> ID vardimen .)
    ARROW           reduce using rule 44 (var -> ID vardimen .)
    DO              reduce using rule 44 (var -> ID vardimen .)
    RBRACKET        reduce using rule 44 (var -> ID vardimen .)
    COMMA           reduce using rule 44 (var -> ID vardimen .)
    END             reduce using rule 44 (var -> ID vardimen .)
    ELSE            reduce using rule 44 (var -> ID vardimen .)
    LOOP            reduce using rule 44 (var -> ID vardimen .)
    LBRACKET        shift and go to state 68


state 38

    (46) vardimen -> LBRACKET . expression RBRACKET
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 69
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 39

    (27) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES RPAREN
    (28) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> SETOUT LPAREN . var RPAREN
    (30) expression_nont -> SETOUT LPAREN . var COMMA ENDL RPAREN
    (31) expression_nont -> SETOUT LPAREN . var COMMA var COMMA RPAREN
    (32) expression_nont -> SETOUT LPAREN . var COMMA var COMMA ENDL RPAREN
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen

    QUOTES          shift and go to state 70
    ID              shift and go to state 9

    var                            shift and go to state 71

state 40

    (63) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 72


state 41

    (41) expression -> var . EQUAL expression
    (43) var -> var . ID LBRACKET expression RBRACKET
    (60) factor -> var .

  ! shift/reduce conflict for ID resolved as shift
    EQUAL           shift and go to state 45
    ID              shift and go to state 46
    TIMES           reduce using rule 60 (factor -> var .)
    DIVIDE          reduce using rule 60 (factor -> var .)
    LESS            reduce using rule 60 (factor -> var .)
    LESSEQUAL       reduce using rule 60 (factor -> var .)
    GREATER         reduce using rule 60 (factor -> var .)
    GREATEREQUAL    reduce using rule 60 (factor -> var .)
    DEQUAL          reduce using rule 60 (factor -> var .)
    DISTINT         reduce using rule 60 (factor -> var .)
    PLUS            reduce using rule 60 (factor -> var .)
    MINUS           reduce using rule 60 (factor -> var .)
    RPAREN          reduce using rule 60 (factor -> var .)
    THEN            reduce using rule 60 (factor -> var .)
    ARROW           reduce using rule 60 (factor -> var .)
    DO              reduce using rule 60 (factor -> var .)
    RBRACKET        reduce using rule 60 (factor -> var .)
    SETOUT          reduce using rule 60 (factor -> var .)
    GETIN           reduce using rule 60 (factor -> var .)
    IF              reduce using rule 60 (factor -> var .)
    FOR             reduce using rule 60 (factor -> var .)
    WHILE           reduce using rule 60 (factor -> var .)
    CALL            reduce using rule 60 (factor -> var .)
    INT             reduce using rule 60 (factor -> var .)
    FLOAT           reduce using rule 60 (factor -> var .)
    NUMBER          reduce using rule 60 (factor -> var .)
    LPAREN          reduce using rule 60 (factor -> var .)
    MAIN            reduce using rule 60 (factor -> var .)
    END             reduce using rule 60 (factor -> var .)
    ELSE            reduce using rule 60 (factor -> var .)
    LOOP            reduce using rule 60 (factor -> var .)

  ! ID              [ reduce using rule 60 (factor -> var .) ]


state 42

    (62) factor -> FLOAT .

    TIMES           reduce using rule 62 (factor -> FLOAT .)
    DIVIDE          reduce using rule 62 (factor -> FLOAT .)
    LESS            reduce using rule 62 (factor -> FLOAT .)
    LESSEQUAL       reduce using rule 62 (factor -> FLOAT .)
    GREATER         reduce using rule 62 (factor -> FLOAT .)
    GREATEREQUAL    reduce using rule 62 (factor -> FLOAT .)
    DEQUAL          reduce using rule 62 (factor -> FLOAT .)
    DISTINT         reduce using rule 62 (factor -> FLOAT .)
    PLUS            reduce using rule 62 (factor -> FLOAT .)
    MINUS           reduce using rule 62 (factor -> FLOAT .)
    RPAREN          reduce using rule 62 (factor -> FLOAT .)
    THEN            reduce using rule 62 (factor -> FLOAT .)
    ARROW           reduce using rule 62 (factor -> FLOAT .)
    DO              reduce using rule 62 (factor -> FLOAT .)
    RBRACKET        reduce using rule 62 (factor -> FLOAT .)
    SETOUT          reduce using rule 62 (factor -> FLOAT .)
    GETIN           reduce using rule 62 (factor -> FLOAT .)
    IF              reduce using rule 62 (factor -> FLOAT .)
    FOR             reduce using rule 62 (factor -> FLOAT .)
    WHILE           reduce using rule 62 (factor -> FLOAT .)
    CALL            reduce using rule 62 (factor -> FLOAT .)
    ID              reduce using rule 62 (factor -> FLOAT .)
    INT             reduce using rule 62 (factor -> FLOAT .)
    FLOAT           reduce using rule 62 (factor -> FLOAT .)
    NUMBER          reduce using rule 62 (factor -> FLOAT .)
    LPAREN          reduce using rule 62 (factor -> FLOAT .)
    MAIN            reduce using rule 62 (factor -> FLOAT .)
    END             reduce using rule 62 (factor -> FLOAT .)
    ELSE            reduce using rule 62 (factor -> FLOAT .)
    LOOP            reduce using rule 62 (factor -> FLOAT .)


state 43

    (35) expression_nont -> var PLUSPLUS .

    SETOUT          reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    GETIN           reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    IF              reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    FOR             reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    WHILE           reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    CALL            reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    ID              reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    INT             reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    FLOAT           reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    NUMBER          reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    LPAREN          reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    MAIN            reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    END             reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    ELSE            reduce using rule 35 (expression_nont -> var PLUSPLUS .)
    LOOP            reduce using rule 35 (expression_nont -> var PLUSPLUS .)


state 44

    (36) expression_nont -> var MINUSMINUS .

    SETOUT          reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    GETIN           reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    IF              reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    FOR             reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    WHILE           reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    CALL            reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    ID              reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    INT             reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    FLOAT           reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    NUMBER          reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    LPAREN          reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    MAIN            reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    END             reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    ELSE            reduce using rule 36 (expression_nont -> var MINUSMINUS .)
    LOOP            reduce using rule 36 (expression_nont -> var MINUSMINUS .)


state 45

    (41) expression -> var EQUAL . expression
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    var                            shift and go to state 41
    expression                     shift and go to state 73
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 46

    (43) var -> var ID . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 74


state 47

    (33) expression_nont -> GETIN LPAREN . var RPAREN
    (34) expression_nont -> GETIN LPAREN . var COMMA var RPAREN
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen

    ID              shift and go to state 9

    var                            shift and go to state 75

state 48

    (37) condition_nont -> IF expression . THEN statements_nont END
    (38) condition_nont -> IF expression . THEN statements_nont ELSE statements_nont END

    THEN            shift and go to state 76


state 49

    (39) iteration_nont -> FOR expression . ARROW expression DO statements_nont LOOP

    ARROW           shift and go to state 77


state 50

    (40) iteration_nont -> WHILE expression . DO statements_nont LOOP

    DO              shift and go to state 78


state 51

    (7) var_declaration -> var_type ID .
    (8) var_declaration -> var_type ID . COMMA ID
    (9) var_declaration -> var_type ID . EQUAL NUMBER
    (10) var_declaration -> var_type ID . EQUAL NUMBER_FLOAT
    (11) var_declaration -> var_type ID . EQUAL var
    (12) var_declaration -> var_type ID . EQUAL simple_expression
    (15) var_declaration -> var_type ID . dimensiones
    (16) dimensiones -> . dimensiones LBRACKET expression RBRACKET
    (17) dimensiones -> . LBRACKET expression RBRACKET

    SETOUT          reduce using rule 7 (var_declaration -> var_type ID .)
    GETIN           reduce using rule 7 (var_declaration -> var_type ID .)
    IF              reduce using rule 7 (var_declaration -> var_type ID .)
    FOR             reduce using rule 7 (var_declaration -> var_type ID .)
    WHILE           reduce using rule 7 (var_declaration -> var_type ID .)
    CALL            reduce using rule 7 (var_declaration -> var_type ID .)
    ID              reduce using rule 7 (var_declaration -> var_type ID .)
    INT             reduce using rule 7 (var_declaration -> var_type ID .)
    FLOAT           reduce using rule 7 (var_declaration -> var_type ID .)
    NUMBER          reduce using rule 7 (var_declaration -> var_type ID .)
    LPAREN          reduce using rule 7 (var_declaration -> var_type ID .)
    MAIN            reduce using rule 7 (var_declaration -> var_type ID .)
    END             reduce using rule 7 (var_declaration -> var_type ID .)
    ELSE            reduce using rule 7 (var_declaration -> var_type ID .)
    LOOP            reduce using rule 7 (var_declaration -> var_type ID .)
    COMMA           shift and go to state 79
    EQUAL           shift and go to state 80
    LBRACKET        shift and go to state 82

    dimensiones                    shift and go to state 81

state 52

    (64) call -> CALL LPAREN . ID RPAREN

    ID              shift and go to state 83


state 53

    (48) simple_expression -> additive_expression checkop . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17
    ID              shift and go to state 9

    additive_expression            shift and go to state 84
    term                           shift and go to state 30
    factor                         shift and go to state 31
    var                            shift and go to state 85

state 54

    (56) additive_expression -> additive_expression addop . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17
    ID              shift and go to state 9

    term                           shift and go to state 86
    factor                         shift and go to state 31
    var                            shift and go to state 85

state 55

    (50) checkop -> LESS .

    NUMBER          reduce using rule 50 (checkop -> LESS .)
    FLOAT           reduce using rule 50 (checkop -> LESS .)
    LPAREN          reduce using rule 50 (checkop -> LESS .)
    ID              reduce using rule 50 (checkop -> LESS .)


state 56

    (51) checkop -> LESSEQUAL .

    NUMBER          reduce using rule 51 (checkop -> LESSEQUAL .)
    FLOAT           reduce using rule 51 (checkop -> LESSEQUAL .)
    LPAREN          reduce using rule 51 (checkop -> LESSEQUAL .)
    ID              reduce using rule 51 (checkop -> LESSEQUAL .)


state 57

    (52) checkop -> GREATER .

    NUMBER          reduce using rule 52 (checkop -> GREATER .)
    FLOAT           reduce using rule 52 (checkop -> GREATER .)
    LPAREN          reduce using rule 52 (checkop -> GREATER .)
    ID              reduce using rule 52 (checkop -> GREATER .)


state 58

    (53) checkop -> GREATEREQUAL .

    NUMBER          reduce using rule 53 (checkop -> GREATEREQUAL .)
    FLOAT           reduce using rule 53 (checkop -> GREATEREQUAL .)
    LPAREN          reduce using rule 53 (checkop -> GREATEREQUAL .)
    ID              reduce using rule 53 (checkop -> GREATEREQUAL .)


state 59

    (54) checkop -> DEQUAL .

    NUMBER          reduce using rule 54 (checkop -> DEQUAL .)
    FLOAT           reduce using rule 54 (checkop -> DEQUAL .)
    LPAREN          reduce using rule 54 (checkop -> DEQUAL .)
    ID              reduce using rule 54 (checkop -> DEQUAL .)


state 60

    (55) checkop -> DISTINT .

    NUMBER          reduce using rule 55 (checkop -> DISTINT .)
    FLOAT           reduce using rule 55 (checkop -> DISTINT .)
    LPAREN          reduce using rule 55 (checkop -> DISTINT .)
    ID              reduce using rule 55 (checkop -> DISTINT .)


state 61

    (58) addop -> PLUS .

    NUMBER          reduce using rule 58 (addop -> PLUS .)
    FLOAT           reduce using rule 58 (addop -> PLUS .)
    LPAREN          reduce using rule 58 (addop -> PLUS .)
    ID              reduce using rule 58 (addop -> PLUS .)


state 62

    (59) addop -> MINUS .

    NUMBER          reduce using rule 59 (addop -> MINUS .)
    FLOAT           reduce using rule 59 (addop -> MINUS .)
    LPAREN          reduce using rule 59 (addop -> MINUS .)
    ID              reduce using rule 59 (addop -> MINUS .)


state 63

    (65) term -> term mulop . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17
    ID              shift and go to state 9

    factor                         shift and go to state 87
    var                            shift and go to state 85

state 64

    (67) mulop -> TIMES .

    NUMBER          reduce using rule 67 (mulop -> TIMES .)
    FLOAT           reduce using rule 67 (mulop -> TIMES .)
    LPAREN          reduce using rule 67 (mulop -> TIMES .)
    ID              reduce using rule 67 (mulop -> TIMES .)


state 65

    (68) mulop -> DIVIDE .

    NUMBER          reduce using rule 68 (mulop -> DIVIDE .)
    FLOAT           reduce using rule 68 (mulop -> DIVIDE .)
    LPAREN          reduce using rule 68 (mulop -> DIVIDE .)
    ID              reduce using rule 68 (mulop -> DIVIDE .)


state 66

    (3) main_declaration -> MAIN COLON . statements_nont END
    (19) statements_nont -> . statements_nont statement
    (20) statements_nont -> . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    statements_nont                shift and go to state 88
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 67

    (18) PROCESS_declaration -> PROCESS ID DO . statements_nont END
    (19) statements_nont -> . statements_nont statement
    (20) statements_nont -> . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    statements_nont                shift and go to state 89
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 68

    (45) vardimen -> vardimen LBRACKET . expression RBRACKET
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 90
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 69

    (46) vardimen -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 91


state 70

    (27) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES RPAREN
    (28) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES COMMA ENDL RPAREN

    ID              shift and go to state 92


state 71

    (29) expression_nont -> SETOUT LPAREN var . RPAREN
    (30) expression_nont -> SETOUT LPAREN var . COMMA ENDL RPAREN
    (31) expression_nont -> SETOUT LPAREN var . COMMA var COMMA RPAREN
    (32) expression_nont -> SETOUT LPAREN var . COMMA var COMMA ENDL RPAREN
    (43) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 93
    COMMA           shift and go to state 94
    ID              shift and go to state 46


state 72

    (63) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    SETOUT          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    GETIN           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    CALL            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    INT             reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    MAIN            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 63 (factor -> LPAREN expression RPAREN .)


state 73

    (41) expression -> var EQUAL expression .

    SETOUT          reduce using rule 41 (expression -> var EQUAL expression .)
    GETIN           reduce using rule 41 (expression -> var EQUAL expression .)
    IF              reduce using rule 41 (expression -> var EQUAL expression .)
    FOR             reduce using rule 41 (expression -> var EQUAL expression .)
    WHILE           reduce using rule 41 (expression -> var EQUAL expression .)
    CALL            reduce using rule 41 (expression -> var EQUAL expression .)
    ID              reduce using rule 41 (expression -> var EQUAL expression .)
    INT             reduce using rule 41 (expression -> var EQUAL expression .)
    FLOAT           reduce using rule 41 (expression -> var EQUAL expression .)
    NUMBER          reduce using rule 41 (expression -> var EQUAL expression .)
    LPAREN          reduce using rule 41 (expression -> var EQUAL expression .)
    MAIN            reduce using rule 41 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 41 (expression -> var EQUAL expression .)
    THEN            reduce using rule 41 (expression -> var EQUAL expression .)
    ARROW           reduce using rule 41 (expression -> var EQUAL expression .)
    DO              reduce using rule 41 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 41 (expression -> var EQUAL expression .)
    END             reduce using rule 41 (expression -> var EQUAL expression .)
    ELSE            reduce using rule 41 (expression -> var EQUAL expression .)
    LOOP            reduce using rule 41 (expression -> var EQUAL expression .)


state 74

    (43) var -> var ID LBRACKET . expression RBRACKET
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    var                            shift and go to state 41
    expression                     shift and go to state 95
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 75

    (33) expression_nont -> GETIN LPAREN var . RPAREN
    (34) expression_nont -> GETIN LPAREN var . COMMA var RPAREN
    (43) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 97
    ID              shift and go to state 46


state 76

    (37) condition_nont -> IF expression THEN . statements_nont END
    (38) condition_nont -> IF expression THEN . statements_nont ELSE statements_nont END
    (19) statements_nont -> . statements_nont statement
    (20) statements_nont -> . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statements_nont                shift and go to state 98
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 77

    (39) iteration_nont -> FOR expression ARROW . expression DO statements_nont LOOP
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 99
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 78

    (40) iteration_nont -> WHILE expression DO . statements_nont LOOP
    (19) statements_nont -> . statements_nont statement
    (20) statements_nont -> . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statements_nont                shift and go to state 100
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 79

    (8) var_declaration -> var_type ID COMMA . ID

    ID              shift and go to state 101


state 80

    (9) var_declaration -> var_type ID EQUAL . NUMBER
    (10) var_declaration -> var_type ID EQUAL . NUMBER_FLOAT
    (11) var_declaration -> var_type ID EQUAL . var
    (12) var_declaration -> var_type ID EQUAL . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 102
    NUMBER_FLOAT    shift and go to state 103
    ID              shift and go to state 9
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    var                            shift and go to state 104
    simple_expression              shift and go to state 105
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 81

    (15) var_declaration -> var_type ID dimensiones .
    (16) dimensiones -> dimensiones . LBRACKET expression RBRACKET

    SETOUT          reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    GETIN           reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    IF              reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    FOR             reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    WHILE           reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    CALL            reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    ID              reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    INT             reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    FLOAT           reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    NUMBER          reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    LPAREN          reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    MAIN            reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    END             reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    ELSE            reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    LOOP            reduce using rule 15 (var_declaration -> var_type ID dimensiones .)
    LBRACKET        shift and go to state 106


state 82

    (17) dimensiones -> LBRACKET . expression RBRACKET
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 107
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 83

    (64) call -> CALL LPAREN ID . RPAREN

    RPAREN          shift and go to state 108


state 84

    (48) simple_expression -> additive_expression checkop additive_expression .
    (56) additive_expression -> additive_expression . addop term
    (58) addop -> . PLUS
    (59) addop -> . MINUS

    SETOUT          reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    GETIN           reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    IF              reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    FOR             reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    WHILE           reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    CALL            reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    ID              reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    INT             reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    FLOAT           reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    NUMBER          reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    LPAREN          reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    MAIN            reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    RPAREN          reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    THEN            reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    ARROW           reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    DO              reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    RBRACKET        reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    END             reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    ELSE            reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    LOOP            reduce using rule 48 (simple_expression -> additive_expression checkop additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62

    addop                          shift and go to state 54

state 85

    (60) factor -> var .
    (43) var -> var . ID LBRACKET expression RBRACKET

  ! shift/reduce conflict for ID resolved as shift
    TIMES           reduce using rule 60 (factor -> var .)
    DIVIDE          reduce using rule 60 (factor -> var .)
    PLUS            reduce using rule 60 (factor -> var .)
    MINUS           reduce using rule 60 (factor -> var .)
    SETOUT          reduce using rule 60 (factor -> var .)
    GETIN           reduce using rule 60 (factor -> var .)
    IF              reduce using rule 60 (factor -> var .)
    FOR             reduce using rule 60 (factor -> var .)
    WHILE           reduce using rule 60 (factor -> var .)
    CALL            reduce using rule 60 (factor -> var .)
    INT             reduce using rule 60 (factor -> var .)
    FLOAT           reduce using rule 60 (factor -> var .)
    NUMBER          reduce using rule 60 (factor -> var .)
    LPAREN          reduce using rule 60 (factor -> var .)
    MAIN            reduce using rule 60 (factor -> var .)
    RPAREN          reduce using rule 60 (factor -> var .)
    THEN            reduce using rule 60 (factor -> var .)
    ARROW           reduce using rule 60 (factor -> var .)
    DO              reduce using rule 60 (factor -> var .)
    RBRACKET        reduce using rule 60 (factor -> var .)
    END             reduce using rule 60 (factor -> var .)
    ELSE            reduce using rule 60 (factor -> var .)
    LOOP            reduce using rule 60 (factor -> var .)
    LESS            reduce using rule 60 (factor -> var .)
    LESSEQUAL       reduce using rule 60 (factor -> var .)
    GREATER         reduce using rule 60 (factor -> var .)
    GREATEREQUAL    reduce using rule 60 (factor -> var .)
    DEQUAL          reduce using rule 60 (factor -> var .)
    DISTINT         reduce using rule 60 (factor -> var .)
    ID              shift and go to state 46

  ! ID              [ reduce using rule 60 (factor -> var .) ]


state 86

    (56) additive_expression -> additive_expression addop term .
    (65) term -> term . mulop factor
    (67) mulop -> . TIMES
    (68) mulop -> . DIVIDE

    LESS            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 56 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 56 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 56 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 56 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    SETOUT          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    GETIN           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 56 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 56 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    CALL            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    ID              reduce using rule 56 (additive_expression -> additive_expression addop term .)
    INT             reduce using rule 56 (additive_expression -> additive_expression addop term .)
    FLOAT           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    NUMBER          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    LPAREN          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    MAIN            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    THEN            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    ARROW           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    DO              reduce using rule 56 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 56 (additive_expression -> additive_expression addop term .)
    END             reduce using rule 56 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    LOOP            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65

    mulop                          shift and go to state 63

state 87

    (65) term -> term mulop factor .

    TIMES           reduce using rule 65 (term -> term mulop factor .)
    DIVIDE          reduce using rule 65 (term -> term mulop factor .)
    LESS            reduce using rule 65 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 65 (term -> term mulop factor .)
    GREATER         reduce using rule 65 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 65 (term -> term mulop factor .)
    DEQUAL          reduce using rule 65 (term -> term mulop factor .)
    DISTINT         reduce using rule 65 (term -> term mulop factor .)
    PLUS            reduce using rule 65 (term -> term mulop factor .)
    MINUS           reduce using rule 65 (term -> term mulop factor .)
    SETOUT          reduce using rule 65 (term -> term mulop factor .)
    GETIN           reduce using rule 65 (term -> term mulop factor .)
    IF              reduce using rule 65 (term -> term mulop factor .)
    FOR             reduce using rule 65 (term -> term mulop factor .)
    WHILE           reduce using rule 65 (term -> term mulop factor .)
    CALL            reduce using rule 65 (term -> term mulop factor .)
    ID              reduce using rule 65 (term -> term mulop factor .)
    INT             reduce using rule 65 (term -> term mulop factor .)
    FLOAT           reduce using rule 65 (term -> term mulop factor .)
    NUMBER          reduce using rule 65 (term -> term mulop factor .)
    LPAREN          reduce using rule 65 (term -> term mulop factor .)
    MAIN            reduce using rule 65 (term -> term mulop factor .)
    RPAREN          reduce using rule 65 (term -> term mulop factor .)
    THEN            reduce using rule 65 (term -> term mulop factor .)
    ARROW           reduce using rule 65 (term -> term mulop factor .)
    DO              reduce using rule 65 (term -> term mulop factor .)
    RBRACKET        reduce using rule 65 (term -> term mulop factor .)
    END             reduce using rule 65 (term -> term mulop factor .)
    ELSE            reduce using rule 65 (term -> term mulop factor .)
    LOOP            reduce using rule 65 (term -> term mulop factor .)


state 88

    (3) main_declaration -> MAIN COLON statements_nont . END
    (19) statements_nont -> statements_nont . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    END             shift and go to state 109
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 89

    (18) PROCESS_declaration -> PROCESS ID DO statements_nont . END
    (19) statements_nont -> statements_nont . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    END             shift and go to state 110
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 90

    (45) vardimen -> vardimen LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 111


state 91

    (46) vardimen -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    FOR             reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    CALL            reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    INT             reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    THEN            reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    DO              reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    END             reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 46 (vardimen -> LBRACKET expression RBRACKET .)


state 92

    (27) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES RPAREN
    (28) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES COMMA ENDL RPAREN

    QUOTES          shift and go to state 112


state 93

    (29) expression_nont -> SETOUT LPAREN var RPAREN .

    SETOUT          reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    GETIN           reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    IF              reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FOR             reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    WHILE           reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    CALL            reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ID              reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    INT             reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FLOAT           reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    NUMBER          reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LPAREN          reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    MAIN            reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    END             reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ELSE            reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LOOP            reduce using rule 29 (expression_nont -> SETOUT LPAREN var RPAREN .)


state 94

    (30) expression_nont -> SETOUT LPAREN var COMMA . ENDL RPAREN
    (31) expression_nont -> SETOUT LPAREN var COMMA . var COMMA RPAREN
    (32) expression_nont -> SETOUT LPAREN var COMMA . var COMMA ENDL RPAREN
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen

    ENDL            shift and go to state 114
    ID              shift and go to state 9

    var                            shift and go to state 113

state 95

    (43) var -> var ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 115


state 96

    (33) expression_nont -> GETIN LPAREN var RPAREN .

    SETOUT          reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    GETIN           reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    IF              reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    FOR             reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    WHILE           reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    CALL            reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    ID              reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    INT             reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    FLOAT           reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    NUMBER          reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    LPAREN          reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    MAIN            reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    END             reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    ELSE            reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)
    LOOP            reduce using rule 33 (expression_nont -> GETIN LPAREN var RPAREN .)


state 97

    (34) expression_nont -> GETIN LPAREN var COMMA . var RPAREN
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen

    ID              shift and go to state 9

    var                            shift and go to state 116

state 98

    (37) condition_nont -> IF expression THEN statements_nont . END
    (38) condition_nont -> IF expression THEN statements_nont . ELSE statements_nont END
    (19) statements_nont -> statements_nont . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    END             shift and go to state 117
    ELSE            shift and go to state 118
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 99

    (39) iteration_nont -> FOR expression ARROW expression . DO statements_nont LOOP

    DO              shift and go to state 119


state 100

    (40) iteration_nont -> WHILE expression DO statements_nont . LOOP
    (19) statements_nont -> statements_nont . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    LOOP            shift and go to state 120
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 101

    (8) var_declaration -> var_type ID COMMA ID .

    SETOUT          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    GETIN           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    IF              reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    FOR             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    WHILE           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    CALL            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    ID              reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    INT             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    FLOAT           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    NUMBER          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    LPAREN          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    MAIN            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    END             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    ELSE            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    LOOP            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)


state 102

    (9) var_declaration -> var_type ID EQUAL NUMBER .
    (61) factor -> NUMBER .

  ! reduce/reduce conflict for SETOUT resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for GETIN resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for CALL resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for ID resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for INT resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for MAIN resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for END resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for ELSE resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
  ! reduce/reduce conflict for LOOP resolved using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    SETOUT          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    GETIN           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    IF              reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    FOR             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    WHILE           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    CALL            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    ID              reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    INT             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    FLOAT           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    NUMBER          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    LPAREN          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    MAIN            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    END             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    ELSE            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    LOOP            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    TIMES           reduce using rule 61 (factor -> NUMBER .)
    DIVIDE          reduce using rule 61 (factor -> NUMBER .)
    LESS            reduce using rule 61 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 61 (factor -> NUMBER .)
    GREATER         reduce using rule 61 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 61 (factor -> NUMBER .)
    DEQUAL          reduce using rule 61 (factor -> NUMBER .)
    DISTINT         reduce using rule 61 (factor -> NUMBER .)
    PLUS            reduce using rule 61 (factor -> NUMBER .)
    MINUS           reduce using rule 61 (factor -> NUMBER .)

  ! SETOUT          [ reduce using rule 61 (factor -> NUMBER .) ]
  ! GETIN           [ reduce using rule 61 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 61 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 61 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 61 (factor -> NUMBER .) ]
  ! CALL            [ reduce using rule 61 (factor -> NUMBER .) ]
  ! ID              [ reduce using rule 61 (factor -> NUMBER .) ]
  ! INT             [ reduce using rule 61 (factor -> NUMBER .) ]
  ! FLOAT           [ reduce using rule 61 (factor -> NUMBER .) ]
  ! NUMBER          [ reduce using rule 61 (factor -> NUMBER .) ]
  ! LPAREN          [ reduce using rule 61 (factor -> NUMBER .) ]
  ! MAIN            [ reduce using rule 61 (factor -> NUMBER .) ]
  ! END             [ reduce using rule 61 (factor -> NUMBER .) ]
  ! ELSE            [ reduce using rule 61 (factor -> NUMBER .) ]
  ! LOOP            [ reduce using rule 61 (factor -> NUMBER .) ]


state 103

    (10) var_declaration -> var_type ID EQUAL NUMBER_FLOAT .

    SETOUT          reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    GETIN           reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    IF              reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    FOR             reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    WHILE           reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    CALL            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    ID              reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    INT             reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    FLOAT           reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    NUMBER          reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    LPAREN          reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    MAIN            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    END             reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    ELSE            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)
    LOOP            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER_FLOAT .)


state 104

    (11) var_declaration -> var_type ID EQUAL var .
    (43) var -> var . ID LBRACKET expression RBRACKET
    (60) factor -> var .

  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for SETOUT resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for GETIN resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for IF resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for CALL resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for MAIN resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for END resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
  ! reduce/reduce conflict for LOOP resolved using rule 11 (var_declaration -> var_type ID EQUAL var .)
    SETOUT          reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    GETIN           reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    IF              reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    FOR             reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    WHILE           reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    CALL            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    INT             reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    FLOAT           reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    NUMBER          reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    LPAREN          reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    MAIN            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    END             reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    ELSE            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    LOOP            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    ID              shift and go to state 46
    TIMES           reduce using rule 60 (factor -> var .)
    DIVIDE          reduce using rule 60 (factor -> var .)
    LESS            reduce using rule 60 (factor -> var .)
    LESSEQUAL       reduce using rule 60 (factor -> var .)
    GREATER         reduce using rule 60 (factor -> var .)
    GREATEREQUAL    reduce using rule 60 (factor -> var .)
    DEQUAL          reduce using rule 60 (factor -> var .)
    DISTINT         reduce using rule 60 (factor -> var .)
    PLUS            reduce using rule 60 (factor -> var .)
    MINUS           reduce using rule 60 (factor -> var .)

  ! ID              [ reduce using rule 11 (var_declaration -> var_type ID EQUAL var .) ]
  ! SETOUT          [ reduce using rule 60 (factor -> var .) ]
  ! GETIN           [ reduce using rule 60 (factor -> var .) ]
  ! IF              [ reduce using rule 60 (factor -> var .) ]
  ! FOR             [ reduce using rule 60 (factor -> var .) ]
  ! WHILE           [ reduce using rule 60 (factor -> var .) ]
  ! CALL            [ reduce using rule 60 (factor -> var .) ]
  ! ID              [ reduce using rule 60 (factor -> var .) ]
  ! INT             [ reduce using rule 60 (factor -> var .) ]
  ! FLOAT           [ reduce using rule 60 (factor -> var .) ]
  ! NUMBER          [ reduce using rule 60 (factor -> var .) ]
  ! LPAREN          [ reduce using rule 60 (factor -> var .) ]
  ! MAIN            [ reduce using rule 60 (factor -> var .) ]
  ! END             [ reduce using rule 60 (factor -> var .) ]
  ! ELSE            [ reduce using rule 60 (factor -> var .) ]
  ! LOOP            [ reduce using rule 60 (factor -> var .) ]


state 105

    (12) var_declaration -> var_type ID EQUAL simple_expression .

    SETOUT          reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    GETIN           reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    IF              reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    FOR             reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    WHILE           reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    CALL            reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    ID              reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    INT             reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    FLOAT           reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    NUMBER          reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    LPAREN          reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    MAIN            reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    END             reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    ELSE            reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)
    LOOP            reduce using rule 12 (var_declaration -> var_type ID EQUAL simple_expression .)


state 106

    (16) dimensiones -> dimensiones LBRACKET . expression RBRACKET
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 9
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 42
    LPAREN          shift and go to state 17

    expression                     shift and go to state 121
    var                            shift and go to state 41
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 107

    (17) dimensiones -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 122


state 108

    (64) call -> CALL LPAREN ID RPAREN .

    SETOUT          reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    GETIN           reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    IF              reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    FOR             reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    WHILE           reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    CALL            reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    ID              reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    INT             reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    FLOAT           reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    NUMBER          reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    LPAREN          reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    MAIN            reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    END             reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    ELSE            reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)
    LOOP            reduce using rule 64 (call -> CALL LPAREN ID RPAREN .)


state 109

    (3) main_declaration -> MAIN COLON statements_nont END .

    END             reduce using rule 3 (main_declaration -> MAIN COLON statements_nont END .)


state 110

    (18) PROCESS_declaration -> PROCESS ID DO statements_nont END .

    MAIN            reduce using rule 18 (PROCESS_declaration -> PROCESS ID DO statements_nont END .)


state 111

    (45) vardimen -> vardimen LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ID              reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LESS            reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    IF              reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    FOR             reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    CALL            reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    INT             reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    THEN            reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DO              reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    END             reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 45 (vardimen -> vardimen LBRACKET expression RBRACKET .)


state 112

    (27) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . RPAREN
    (28) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . COMMA ENDL RPAREN

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 124


state 113

    (31) expression_nont -> SETOUT LPAREN var COMMA var . COMMA RPAREN
    (32) expression_nont -> SETOUT LPAREN var COMMA var . COMMA ENDL RPAREN
    (43) var -> var . ID LBRACKET expression RBRACKET

    COMMA           shift and go to state 125
    ID              shift and go to state 46


state 114

    (30) expression_nont -> SETOUT LPAREN var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 126


state 115

    (43) var -> var ID LBRACKET expression RBRACKET .

    PLUSPLUS        reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    CALL            reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    INT             reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    END             reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 43 (var -> var ID LBRACKET expression RBRACKET .)


state 116

    (34) expression_nont -> GETIN LPAREN var COMMA var . RPAREN
    (43) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 127
    ID              shift and go to state 46


state 117

    (37) condition_nont -> IF expression THEN statements_nont END .

    SETOUT          reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    GETIN           reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    IF              reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    FOR             reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    WHILE           reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    CALL            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    ID              reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    INT             reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    FLOAT           reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    NUMBER          reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    LPAREN          reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    MAIN            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    END             reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    ELSE            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)
    LOOP            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont END .)


state 118

    (38) condition_nont -> IF expression THEN statements_nont ELSE . statements_nont END
    (19) statements_nont -> . statements_nont statement
    (20) statements_nont -> . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statements_nont                shift and go to state 128
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 119

    (39) iteration_nont -> FOR expression ARROW expression DO . statements_nont LOOP
    (19) statements_nont -> . statements_nont statement
    (20) statements_nont -> . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statements_nont                shift and go to state 129
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 120

    (40) iteration_nont -> WHILE expression DO statements_nont LOOP .

    SETOUT          reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    GETIN           reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    IF              reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    FOR             reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    WHILE           reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    CALL            reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    ID              reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    INT             reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    FLOAT           reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    NUMBER          reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    LPAREN          reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    MAIN            reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    END             reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    ELSE            reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    LOOP            reduce using rule 40 (iteration_nont -> WHILE expression DO statements_nont LOOP .)


state 121

    (16) dimensiones -> dimensiones LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 130


state 122

    (17) dimensiones -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    FOR             reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    CALL            reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    INT             reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    END             reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 17 (dimensiones -> LBRACKET expression RBRACKET .)


state 123

    (27) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .

    SETOUT          reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    GETIN           reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    IF              reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FOR             reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    WHILE           reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    CALL            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ID              reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    INT             reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FLOAT           reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    NUMBER          reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LPAREN          reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    MAIN            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    END             reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ELSE            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LOOP            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)


state 124

    (28) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA . ENDL RPAREN

    ENDL            shift and go to state 131


state 125

    (31) expression_nont -> SETOUT LPAREN var COMMA var COMMA . RPAREN
    (32) expression_nont -> SETOUT LPAREN var COMMA var COMMA . ENDL RPAREN

    RPAREN          shift and go to state 132
    ENDL            shift and go to state 133


state 126

    (30) expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .

    SETOUT          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    IF              reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FOR             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    CALL            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ID              reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    INT             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    MAIN            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    END             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)


state 127

    (34) expression_nont -> GETIN LPAREN var COMMA var RPAREN .

    SETOUT          reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    GETIN           reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    IF              reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FOR             reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    WHILE           reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    CALL            reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ID              reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    INT             reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FLOAT           reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    NUMBER          reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LPAREN          reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    MAIN            reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    END             reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ELSE            reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LOOP            reduce using rule 34 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)


state 128

    (38) condition_nont -> IF expression THEN statements_nont ELSE statements_nont . END
    (19) statements_nont -> statements_nont . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    END             shift and go to state 134
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 129

    (39) iteration_nont -> FOR expression ARROW expression DO statements_nont . LOOP
    (19) statements_nont -> statements_nont . statement
    (21) statement -> . expression_nont
    (22) statement -> . condition_nont
    (23) statement -> . iteration_nont
    (24) statement -> . var_declaration
    (25) statement -> . call
    (26) expression_nont -> . expression
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (28) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (32) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (33) expression_nont -> . GETIN LPAREN var RPAREN
    (34) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (35) expression_nont -> . var PLUSPLUS
    (36) expression_nont -> . var MINUSMINUS
    (37) condition_nont -> . IF expression THEN statements_nont END
    (38) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (39) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (40) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL NUMBER_FLOAT
    (11) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID EQUAL simple_expression
    (15) var_declaration -> . var_type ID dimensiones
    (64) call -> . CALL LPAREN ID RPAREN
    (41) expression -> . var EQUAL expression
    (47) expression -> . simple_expression
    (42) var -> . ID
    (43) var -> . var ID LBRACKET expression RBRACKET
    (44) var -> . ID vardimen
    (13) var_type -> . INT
    (14) var_type -> . FLOAT
    (48) simple_expression -> . additive_expression checkop additive_expression
    (49) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (65) term -> . term mulop factor
    (66) term -> . factor
    (60) factor -> . var
    (61) factor -> . NUMBER
    (62) factor -> . FLOAT
    (63) factor -> . LPAREN expression RPAREN

    LOOP            shift and go to state 135
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 26
    ID              shift and go to state 9
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 17

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 130

    (16) dimensiones -> dimensiones LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    IF              reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    FOR             reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    CALL            reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    ID              reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    INT             reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    END             reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 16 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)


state 131

    (28) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL . RPAREN

    RPAREN          shift and go to state 136


state 132

    (31) expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .

    SETOUT          reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    GETIN           reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    IF              reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FOR             reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    WHILE           reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    CALL            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ID              reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    INT             reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FLOAT           reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    NUMBER          reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LPAREN          reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    MAIN            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    END             reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ELSE            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LOOP            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)


state 133

    (32) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 137


state 134

    (38) condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .

    SETOUT          reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    GETIN           reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    IF              reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    FOR             reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    WHILE           reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    CALL            reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    ID              reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    INT             reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    FLOAT           reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    NUMBER          reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    LPAREN          reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    MAIN            reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    END             reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    ELSE            reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    LOOP            reduce using rule 38 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)


state 135

    (39) iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .

    SETOUT          reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    GETIN           reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    IF              reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    FOR             reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    WHILE           reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    CALL            reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    ID              reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    INT             reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    FLOAT           reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    NUMBER          reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    LPAREN          reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    MAIN            reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    END             reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    ELSE            reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    LOOP            reduce using rule 39 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)


state 136

    (28) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .

    SETOUT          reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    GETIN           reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    IF              reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FOR             reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    WHILE           reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    CALL            reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ID              reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    INT             reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    MAIN            reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    END             reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ELSE            reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LOOP            reduce using rule 28 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)


state 137

    (32) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .

    SETOUT          reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    IF              reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FOR             reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    CALL            reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ID              reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    INT             reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    MAIN            reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    END             reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 32 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 18 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: reduce/reduce conflict in state 28 resolved using rule (var_type -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 28
WARNING: reduce/reduce conflict in state 102 resolved using rule (var_declaration -> var_type ID EQUAL NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 102
WARNING: reduce/reduce conflict in state 104 resolved using rule (var_declaration -> var_type ID EQUAL var)
WARNING: rejected rule (factor -> var) in state 104
