Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    LOOPDOFLOAT
    FOR
    PLUSPLUS
    MINUSMINUS
    TIMES
    DIVIDE
    LESS
    LESSEQUAL
    GREATER
    GREATEREQUAL
    DEQUAL
    DISTINT

Grammar

Rule 0     S' -> program
<<<<<<< HEAD
Rule 1     program -> START program_start END
Rule 2     program_start -> program_sequence main_declaration
Rule 3     program_sequence -> program_sequence declaration
Rule 4     program_sequence -> empty
Rule 5     declaration -> procces_declaration
Rule 6     declaration -> var_declaration
Rule 7     var_declaration -> var_type ID
Rule 8     var_declaration -> var_type ID COMMA ID
Rule 9     var_declaration -> var_type ID EQUAL NUMBER
Rule 10    var_declaration -> var_type ID EQUAL var
Rule 11    boolean -> TRUE
Rule 12    boolean -> FALSE
Rule 13    var_type -> INT
Rule 14    var_type -> FLOAT
Rule 15    var_declaration -> var_type ID LBRACKET NUMBER RBRACKET
Rule 16    main_declaration -> MAIN ID COLON statements_nont END
Rule 17    procces_declaration -> PROCCES ID COLON statements_nont END
Rule 18    statements_nont -> statement
Rule 19    statements_nont -> statements_nont statement
Rule 20    statement -> expression
Rule 21    statement -> condition_nont
Rule 22    statement -> iteration_nont
Rule 23    statement -> var_declaration
Rule 24    expression -> primitive
Rule 25    expression -> STRING
Rule 26    expression -> ID
Rule 27    boolean -> expression EQ expression
Rule 28    boolean -> expression NEQ expression
Rule 29    boolean -> expression GT expression
Rule 30    boolean -> expression GTE expression
Rule 31    boolean -> expression LT expression
Rule 32    boolean -> expression LTE expression
Rule 33    boolean -> expression AND expression
Rule 34    boolean -> expression OR expression
Rule 35    expression -> expression PLUS expression
Rule 36    expression -> expression MINUS expression
Rule 37    expression -> expression MUL expression
Rule 38    expression -> expression DIV expression
Rule 39    expression -> expression EXP expression
Rule 40    expression -> expression MOD expression
Rule 41    statement -> SETOUT LPAREN QUOTES ID QUOTES RPAREN
Rule 42    statement -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
Rule 43    statement -> SETOUT LPAREN var RPAREN
Rule 44    statement -> SETOUT LPAREN var COMMA ENDL RPAREN
Rule 45    statement -> SETOUT LPAREN var COMMA var COMMA RPAREN
Rule 46    statement -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
Rule 47    expression -> GETIN LPAREN var RPAREN
Rule 48    expression -> GETIN LPAREN var COMMA var RPAREN
Rule 49    expression -> ID EQUALS assignable STMT_END
Rule 50    expression -> expression IN expression
Rule 51    expression -> expression NOT IN expression
Rule 52    expression -> LBRACKET arguments RBRACKET
Rule 53    statement -> ID LBRACKET expression RBRACKET EQUALS expression STMT_END
Rule 54    expression -> ID LBRACKET expression RBRACKET
Rule 55    statement -> ID PLUS_EQ expresfsion STMT_END
Rule 56    statement -> ID MINUS_EQ expression STMT_END
Rule 57    statement -> ID MUL_EQ expression STMT_END
Rule 58    statement -> ID DIV_EQ expression STMT_END
Rule 59    statement -> ID EXP_EQ expression STMT_END
Rule 60    statement -> ID MOD_EQ expression STMT_END
Rule 61    expression -> ID DOUBLE_PLUS
Rule 62    expression -> ID DOUBLE_MINUS
Rule 63    expression -> MINUS expression
Rule 64    expression -> PLUS expression
Rule 65    expression -> NOT expression
Rule 66    condition_nont -> IF expression THEN statement END
Rule 67    condition_nont -> IF expression THEN statement ELSE statement END
Rule 68    iteration_nont -> WHILE expression DO statement LOOP
Rule 69    expression -> ID LPAREN arguments RPAREN
Rule 70    statement -> ID LPAREN arguments RPAREN STMT_END
Rule 71    expression -> LPAREN expression RPAREN
Rule 72    var -> ID
Rule 73    var -> ID LBRACKET expression RBRACKET

Terminals, with rules where they appear

COLON                : 16 17
COMMA                : 8 42 44 45 45 46 46 48
DEQUAL               : 
DISTINT              : 
DIVIDE               : 
DO                   : 68
ELSE                 : 67
END                  : 1 16 17 66 67
ENDL                 : 42 44 46
EQUAL                : 9 10
FOR                  : 
GETIN                : 47 48
GREATER              : 
GREATEREQUAL         : 
ID                   : 7 8 8 9 10 15 16 17 26 41 42 49 53 54 55 56 57 58 59 60 61 62 69 70 72 73
IF                   : 66 67
INT                  : 13
LBRACKET             : 15 52 53 54 73
LESS                 : 
LESSEQUAL            : 
LOOP                 : 68
LOOPDOFLOAT          : 
LPAREN               : 41 42 43 44 45 46 47 48 69 70 71
MAIN                 : 16
MINUS                : 36 63
MINUSMINUS           : 
NUMBER               : 9 15
PLUS                 : 35 64
PLUSPLUS             : 
PROCCES              : 17
QUOTES               : 41 41 42 42
RBRACKET             : 15 52 53 54 73
RPAREN               : 41 42 43 44 45 46 47 48 69 70 71
SETOUT               : 41 42 43 44 45 46
START                : 1
THEN                 : 66 67
TIMES                : 
WHILE                : 68
empty                : 4
=======
Rule 1     program -> START program_main END
Rule 2     program_main -> program_sequence main_declaration
Rule 3     main_declaration -> MAIN COLON statements_nont END
Rule 4     program_sequence -> program_sequence
Rule 5     program_sequence -> statements_nont
Rule 6     program_sequence -> PROCESS_declaration
Rule 7     program_sequence -> call
Rule 8     var_declaration -> var_type ID
Rule 9     var_declaration -> var_type ID COMMA ID
Rule 10    var_declaration -> var_type ID EQUAL NUMBER
Rule 11    var_declaration -> var_type ID EQUAL var
Rule 12    var_type -> INT
Rule 13    var_type -> FLOAT
Rule 14    var_declaration -> var_type ID dimensiones
Rule 15    dimensiones -> dimensiones LBRACKET expression RBRACKET
Rule 16    dimensiones -> LBRACKET expression RBRACKET
Rule 17    PROCESS_declaration -> PROCESS ID DO statements_nont END
Rule 18    statements_nont -> statements_nont statement
Rule 19    statements_nont -> statement
Rule 20    statement -> expression_nont
Rule 21    statement -> condition_nont
Rule 22    statement -> iteration_nont
Rule 23    statement -> var_declaration
Rule 24    statement -> call
Rule 25    expression_nont -> expression
Rule 26    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN
Rule 27    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
Rule 28    expression_nont -> SETOUT LPAREN var RPAREN
Rule 29    expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN
Rule 30    expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN
Rule 31    expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
Rule 32    expression_nont -> GETIN LPAREN var RPAREN
Rule 33    expression_nont -> GETIN LPAREN var COMMA var RPAREN
Rule 34    expression_nont -> ID PLUSPLUS
Rule 35    expression_nont -> ID MINUSMINUS
Rule 36    condition_nont -> IF expression THEN statements_nont END
Rule 37    condition_nont -> IF expression THEN statements_nont ELSE statements_nont END
Rule 38    iteration_nont -> WHILE expression DO statements_nont LOOP
Rule 39    iteration_nont -> FOR var TO var DO statements_nont LOOP
Rule 40    expression -> var EQUAL expression
Rule 41    var -> ID
Rule 42    var -> var ID LBRACKET expression RBRACKET
Rule 43    var -> ID vardimen
Rule 44    vardimen -> vardimen LBRACKET expression RBRACKET
Rule 45    vardimen -> LBRACKET expression RBRACKET
Rule 46    expression -> simple_expression
Rule 47    simple_expression -> additive_expression checkop additive_expression
Rule 48    simple_expression -> additive_expression
Rule 49    checkop -> LESS
Rule 50    checkop -> LESSEQUAL
Rule 51    checkop -> GREATER
Rule 52    checkop -> GREATEREQUAL
Rule 53    checkop -> DEQUAL
Rule 54    checkop -> DISTINT
Rule 55    additive_expression -> additive_expression addop term
Rule 56    additive_expression -> term
Rule 57    addop -> PLUS
Rule 58    addop -> MINUS
Rule 59    factor -> LPAREN expression RPAREN
Rule 60    factor -> var
Rule 61    factor -> NUMBER
Rule 62    call -> CALL LPAREN ID RPAREN
Rule 63    term -> term mulop factor
Rule 64    term -> factor
Rule 65    mulop -> TIMES
Rule 66    mulop -> DIVIDE

Terminals, with rules where they appear

CALL                 : 62
COLON                : 3
COMMA                : 9 27 29 30 30 31 31 33
DEQUAL               : 53
DISTINT              : 54
DIVIDE               : 66
DO                   : 17 38 39
ELSE                 : 37
END                  : 1 3 17 36 37
ENDL                 : 27 29 31
EQUAL                : 10 11 40
FLOAT                : 13
FOR                  : 39
GETIN                : 32 33
GREATER              : 51
GREATEREQUAL         : 52
ID                   : 8 9 9 10 11 14 17 26 27 34 35 41 42 43 62
IF                   : 36 37
INT                  : 12
LBRACKET             : 15 16 42 44 45
LESS                 : 49
LESSEQUAL            : 50
LOOP                 : 38 39
LPAREN               : 26 27 28 29 30 31 32 33 59 62
MAIN                 : 3
MINUS                : 58
MINUSMINUS           : 35
NUMBER               : 10 61
PLUS                 : 57
PLUSPLUS             : 34
PROCESS              : 17
QUOTES               : 26 26 27 27
RBRACKET             : 15 16 42 44 45
RPAREN               : 26 27 28 29 30 31 32 33 59 62
SETOUT               : 26 27 28 29 30 31
START                : 1
THEN                 : 36 37
TIMES                : 65
TO                   : 39
WHILE                : 38
>>>>>>> tempowork
error                : 

Nonterminals, with rules where they appear

<<<<<<< HEAD
AND                  : 33
DIV                  : 38
DIV_EQ               : 58
DOUBLE_MINUS         : 62
DOUBLE_PLUS          : 61
EQ                   : 27
EQUALS               : 49 53
EXP                  : 39
EXP_EQ               : 59
FALSE                : 12
FLOAT                : 14
GT                   : 29
GTE                  : 30
IN                   : 50 51
LT                   : 31
LTE                  : 32
MINUS_EQ             : 56
MOD                  : 40
MOD_EQ               : 60
MUL                  : 37
MUL_EQ               : 57
NEQ                  : 28
NOT                  : 51 65
OR                   : 34
PLUS_EQ              : 55
STMT_END             : 49 53 55 56 57 58 59 60 70
STRING               : 25
TRUE                 : 11
arguments            : 52 69 70
assignable           : 49
boolean              : 
condition_nont       : 21
declaration          : 3
expresfsion          : 55
expression           : 20 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 50 50 51 51 53 53 54 56 57 58 59 60 63 64 65 66 67 68 71 73
iteration_nont       : 22
main_declaration     : 2
primitive            : 24
procces_declaration  : 5
program              : 0
program_sequence     : 2 3
program_start        : 1
statement            : 18 19 66 67 67 68
statements_nont      : 16 17 19
var                  : 10 43 44 45 45 46 46 47 48 48
var_declaration      : 6 23
var_type             : 7 8 9 10 15

=======
PROCESS_declaration  : 6
additive_expression  : 47 47 48 55
addop                : 55
call                 : 7 24
checkop              : 47
condition_nont       : 21
dimensiones          : 14 15
expression           : 15 16 25 36 37 38 40 42 44 45 59
expression_nont      : 20
factor               : 63 64
iteration_nont       : 22
main_declaration     : 2
mulop                : 63
program              : 0
program_main         : 1
program_sequence     : 2 4
simple_expression    : 46
statement            : 18 19
statements_nont      : 3 5 17 18 36 37 37 38 39
term                 : 55 56 63
var                  : 11 28 29 30 30 31 31 32 33 33 39 39 40 42 60
var_declaration      : 23
var_type             : 8 9 10 11 14
vardimen             : 43 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START program_main END

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . program_main END
    (2) program_main -> . program_sequence main_declaration
    (4) program_sequence -> . program_sequence
    (5) program_sequence -> . statements_nont
    (6) program_sequence -> . PROCESS_declaration
    (7) program_sequence -> . call
    (18) statements_nont -> . statements_nont statement
    (19) statements_nont -> . statement
    (17) PROCESS_declaration -> . PROCESS ID DO statements_nont END
    (62) call -> . CALL LPAREN ID RPAREN
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    PROCESS         shift and go to state 9
    CALL            shift and go to state 11
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    program_main                   shift and go to state 3
    program_sequence               shift and go to state 4
    statements_nont                shift and go to state 5
    PROCESS_declaration            shift and go to state 6
    call                           shift and go to state 7
    statement                      shift and go to state 8
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    expression                     shift and go to state 17
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 3

    (1) program -> START program_main . END

    END             shift and go to state 32


state 4

    (2) program_main -> program_sequence . main_declaration
    (4) program_sequence -> program_sequence .
    (3) main_declaration -> . MAIN COLON statements_nont END

  ! shift/reduce conflict for MAIN resolved as shift
    MAIN            shift and go to state 34

  ! MAIN            [ reduce using rule 4 (program_sequence -> program_sequence .) ]

    main_declaration               shift and go to state 33

state 5

    (5) program_sequence -> statements_nont .
    (18) statements_nont -> statements_nont . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    MAIN            reduce using rule 5 (program_sequence -> statements_nont .)
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    statement                      shift and go to state 35
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    expression                     shift and go to state 17
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 6

    (6) program_sequence -> PROCESS_declaration .

    MAIN            reduce using rule 6 (program_sequence -> PROCESS_declaration .)


state 7

    (7) program_sequence -> call .
    (24) statement -> call .

  ! reduce/reduce conflict for MAIN resolved using rule 7 (program_sequence -> call .)
    MAIN            reduce using rule 7 (program_sequence -> call .)
    SETOUT          reduce using rule 24 (statement -> call .)
    GETIN           reduce using rule 24 (statement -> call .)
    ID              reduce using rule 24 (statement -> call .)
    IF              reduce using rule 24 (statement -> call .)
    WHILE           reduce using rule 24 (statement -> call .)
    FOR             reduce using rule 24 (statement -> call .)
    CALL            reduce using rule 24 (statement -> call .)
    INT             reduce using rule 24 (statement -> call .)
    FLOAT           reduce using rule 24 (statement -> call .)
    LPAREN          reduce using rule 24 (statement -> call .)
    NUMBER          reduce using rule 24 (statement -> call .)

  ! MAIN            [ reduce using rule 24 (statement -> call .) ]


state 8

    (19) statements_nont -> statement .

    SETOUT          reduce using rule 19 (statements_nont -> statement .)
    GETIN           reduce using rule 19 (statements_nont -> statement .)
    ID              reduce using rule 19 (statements_nont -> statement .)
    IF              reduce using rule 19 (statements_nont -> statement .)
    WHILE           reduce using rule 19 (statements_nont -> statement .)
    FOR             reduce using rule 19 (statements_nont -> statement .)
    CALL            reduce using rule 19 (statements_nont -> statement .)
    INT             reduce using rule 19 (statements_nont -> statement .)
    FLOAT           reduce using rule 19 (statements_nont -> statement .)
    LPAREN          reduce using rule 19 (statements_nont -> statement .)
    NUMBER          reduce using rule 19 (statements_nont -> statement .)
    MAIN            reduce using rule 19 (statements_nont -> statement .)
    END             reduce using rule 19 (statements_nont -> statement .)
    ELSE            reduce using rule 19 (statements_nont -> statement .)
    LOOP            reduce using rule 19 (statements_nont -> statement .)


state 9

    (17) PROCESS_declaration -> PROCESS . ID DO statements_nont END

    ID              shift and go to state 37


state 10

    (34) expression_nont -> ID . PLUSPLUS
    (35) expression_nont -> ID . MINUSMINUS
    (41) var -> ID .
    (43) var -> ID . vardimen
    (44) vardimen -> . vardimen LBRACKET expression RBRACKET
    (45) vardimen -> . LBRACKET expression RBRACKET

    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    EQUAL           reduce using rule 41 (var -> ID .)
    ID              reduce using rule 41 (var -> ID .)
    TIMES           reduce using rule 41 (var -> ID .)
    DIVIDE          reduce using rule 41 (var -> ID .)
    LESS            reduce using rule 41 (var -> ID .)
    LESSEQUAL       reduce using rule 41 (var -> ID .)
    GREATER         reduce using rule 41 (var -> ID .)
    GREATEREQUAL    reduce using rule 41 (var -> ID .)
    DEQUAL          reduce using rule 41 (var -> ID .)
    DISTINT         reduce using rule 41 (var -> ID .)
    PLUS            reduce using rule 41 (var -> ID .)
    MINUS           reduce using rule 41 (var -> ID .)
    SETOUT          reduce using rule 41 (var -> ID .)
    GETIN           reduce using rule 41 (var -> ID .)
    IF              reduce using rule 41 (var -> ID .)
    WHILE           reduce using rule 41 (var -> ID .)
    FOR             reduce using rule 41 (var -> ID .)
    CALL            reduce using rule 41 (var -> ID .)
    INT             reduce using rule 41 (var -> ID .)
    FLOAT           reduce using rule 41 (var -> ID .)
    LPAREN          reduce using rule 41 (var -> ID .)
    NUMBER          reduce using rule 41 (var -> ID .)
    MAIN            reduce using rule 41 (var -> ID .)
    END             reduce using rule 41 (var -> ID .)
    ELSE            reduce using rule 41 (var -> ID .)
    LOOP            reduce using rule 41 (var -> ID .)
    LBRACKET        shift and go to state 41

    vardimen                       shift and go to state 40

state 11

    (62) call -> CALL . LPAREN ID RPAREN

    LPAREN          shift and go to state 42


state 12

    (59) factor -> LPAREN . expression RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 43
    var                            shift and go to state 19
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 13

    (20) statement -> expression_nont .

    SETOUT          reduce using rule 20 (statement -> expression_nont .)
    GETIN           reduce using rule 20 (statement -> expression_nont .)
    ID              reduce using rule 20 (statement -> expression_nont .)
    IF              reduce using rule 20 (statement -> expression_nont .)
    WHILE           reduce using rule 20 (statement -> expression_nont .)
    FOR             reduce using rule 20 (statement -> expression_nont .)
    CALL            reduce using rule 20 (statement -> expression_nont .)
    INT             reduce using rule 20 (statement -> expression_nont .)
    FLOAT           reduce using rule 20 (statement -> expression_nont .)
    LPAREN          reduce using rule 20 (statement -> expression_nont .)
    NUMBER          reduce using rule 20 (statement -> expression_nont .)
    MAIN            reduce using rule 20 (statement -> expression_nont .)
    END             reduce using rule 20 (statement -> expression_nont .)
    ELSE            reduce using rule 20 (statement -> expression_nont .)
    LOOP            reduce using rule 20 (statement -> expression_nont .)


state 14

    (21) statement -> condition_nont .

    SETOUT          reduce using rule 21 (statement -> condition_nont .)
    GETIN           reduce using rule 21 (statement -> condition_nont .)
    ID              reduce using rule 21 (statement -> condition_nont .)
    IF              reduce using rule 21 (statement -> condition_nont .)
    WHILE           reduce using rule 21 (statement -> condition_nont .)
    FOR             reduce using rule 21 (statement -> condition_nont .)
    CALL            reduce using rule 21 (statement -> condition_nont .)
    INT             reduce using rule 21 (statement -> condition_nont .)
    FLOAT           reduce using rule 21 (statement -> condition_nont .)
    LPAREN          reduce using rule 21 (statement -> condition_nont .)
    NUMBER          reduce using rule 21 (statement -> condition_nont .)
    MAIN            reduce using rule 21 (statement -> condition_nont .)
    END             reduce using rule 21 (statement -> condition_nont .)
    ELSE            reduce using rule 21 (statement -> condition_nont .)
    LOOP            reduce using rule 21 (statement -> condition_nont .)


state 15

    (22) statement -> iteration_nont .

    SETOUT          reduce using rule 22 (statement -> iteration_nont .)
    GETIN           reduce using rule 22 (statement -> iteration_nont .)
    ID              reduce using rule 22 (statement -> iteration_nont .)
    IF              reduce using rule 22 (statement -> iteration_nont .)
    WHILE           reduce using rule 22 (statement -> iteration_nont .)
    FOR             reduce using rule 22 (statement -> iteration_nont .)
    CALL            reduce using rule 22 (statement -> iteration_nont .)
    INT             reduce using rule 22 (statement -> iteration_nont .)
    FLOAT           reduce using rule 22 (statement -> iteration_nont .)
    LPAREN          reduce using rule 22 (statement -> iteration_nont .)
    NUMBER          reduce using rule 22 (statement -> iteration_nont .)
    MAIN            reduce using rule 22 (statement -> iteration_nont .)
    END             reduce using rule 22 (statement -> iteration_nont .)
    ELSE            reduce using rule 22 (statement -> iteration_nont .)
    LOOP            reduce using rule 22 (statement -> iteration_nont .)


state 16

    (23) statement -> var_declaration .

    SETOUT          reduce using rule 23 (statement -> var_declaration .)
    GETIN           reduce using rule 23 (statement -> var_declaration .)
    ID              reduce using rule 23 (statement -> var_declaration .)
    IF              reduce using rule 23 (statement -> var_declaration .)
    WHILE           reduce using rule 23 (statement -> var_declaration .)
    FOR             reduce using rule 23 (statement -> var_declaration .)
    CALL            reduce using rule 23 (statement -> var_declaration .)
    INT             reduce using rule 23 (statement -> var_declaration .)
    FLOAT           reduce using rule 23 (statement -> var_declaration .)
    LPAREN          reduce using rule 23 (statement -> var_declaration .)
    NUMBER          reduce using rule 23 (statement -> var_declaration .)
    MAIN            reduce using rule 23 (statement -> var_declaration .)
    END             reduce using rule 23 (statement -> var_declaration .)
    ELSE            reduce using rule 23 (statement -> var_declaration .)
    LOOP            reduce using rule 23 (statement -> var_declaration .)


state 17

    (25) expression_nont -> expression .

    SETOUT          reduce using rule 25 (expression_nont -> expression .)
    GETIN           reduce using rule 25 (expression_nont -> expression .)
    ID              reduce using rule 25 (expression_nont -> expression .)
    IF              reduce using rule 25 (expression_nont -> expression .)
    WHILE           reduce using rule 25 (expression_nont -> expression .)
    FOR             reduce using rule 25 (expression_nont -> expression .)
    CALL            reduce using rule 25 (expression_nont -> expression .)
    INT             reduce using rule 25 (expression_nont -> expression .)
    FLOAT           reduce using rule 25 (expression_nont -> expression .)
    LPAREN          reduce using rule 25 (expression_nont -> expression .)
    NUMBER          reduce using rule 25 (expression_nont -> expression .)
    MAIN            reduce using rule 25 (expression_nont -> expression .)
    END             reduce using rule 25 (expression_nont -> expression .)
    ELSE            reduce using rule 25 (expression_nont -> expression .)
    LOOP            reduce using rule 25 (expression_nont -> expression .)


state 18

    (26) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> SETOUT . LPAREN var RPAREN
    (29) expression_nont -> SETOUT . LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> SETOUT . LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> SETOUT . LPAREN var COMMA var COMMA ENDL RPAREN

    LPAREN          shift and go to state 45


state 19

    (40) expression -> var . EQUAL expression
    (42) var -> var . ID LBRACKET expression RBRACKET
    (60) factor -> var .

  ! shift/reduce conflict for ID resolved as shift
    EQUAL           shift and go to state 46
    ID              shift and go to state 47
    TIMES           reduce using rule 60 (factor -> var .)
    DIVIDE          reduce using rule 60 (factor -> var .)
    LESS            reduce using rule 60 (factor -> var .)
    LESSEQUAL       reduce using rule 60 (factor -> var .)
    GREATER         reduce using rule 60 (factor -> var .)
    GREATEREQUAL    reduce using rule 60 (factor -> var .)
    DEQUAL          reduce using rule 60 (factor -> var .)
    DISTINT         reduce using rule 60 (factor -> var .)
    PLUS            reduce using rule 60 (factor -> var .)
    MINUS           reduce using rule 60 (factor -> var .)
    SETOUT          reduce using rule 60 (factor -> var .)
    GETIN           reduce using rule 60 (factor -> var .)
    IF              reduce using rule 60 (factor -> var .)
    WHILE           reduce using rule 60 (factor -> var .)
    FOR             reduce using rule 60 (factor -> var .)
    CALL            reduce using rule 60 (factor -> var .)
    INT             reduce using rule 60 (factor -> var .)
    FLOAT           reduce using rule 60 (factor -> var .)
    LPAREN          reduce using rule 60 (factor -> var .)
    NUMBER          reduce using rule 60 (factor -> var .)
    MAIN            reduce using rule 60 (factor -> var .)
    RPAREN          reduce using rule 60 (factor -> var .)
    THEN            reduce using rule 60 (factor -> var .)
    DO              reduce using rule 60 (factor -> var .)
    RBRACKET        reduce using rule 60 (factor -> var .)
    END             reduce using rule 60 (factor -> var .)
    ELSE            reduce using rule 60 (factor -> var .)
    LOOP            reduce using rule 60 (factor -> var .)

  ! ID              [ reduce using rule 60 (factor -> var .) ]


state 20

    (32) expression_nont -> GETIN . LPAREN var RPAREN
    (33) expression_nont -> GETIN . LPAREN var COMMA var RPAREN

    LPAREN          shift and go to state 48


state 21

    (36) condition_nont -> IF . expression THEN statements_nont END
    (37) condition_nont -> IF . expression THEN statements_nont ELSE statements_nont END
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 49
    var                            shift and go to state 19
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 22

    (38) iteration_nont -> WHILE . expression DO statements_nont LOOP
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 50
    var                            shift and go to state 19
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 23

    (39) iteration_nont -> FOR . var TO var DO statements_nont LOOP
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    ID              shift and go to state 44

    var                            shift and go to state 51

state 24

    (8) var_declaration -> var_type . ID
    (9) var_declaration -> var_type . ID COMMA ID
    (10) var_declaration -> var_type . ID EQUAL NUMBER
    (11) var_declaration -> var_type . ID EQUAL var
    (14) var_declaration -> var_type . ID dimensiones

    ID              shift and go to state 52


state 25

    (61) factor -> NUMBER .

    TIMES           reduce using rule 61 (factor -> NUMBER .)
    DIVIDE          reduce using rule 61 (factor -> NUMBER .)
    LESS            reduce using rule 61 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 61 (factor -> NUMBER .)
    GREATER         reduce using rule 61 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 61 (factor -> NUMBER .)
    DEQUAL          reduce using rule 61 (factor -> NUMBER .)
    DISTINT         reduce using rule 61 (factor -> NUMBER .)
    PLUS            reduce using rule 61 (factor -> NUMBER .)
    MINUS           reduce using rule 61 (factor -> NUMBER .)
    SETOUT          reduce using rule 61 (factor -> NUMBER .)
    GETIN           reduce using rule 61 (factor -> NUMBER .)
    ID              reduce using rule 61 (factor -> NUMBER .)
    IF              reduce using rule 61 (factor -> NUMBER .)
    WHILE           reduce using rule 61 (factor -> NUMBER .)
    FOR             reduce using rule 61 (factor -> NUMBER .)
    CALL            reduce using rule 61 (factor -> NUMBER .)
    INT             reduce using rule 61 (factor -> NUMBER .)
    FLOAT           reduce using rule 61 (factor -> NUMBER .)
    LPAREN          reduce using rule 61 (factor -> NUMBER .)
    NUMBER          reduce using rule 61 (factor -> NUMBER .)
    MAIN            reduce using rule 61 (factor -> NUMBER .)
    RPAREN          reduce using rule 61 (factor -> NUMBER .)
    THEN            reduce using rule 61 (factor -> NUMBER .)
    DO              reduce using rule 61 (factor -> NUMBER .)
    RBRACKET        reduce using rule 61 (factor -> NUMBER .)
    END             reduce using rule 61 (factor -> NUMBER .)
    ELSE            reduce using rule 61 (factor -> NUMBER .)
    LOOP            reduce using rule 61 (factor -> NUMBER .)


state 26

    (46) expression -> simple_expression .

    SETOUT          reduce using rule 46 (expression -> simple_expression .)
    GETIN           reduce using rule 46 (expression -> simple_expression .)
    ID              reduce using rule 46 (expression -> simple_expression .)
    IF              reduce using rule 46 (expression -> simple_expression .)
    WHILE           reduce using rule 46 (expression -> simple_expression .)
    FOR             reduce using rule 46 (expression -> simple_expression .)
    CALL            reduce using rule 46 (expression -> simple_expression .)
    INT             reduce using rule 46 (expression -> simple_expression .)
    FLOAT           reduce using rule 46 (expression -> simple_expression .)
    LPAREN          reduce using rule 46 (expression -> simple_expression .)
    NUMBER          reduce using rule 46 (expression -> simple_expression .)
    MAIN            reduce using rule 46 (expression -> simple_expression .)
    RPAREN          reduce using rule 46 (expression -> simple_expression .)
    THEN            reduce using rule 46 (expression -> simple_expression .)
    DO              reduce using rule 46 (expression -> simple_expression .)
    RBRACKET        reduce using rule 46 (expression -> simple_expression .)
    END             reduce using rule 46 (expression -> simple_expression .)
    ELSE            reduce using rule 46 (expression -> simple_expression .)
    LOOP            reduce using rule 46 (expression -> simple_expression .)


state 27

    (12) var_type -> INT .

    ID              reduce using rule 12 (var_type -> INT .)


state 28

    (13) var_type -> FLOAT .

    ID              reduce using rule 13 (var_type -> FLOAT .)


state 29

    (47) simple_expression -> additive_expression . checkop additive_expression
    (48) simple_expression -> additive_expression .
    (55) additive_expression -> additive_expression . addop term
    (49) checkop -> . LESS
    (50) checkop -> . LESSEQUAL
    (51) checkop -> . GREATER
    (52) checkop -> . GREATEREQUAL
    (53) checkop -> . DEQUAL
    (54) checkop -> . DISTINT
    (57) addop -> . PLUS
    (58) addop -> . MINUS

    SETOUT          reduce using rule 48 (simple_expression -> additive_expression .)
    GETIN           reduce using rule 48 (simple_expression -> additive_expression .)
    ID              reduce using rule 48 (simple_expression -> additive_expression .)
    IF              reduce using rule 48 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 48 (simple_expression -> additive_expression .)
    FOR             reduce using rule 48 (simple_expression -> additive_expression .)
    CALL            reduce using rule 48 (simple_expression -> additive_expression .)
    INT             reduce using rule 48 (simple_expression -> additive_expression .)
    FLOAT           reduce using rule 48 (simple_expression -> additive_expression .)
    LPAREN          reduce using rule 48 (simple_expression -> additive_expression .)
    NUMBER          reduce using rule 48 (simple_expression -> additive_expression .)
    MAIN            reduce using rule 48 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 48 (simple_expression -> additive_expression .)
    THEN            reduce using rule 48 (simple_expression -> additive_expression .)
    DO              reduce using rule 48 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 48 (simple_expression -> additive_expression .)
    END             reduce using rule 48 (simple_expression -> additive_expression .)
    ELSE            reduce using rule 48 (simple_expression -> additive_expression .)
    LOOP            reduce using rule 48 (simple_expression -> additive_expression .)
    LESS            shift and go to state 55
    LESSEQUAL       shift and go to state 56
    GREATER         shift and go to state 57
    GREATEREQUAL    shift and go to state 58
    DEQUAL          shift and go to state 59
    DISTINT         shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62

    checkop                        shift and go to state 53
    addop                          shift and go to state 54

state 30

    (56) additive_expression -> term .
    (63) term -> term . mulop factor
    (65) mulop -> . TIMES
    (66) mulop -> . DIVIDE

    LESS            reduce using rule 56 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 56 (additive_expression -> term .)
    GREATER         reduce using rule 56 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 56 (additive_expression -> term .)
    DEQUAL          reduce using rule 56 (additive_expression -> term .)
    DISTINT         reduce using rule 56 (additive_expression -> term .)
    PLUS            reduce using rule 56 (additive_expression -> term .)
    MINUS           reduce using rule 56 (additive_expression -> term .)
    SETOUT          reduce using rule 56 (additive_expression -> term .)
    GETIN           reduce using rule 56 (additive_expression -> term .)
    ID              reduce using rule 56 (additive_expression -> term .)
    IF              reduce using rule 56 (additive_expression -> term .)
    WHILE           reduce using rule 56 (additive_expression -> term .)
    FOR             reduce using rule 56 (additive_expression -> term .)
    CALL            reduce using rule 56 (additive_expression -> term .)
    INT             reduce using rule 56 (additive_expression -> term .)
    FLOAT           reduce using rule 56 (additive_expression -> term .)
    LPAREN          reduce using rule 56 (additive_expression -> term .)
    NUMBER          reduce using rule 56 (additive_expression -> term .)
    MAIN            reduce using rule 56 (additive_expression -> term .)
    RPAREN          reduce using rule 56 (additive_expression -> term .)
    THEN            reduce using rule 56 (additive_expression -> term .)
    DO              reduce using rule 56 (additive_expression -> term .)
    RBRACKET        reduce using rule 56 (additive_expression -> term .)
    END             reduce using rule 56 (additive_expression -> term .)
    ELSE            reduce using rule 56 (additive_expression -> term .)
    LOOP            reduce using rule 56 (additive_expression -> term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65

    mulop                          shift and go to state 63

state 31

    (64) term -> factor .

    TIMES           reduce using rule 64 (term -> factor .)
    DIVIDE          reduce using rule 64 (term -> factor .)
    LESS            reduce using rule 64 (term -> factor .)
    LESSEQUAL       reduce using rule 64 (term -> factor .)
    GREATER         reduce using rule 64 (term -> factor .)
    GREATEREQUAL    reduce using rule 64 (term -> factor .)
    DEQUAL          reduce using rule 64 (term -> factor .)
    DISTINT         reduce using rule 64 (term -> factor .)
    PLUS            reduce using rule 64 (term -> factor .)
    MINUS           reduce using rule 64 (term -> factor .)
    SETOUT          reduce using rule 64 (term -> factor .)
    GETIN           reduce using rule 64 (term -> factor .)
    ID              reduce using rule 64 (term -> factor .)
    IF              reduce using rule 64 (term -> factor .)
    WHILE           reduce using rule 64 (term -> factor .)
    FOR             reduce using rule 64 (term -> factor .)
    CALL            reduce using rule 64 (term -> factor .)
    INT             reduce using rule 64 (term -> factor .)
    FLOAT           reduce using rule 64 (term -> factor .)
    LPAREN          reduce using rule 64 (term -> factor .)
    NUMBER          reduce using rule 64 (term -> factor .)
    MAIN            reduce using rule 64 (term -> factor .)
    RPAREN          reduce using rule 64 (term -> factor .)
    THEN            reduce using rule 64 (term -> factor .)
    DO              reduce using rule 64 (term -> factor .)
    RBRACKET        reduce using rule 64 (term -> factor .)
    END             reduce using rule 64 (term -> factor .)
    ELSE            reduce using rule 64 (term -> factor .)
    LOOP            reduce using rule 64 (term -> factor .)


state 32

    (1) program -> START program_main END .

    $end            reduce using rule 1 (program -> START program_main END .)


state 33

    (2) program_main -> program_sequence main_declaration .

    END             reduce using rule 2 (program_main -> program_sequence main_declaration .)


state 34

    (3) main_declaration -> MAIN . COLON statements_nont END

    COLON           shift and go to state 66


state 35

    (18) statements_nont -> statements_nont statement .

    SETOUT          reduce using rule 18 (statements_nont -> statements_nont statement .)
    GETIN           reduce using rule 18 (statements_nont -> statements_nont statement .)
    ID              reduce using rule 18 (statements_nont -> statements_nont statement .)
    IF              reduce using rule 18 (statements_nont -> statements_nont statement .)
    WHILE           reduce using rule 18 (statements_nont -> statements_nont statement .)
    FOR             reduce using rule 18 (statements_nont -> statements_nont statement .)
    CALL            reduce using rule 18 (statements_nont -> statements_nont statement .)
    INT             reduce using rule 18 (statements_nont -> statements_nont statement .)
    FLOAT           reduce using rule 18 (statements_nont -> statements_nont statement .)
    LPAREN          reduce using rule 18 (statements_nont -> statements_nont statement .)
    NUMBER          reduce using rule 18 (statements_nont -> statements_nont statement .)
    MAIN            reduce using rule 18 (statements_nont -> statements_nont statement .)
    END             reduce using rule 18 (statements_nont -> statements_nont statement .)
    ELSE            reduce using rule 18 (statements_nont -> statements_nont statement .)
    LOOP            reduce using rule 18 (statements_nont -> statements_nont statement .)


state 36

    (24) statement -> call .

    SETOUT          reduce using rule 24 (statement -> call .)
    GETIN           reduce using rule 24 (statement -> call .)
    ID              reduce using rule 24 (statement -> call .)
    IF              reduce using rule 24 (statement -> call .)
    WHILE           reduce using rule 24 (statement -> call .)
    FOR             reduce using rule 24 (statement -> call .)
    CALL            reduce using rule 24 (statement -> call .)
    INT             reduce using rule 24 (statement -> call .)
    FLOAT           reduce using rule 24 (statement -> call .)
    LPAREN          reduce using rule 24 (statement -> call .)
    NUMBER          reduce using rule 24 (statement -> call .)
    MAIN            reduce using rule 24 (statement -> call .)
    END             reduce using rule 24 (statement -> call .)
    ELSE            reduce using rule 24 (statement -> call .)
    LOOP            reduce using rule 24 (statement -> call .)


state 37

    (17) PROCESS_declaration -> PROCESS ID . DO statements_nont END

    DO              shift and go to state 67


state 38

    (34) expression_nont -> ID PLUSPLUS .

    SETOUT          reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    GETIN           reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    ID              reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    IF              reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    WHILE           reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    FOR             reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    CALL            reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    INT             reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    FLOAT           reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    LPAREN          reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    NUMBER          reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    MAIN            reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    END             reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    ELSE            reduce using rule 34 (expression_nont -> ID PLUSPLUS .)
    LOOP            reduce using rule 34 (expression_nont -> ID PLUSPLUS .)


state 39

    (35) expression_nont -> ID MINUSMINUS .

    SETOUT          reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    GETIN           reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    ID              reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    IF              reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    WHILE           reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    FOR             reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    CALL            reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    INT             reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    FLOAT           reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    LPAREN          reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    NUMBER          reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    MAIN            reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    END             reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    ELSE            reduce using rule 35 (expression_nont -> ID MINUSMINUS .)
    LOOP            reduce using rule 35 (expression_nont -> ID MINUSMINUS .)


state 40

    (43) var -> ID vardimen .
    (44) vardimen -> vardimen . LBRACKET expression RBRACKET

    EQUAL           reduce using rule 43 (var -> ID vardimen .)
    ID              reduce using rule 43 (var -> ID vardimen .)
    TIMES           reduce using rule 43 (var -> ID vardimen .)
    DIVIDE          reduce using rule 43 (var -> ID vardimen .)
    LESS            reduce using rule 43 (var -> ID vardimen .)
    LESSEQUAL       reduce using rule 43 (var -> ID vardimen .)
    GREATER         reduce using rule 43 (var -> ID vardimen .)
    GREATEREQUAL    reduce using rule 43 (var -> ID vardimen .)
    DEQUAL          reduce using rule 43 (var -> ID vardimen .)
    DISTINT         reduce using rule 43 (var -> ID vardimen .)
    PLUS            reduce using rule 43 (var -> ID vardimen .)
    MINUS           reduce using rule 43 (var -> ID vardimen .)
    SETOUT          reduce using rule 43 (var -> ID vardimen .)
    GETIN           reduce using rule 43 (var -> ID vardimen .)
    IF              reduce using rule 43 (var -> ID vardimen .)
    WHILE           reduce using rule 43 (var -> ID vardimen .)
    FOR             reduce using rule 43 (var -> ID vardimen .)
    CALL            reduce using rule 43 (var -> ID vardimen .)
    INT             reduce using rule 43 (var -> ID vardimen .)
    FLOAT           reduce using rule 43 (var -> ID vardimen .)
    LPAREN          reduce using rule 43 (var -> ID vardimen .)
    NUMBER          reduce using rule 43 (var -> ID vardimen .)
    MAIN            reduce using rule 43 (var -> ID vardimen .)
    RPAREN          reduce using rule 43 (var -> ID vardimen .)
    THEN            reduce using rule 43 (var -> ID vardimen .)
    DO              reduce using rule 43 (var -> ID vardimen .)
    TO              reduce using rule 43 (var -> ID vardimen .)
    RBRACKET        reduce using rule 43 (var -> ID vardimen .)
    COMMA           reduce using rule 43 (var -> ID vardimen .)
    END             reduce using rule 43 (var -> ID vardimen .)
    ELSE            reduce using rule 43 (var -> ID vardimen .)
    LOOP            reduce using rule 43 (var -> ID vardimen .)
    LBRACKET        shift and go to state 68


state 41

    (45) vardimen -> LBRACKET . expression RBRACKET
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 69
    var                            shift and go to state 19
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 42

    (62) call -> CALL LPAREN . ID RPAREN

    ID              shift and go to state 70


state 43

    (59) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 71


state 44

    (41) var -> ID .
    (43) var -> ID . vardimen
    (44) vardimen -> . vardimen LBRACKET expression RBRACKET
    (45) vardimen -> . LBRACKET expression RBRACKET

    EQUAL           reduce using rule 41 (var -> ID .)
    ID              reduce using rule 41 (var -> ID .)
    TIMES           reduce using rule 41 (var -> ID .)
    DIVIDE          reduce using rule 41 (var -> ID .)
    LESS            reduce using rule 41 (var -> ID .)
    LESSEQUAL       reduce using rule 41 (var -> ID .)
    GREATER         reduce using rule 41 (var -> ID .)
    GREATEREQUAL    reduce using rule 41 (var -> ID .)
    DEQUAL          reduce using rule 41 (var -> ID .)
    DISTINT         reduce using rule 41 (var -> ID .)
    PLUS            reduce using rule 41 (var -> ID .)
    MINUS           reduce using rule 41 (var -> ID .)
    RPAREN          reduce using rule 41 (var -> ID .)
    THEN            reduce using rule 41 (var -> ID .)
    DO              reduce using rule 41 (var -> ID .)
    TO              reduce using rule 41 (var -> ID .)
    RBRACKET        reduce using rule 41 (var -> ID .)
    COMMA           reduce using rule 41 (var -> ID .)
    SETOUT          reduce using rule 41 (var -> ID .)
    GETIN           reduce using rule 41 (var -> ID .)
    IF              reduce using rule 41 (var -> ID .)
    WHILE           reduce using rule 41 (var -> ID .)
    FOR             reduce using rule 41 (var -> ID .)
    CALL            reduce using rule 41 (var -> ID .)
    INT             reduce using rule 41 (var -> ID .)
    FLOAT           reduce using rule 41 (var -> ID .)
    LPAREN          reduce using rule 41 (var -> ID .)
    NUMBER          reduce using rule 41 (var -> ID .)
    MAIN            reduce using rule 41 (var -> ID .)
    END             reduce using rule 41 (var -> ID .)
    ELSE            reduce using rule 41 (var -> ID .)
    LOOP            reduce using rule 41 (var -> ID .)
    LBRACKET        shift and go to state 41

    vardimen                       shift and go to state 40

state 45

    (26) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES RPAREN
    (27) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> SETOUT LPAREN . var RPAREN
    (29) expression_nont -> SETOUT LPAREN . var COMMA ENDL RPAREN
    (30) expression_nont -> SETOUT LPAREN . var COMMA var COMMA RPAREN
    (31) expression_nont -> SETOUT LPAREN . var COMMA var COMMA ENDL RPAREN
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    QUOTES          shift and go to state 72
    ID              shift and go to state 44

    var                            shift and go to state 73

state 46

    (40) expression -> var EQUAL . expression
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    var                            shift and go to state 19
    expression                     shift and go to state 74
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 47

    (42) var -> var ID . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 75


state 48

    (32) expression_nont -> GETIN LPAREN . var RPAREN
    (33) expression_nont -> GETIN LPAREN . var COMMA var RPAREN
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    ID              shift and go to state 44

    var                            shift and go to state 76

state 49

    (36) condition_nont -> IF expression . THEN statements_nont END
    (37) condition_nont -> IF expression . THEN statements_nont ELSE statements_nont END

    THEN            shift and go to state 77


state 50

    (38) iteration_nont -> WHILE expression . DO statements_nont LOOP

    DO              shift and go to state 78


state 51

    (39) iteration_nont -> FOR var . TO var DO statements_nont LOOP
    (42) var -> var . ID LBRACKET expression RBRACKET

    TO              shift and go to state 79
    ID              shift and go to state 47


state 52

    (8) var_declaration -> var_type ID .
    (9) var_declaration -> var_type ID . COMMA ID
    (10) var_declaration -> var_type ID . EQUAL NUMBER
    (11) var_declaration -> var_type ID . EQUAL var
    (14) var_declaration -> var_type ID . dimensiones
    (15) dimensiones -> . dimensiones LBRACKET expression RBRACKET
    (16) dimensiones -> . LBRACKET expression RBRACKET

    SETOUT          reduce using rule 8 (var_declaration -> var_type ID .)
    GETIN           reduce using rule 8 (var_declaration -> var_type ID .)
    ID              reduce using rule 8 (var_declaration -> var_type ID .)
    IF              reduce using rule 8 (var_declaration -> var_type ID .)
    WHILE           reduce using rule 8 (var_declaration -> var_type ID .)
    FOR             reduce using rule 8 (var_declaration -> var_type ID .)
    CALL            reduce using rule 8 (var_declaration -> var_type ID .)
    INT             reduce using rule 8 (var_declaration -> var_type ID .)
    FLOAT           reduce using rule 8 (var_declaration -> var_type ID .)
    LPAREN          reduce using rule 8 (var_declaration -> var_type ID .)
    NUMBER          reduce using rule 8 (var_declaration -> var_type ID .)
    MAIN            reduce using rule 8 (var_declaration -> var_type ID .)
    END             reduce using rule 8 (var_declaration -> var_type ID .)
    ELSE            reduce using rule 8 (var_declaration -> var_type ID .)
    LOOP            reduce using rule 8 (var_declaration -> var_type ID .)
    COMMA           shift and go to state 80
    EQUAL           shift and go to state 81
    LBRACKET        shift and go to state 83

    dimensiones                    shift and go to state 82

state 53

    (47) simple_expression -> additive_expression checkop . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25
    ID              shift and go to state 44

    additive_expression            shift and go to state 84
    term                           shift and go to state 30
    factor                         shift and go to state 31
    var                            shift and go to state 85

state 54

    (55) additive_expression -> additive_expression addop . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25
    ID              shift and go to state 44

    term                           shift and go to state 86
    factor                         shift and go to state 31
    var                            shift and go to state 85

state 55

    (49) checkop -> LESS .

    LPAREN          reduce using rule 49 (checkop -> LESS .)
    NUMBER          reduce using rule 49 (checkop -> LESS .)
    ID              reduce using rule 49 (checkop -> LESS .)


state 56

    (50) checkop -> LESSEQUAL .

    LPAREN          reduce using rule 50 (checkop -> LESSEQUAL .)
    NUMBER          reduce using rule 50 (checkop -> LESSEQUAL .)
    ID              reduce using rule 50 (checkop -> LESSEQUAL .)


state 57

    (51) checkop -> GREATER .

    LPAREN          reduce using rule 51 (checkop -> GREATER .)
    NUMBER          reduce using rule 51 (checkop -> GREATER .)
    ID              reduce using rule 51 (checkop -> GREATER .)


state 58

    (52) checkop -> GREATEREQUAL .

    LPAREN          reduce using rule 52 (checkop -> GREATEREQUAL .)
    NUMBER          reduce using rule 52 (checkop -> GREATEREQUAL .)
    ID              reduce using rule 52 (checkop -> GREATEREQUAL .)


state 59

    (53) checkop -> DEQUAL .

    LPAREN          reduce using rule 53 (checkop -> DEQUAL .)
    NUMBER          reduce using rule 53 (checkop -> DEQUAL .)
    ID              reduce using rule 53 (checkop -> DEQUAL .)


state 60

    (54) checkop -> DISTINT .

    LPAREN          reduce using rule 54 (checkop -> DISTINT .)
    NUMBER          reduce using rule 54 (checkop -> DISTINT .)
    ID              reduce using rule 54 (checkop -> DISTINT .)


state 61

    (57) addop -> PLUS .

    LPAREN          reduce using rule 57 (addop -> PLUS .)
    NUMBER          reduce using rule 57 (addop -> PLUS .)
    ID              reduce using rule 57 (addop -> PLUS .)


state 62

    (58) addop -> MINUS .

    LPAREN          reduce using rule 58 (addop -> MINUS .)
    NUMBER          reduce using rule 58 (addop -> MINUS .)
    ID              reduce using rule 58 (addop -> MINUS .)


state 63

    (63) term -> term mulop . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25
    ID              shift and go to state 44

    factor                         shift and go to state 87
    var                            shift and go to state 85

state 64

    (65) mulop -> TIMES .

    LPAREN          reduce using rule 65 (mulop -> TIMES .)
    NUMBER          reduce using rule 65 (mulop -> TIMES .)
    ID              reduce using rule 65 (mulop -> TIMES .)


state 65

    (66) mulop -> DIVIDE .

    LPAREN          reduce using rule 66 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 66 (mulop -> DIVIDE .)
    ID              reduce using rule 66 (mulop -> DIVIDE .)


state 66

    (3) main_declaration -> MAIN COLON . statements_nont END
    (18) statements_nont -> . statements_nont statement
    (19) statements_nont -> . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    statements_nont                shift and go to state 88
    statement                      shift and go to state 8
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    expression                     shift and go to state 17
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 67

    (17) PROCESS_declaration -> PROCESS ID DO . statements_nont END
    (18) statements_nont -> . statements_nont statement
    (19) statements_nont -> . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    statements_nont                shift and go to state 89
    statement                      shift and go to state 8
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    expression                     shift and go to state 17
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 68

    (44) vardimen -> vardimen LBRACKET . expression RBRACKET
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 90
    var                            shift and go to state 19
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 69

    (45) vardimen -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 91


state 70

    (62) call -> CALL LPAREN ID . RPAREN

    RPAREN          shift and go to state 92


state 71

    (59) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    SETOUT          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GETIN           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    CALL            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    INT             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    MAIN            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 59 (factor -> LPAREN expression RPAREN .)


state 72

    (26) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES RPAREN
    (27) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES COMMA ENDL RPAREN

    ID              shift and go to state 93


state 73

    (28) expression_nont -> SETOUT LPAREN var . RPAREN
    (29) expression_nont -> SETOUT LPAREN var . COMMA ENDL RPAREN
    (30) expression_nont -> SETOUT LPAREN var . COMMA var COMMA RPAREN
    (31) expression_nont -> SETOUT LPAREN var . COMMA var COMMA ENDL RPAREN
    (42) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 94
    COMMA           shift and go to state 95
    ID              shift and go to state 47


state 74

    (40) expression -> var EQUAL expression .

    SETOUT          reduce using rule 40 (expression -> var EQUAL expression .)
    GETIN           reduce using rule 40 (expression -> var EQUAL expression .)
    ID              reduce using rule 40 (expression -> var EQUAL expression .)
    IF              reduce using rule 40 (expression -> var EQUAL expression .)
    WHILE           reduce using rule 40 (expression -> var EQUAL expression .)
    FOR             reduce using rule 40 (expression -> var EQUAL expression .)
    CALL            reduce using rule 40 (expression -> var EQUAL expression .)
    INT             reduce using rule 40 (expression -> var EQUAL expression .)
    FLOAT           reduce using rule 40 (expression -> var EQUAL expression .)
    LPAREN          reduce using rule 40 (expression -> var EQUAL expression .)
    NUMBER          reduce using rule 40 (expression -> var EQUAL expression .)
    MAIN            reduce using rule 40 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 40 (expression -> var EQUAL expression .)
    THEN            reduce using rule 40 (expression -> var EQUAL expression .)
    DO              reduce using rule 40 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 40 (expression -> var EQUAL expression .)
    END             reduce using rule 40 (expression -> var EQUAL expression .)
    ELSE            reduce using rule 40 (expression -> var EQUAL expression .)
    LOOP            reduce using rule 40 (expression -> var EQUAL expression .)


state 75

    (42) var -> var ID LBRACKET . expression RBRACKET
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    var                            shift and go to state 19
    expression                     shift and go to state 96
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 76

    (32) expression_nont -> GETIN LPAREN var . RPAREN
    (33) expression_nont -> GETIN LPAREN var . COMMA var RPAREN
    (42) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 97
    COMMA           shift and go to state 98
    ID              shift and go to state 47


state 77

    (36) condition_nont -> IF expression THEN . statements_nont END
    (37) condition_nont -> IF expression THEN . statements_nont ELSE statements_nont END
    (18) statements_nont -> . statements_nont statement
    (19) statements_nont -> . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 17
    statements_nont                shift and go to state 99
    statement                      shift and go to state 8
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 78

    (38) iteration_nont -> WHILE expression DO . statements_nont LOOP
    (18) statements_nont -> . statements_nont statement
    (19) statements_nont -> . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 17
    statements_nont                shift and go to state 100
    statement                      shift and go to state 8
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 79

    (39) iteration_nont -> FOR var TO . var DO statements_nont LOOP
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    ID              shift and go to state 44

    var                            shift and go to state 101

state 80

    (9) var_declaration -> var_type ID COMMA . ID

    ID              shift and go to state 102


state 81

    (10) var_declaration -> var_type ID EQUAL . NUMBER
    (11) var_declaration -> var_type ID EQUAL . var
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    NUMBER          shift and go to state 103
    ID              shift and go to state 44

    var                            shift and go to state 104

state 82

    (14) var_declaration -> var_type ID dimensiones .
    (15) dimensiones -> dimensiones . LBRACKET expression RBRACKET

    SETOUT          reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    GETIN           reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    ID              reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    IF              reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    WHILE           reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    FOR             reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    CALL            reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    INT             reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    FLOAT           reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    LPAREN          reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    NUMBER          reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    MAIN            reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    END             reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    ELSE            reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    LOOP            reduce using rule 14 (var_declaration -> var_type ID dimensiones .)
    LBRACKET        shift and go to state 105


state 83

    (16) dimensiones -> LBRACKET . expression RBRACKET
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 106
    var                            shift and go to state 19
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 84

    (47) simple_expression -> additive_expression checkop additive_expression .
    (55) additive_expression -> additive_expression . addop term
    (57) addop -> . PLUS
    (58) addop -> . MINUS

    SETOUT          reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    GETIN           reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    ID              reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    IF              reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    WHILE           reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    FOR             reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    CALL            reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    INT             reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    FLOAT           reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    LPAREN          reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    NUMBER          reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    MAIN            reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    RPAREN          reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    THEN            reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    DO              reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    RBRACKET        reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    END             reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    ELSE            reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    LOOP            reduce using rule 47 (simple_expression -> additive_expression checkop additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62

    addop                          shift and go to state 54

state 85

    (60) factor -> var .
    (42) var -> var . ID LBRACKET expression RBRACKET

  ! shift/reduce conflict for ID resolved as shift
    TIMES           reduce using rule 60 (factor -> var .)
    DIVIDE          reduce using rule 60 (factor -> var .)
    PLUS            reduce using rule 60 (factor -> var .)
    MINUS           reduce using rule 60 (factor -> var .)
    SETOUT          reduce using rule 60 (factor -> var .)
    GETIN           reduce using rule 60 (factor -> var .)
    IF              reduce using rule 60 (factor -> var .)
    WHILE           reduce using rule 60 (factor -> var .)
    FOR             reduce using rule 60 (factor -> var .)
    CALL            reduce using rule 60 (factor -> var .)
    INT             reduce using rule 60 (factor -> var .)
    FLOAT           reduce using rule 60 (factor -> var .)
    LPAREN          reduce using rule 60 (factor -> var .)
    NUMBER          reduce using rule 60 (factor -> var .)
    MAIN            reduce using rule 60 (factor -> var .)
    RPAREN          reduce using rule 60 (factor -> var .)
    THEN            reduce using rule 60 (factor -> var .)
    DO              reduce using rule 60 (factor -> var .)
    RBRACKET        reduce using rule 60 (factor -> var .)
    END             reduce using rule 60 (factor -> var .)
    ELSE            reduce using rule 60 (factor -> var .)
    LOOP            reduce using rule 60 (factor -> var .)
    LESS            reduce using rule 60 (factor -> var .)
    LESSEQUAL       reduce using rule 60 (factor -> var .)
    GREATER         reduce using rule 60 (factor -> var .)
    GREATEREQUAL    reduce using rule 60 (factor -> var .)
    DEQUAL          reduce using rule 60 (factor -> var .)
    DISTINT         reduce using rule 60 (factor -> var .)
    ID              shift and go to state 47

  ! ID              [ reduce using rule 60 (factor -> var .) ]


state 86

    (55) additive_expression -> additive_expression addop term .
    (63) term -> term . mulop factor
    (65) mulop -> . TIMES
    (66) mulop -> . DIVIDE

    LESS            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 55 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    SETOUT          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GETIN           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    ID              reduce using rule 55 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 55 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 55 (additive_expression -> additive_expression addop term .)
    CALL            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    INT             reduce using rule 55 (additive_expression -> additive_expression addop term .)
    FLOAT           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    LPAREN          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    NUMBER          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    MAIN            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    THEN            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DO              reduce using rule 55 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 55 (additive_expression -> additive_expression addop term .)
    END             reduce using rule 55 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    LOOP            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65

    mulop                          shift and go to state 63

state 87

    (63) term -> term mulop factor .

    TIMES           reduce using rule 63 (term -> term mulop factor .)
    DIVIDE          reduce using rule 63 (term -> term mulop factor .)
    LESS            reduce using rule 63 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 63 (term -> term mulop factor .)
    GREATER         reduce using rule 63 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 63 (term -> term mulop factor .)
    DEQUAL          reduce using rule 63 (term -> term mulop factor .)
    DISTINT         reduce using rule 63 (term -> term mulop factor .)
    PLUS            reduce using rule 63 (term -> term mulop factor .)
    MINUS           reduce using rule 63 (term -> term mulop factor .)
    SETOUT          reduce using rule 63 (term -> term mulop factor .)
    GETIN           reduce using rule 63 (term -> term mulop factor .)
    ID              reduce using rule 63 (term -> term mulop factor .)
    IF              reduce using rule 63 (term -> term mulop factor .)
    WHILE           reduce using rule 63 (term -> term mulop factor .)
    FOR             reduce using rule 63 (term -> term mulop factor .)
    CALL            reduce using rule 63 (term -> term mulop factor .)
    INT             reduce using rule 63 (term -> term mulop factor .)
    FLOAT           reduce using rule 63 (term -> term mulop factor .)
    LPAREN          reduce using rule 63 (term -> term mulop factor .)
    NUMBER          reduce using rule 63 (term -> term mulop factor .)
    MAIN            reduce using rule 63 (term -> term mulop factor .)
    RPAREN          reduce using rule 63 (term -> term mulop factor .)
    THEN            reduce using rule 63 (term -> term mulop factor .)
    DO              reduce using rule 63 (term -> term mulop factor .)
    RBRACKET        reduce using rule 63 (term -> term mulop factor .)
    END             reduce using rule 63 (term -> term mulop factor .)
    ELSE            reduce using rule 63 (term -> term mulop factor .)
    LOOP            reduce using rule 63 (term -> term mulop factor .)


state 88

    (3) main_declaration -> MAIN COLON statements_nont . END
    (18) statements_nont -> statements_nont . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    END             shift and go to state 107
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    statement                      shift and go to state 35
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    expression                     shift and go to state 17
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 89

    (17) PROCESS_declaration -> PROCESS ID DO statements_nont . END
    (18) statements_nont -> statements_nont . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    END             shift and go to state 108
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    statement                      shift and go to state 35
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    expression                     shift and go to state 17
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 90

    (44) vardimen -> vardimen LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 109


state 91

    (45) vardimen -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    FOR             reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    CALL            reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    INT             reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    END             reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    THEN            reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    DO              reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    TO              reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 45 (vardimen -> LBRACKET expression RBRACKET .)


state 92

    (62) call -> CALL LPAREN ID RPAREN .

    MAIN            reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    SETOUT          reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    GETIN           reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    ID              reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    IF              reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    WHILE           reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    FOR             reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    CALL            reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    INT             reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    FLOAT           reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    LPAREN          reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    NUMBER          reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    END             reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    ELSE            reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)
    LOOP            reduce using rule 62 (call -> CALL LPAREN ID RPAREN .)


state 93

    (26) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES RPAREN
    (27) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES COMMA ENDL RPAREN

    QUOTES          shift and go to state 110


state 94

    (28) expression_nont -> SETOUT LPAREN var RPAREN .

    SETOUT          reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    GETIN           reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ID              reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    IF              reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    WHILE           reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FOR             reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    CALL            reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    INT             reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FLOAT           reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LPAREN          reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    NUMBER          reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    MAIN            reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    END             reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ELSE            reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LOOP            reduce using rule 28 (expression_nont -> SETOUT LPAREN var RPAREN .)


state 95

    (29) expression_nont -> SETOUT LPAREN var COMMA . ENDL RPAREN
    (30) expression_nont -> SETOUT LPAREN var COMMA . var COMMA RPAREN
    (31) expression_nont -> SETOUT LPAREN var COMMA . var COMMA ENDL RPAREN
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    ENDL            shift and go to state 112
    ID              shift and go to state 44

    var                            shift and go to state 111

state 96

    (42) var -> var ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 113


state 97

    (32) expression_nont -> GETIN LPAREN var RPAREN .

    SETOUT          reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    GETIN           reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    ID              reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    IF              reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    WHILE           reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    FOR             reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    CALL            reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    INT             reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    FLOAT           reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    LPAREN          reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    NUMBER          reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    MAIN            reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    END             reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    ELSE            reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)
    LOOP            reduce using rule 32 (expression_nont -> GETIN LPAREN var RPAREN .)


state 98

    (33) expression_nont -> GETIN LPAREN var COMMA . var RPAREN
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen

    ID              shift and go to state 44

    var                            shift and go to state 114

state 99

    (36) condition_nont -> IF expression THEN statements_nont . END
    (37) condition_nont -> IF expression THEN statements_nont . ELSE statements_nont END
    (18) statements_nont -> statements_nont . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    END             shift and go to state 115
    ELSE            shift and go to state 116
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 17
    statement                      shift and go to state 35
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 100

    (38) iteration_nont -> WHILE expression DO statements_nont . LOOP
    (18) statements_nont -> statements_nont . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    LOOP            shift and go to state 117
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 17
    statement                      shift and go to state 35
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 101

    (39) iteration_nont -> FOR var TO var . DO statements_nont LOOP
    (42) var -> var . ID LBRACKET expression RBRACKET

    DO              shift and go to state 118
    ID              shift and go to state 47


state 102

    (9) var_declaration -> var_type ID COMMA ID .

    SETOUT          reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    GETIN           reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    ID              reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    IF              reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    WHILE           reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    FOR             reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    CALL            reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    INT             reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    FLOAT           reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    LPAREN          reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    NUMBER          reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    MAIN            reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    END             reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    ELSE            reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)
    LOOP            reduce using rule 9 (var_declaration -> var_type ID COMMA ID .)


state 103

    (10) var_declaration -> var_type ID EQUAL NUMBER .

    SETOUT          reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    GETIN           reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    ID              reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    IF              reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    WHILE           reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    FOR             reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    CALL            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    INT             reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    FLOAT           reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    LPAREN          reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    NUMBER          reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    MAIN            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    END             reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    ELSE            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)
    LOOP            reduce using rule 10 (var_declaration -> var_type ID EQUAL NUMBER .)


state 104

    (11) var_declaration -> var_type ID EQUAL var .
    (42) var -> var . ID LBRACKET expression RBRACKET

  ! shift/reduce conflict for ID resolved as shift
    SETOUT          reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    GETIN           reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    IF              reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    WHILE           reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    FOR             reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    CALL            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    INT             reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    FLOAT           reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    LPAREN          reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    NUMBER          reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    MAIN            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    END             reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    ELSE            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    LOOP            reduce using rule 11 (var_declaration -> var_type ID EQUAL var .)
    ID              shift and go to state 47

  ! ID              [ reduce using rule 11 (var_declaration -> var_type ID EQUAL var .) ]


state 105

    (15) dimensiones -> dimensiones LBRACKET . expression RBRACKET
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    ID              shift and go to state 44
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 119
    var                            shift and go to state 19
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 106

    (16) dimensiones -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 120


state 107

    (3) main_declaration -> MAIN COLON statements_nont END .

    END             reduce using rule 3 (main_declaration -> MAIN COLON statements_nont END .)


state 108

    (17) PROCESS_declaration -> PROCESS ID DO statements_nont END .

    MAIN            reduce using rule 17 (PROCESS_declaration -> PROCESS ID DO statements_nont END .)


state 109

    (44) vardimen -> vardimen LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ID              reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LESS            reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    IF              reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    FOR             reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    CALL            reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    INT             reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    END             reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    THEN            reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DO              reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    TO              reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 44 (vardimen -> vardimen LBRACKET expression RBRACKET .)


state 110

    (26) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . RPAREN
    (27) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . COMMA ENDL RPAREN

    RPAREN          shift and go to state 121
    COMMA           shift and go to state 122


state 111

    (30) expression_nont -> SETOUT LPAREN var COMMA var . COMMA RPAREN
    (31) expression_nont -> SETOUT LPAREN var COMMA var . COMMA ENDL RPAREN
    (42) var -> var . ID LBRACKET expression RBRACKET

    COMMA           shift and go to state 123
    ID              shift and go to state 47


state 112

    (29) expression_nont -> SETOUT LPAREN var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 124


state 113

    (42) var -> var ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    CALL            reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    INT             reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    END             reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 42 (var -> var ID LBRACKET expression RBRACKET .)


state 114

    (33) expression_nont -> GETIN LPAREN var COMMA var . RPAREN
    (42) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 125
    ID              shift and go to state 47


state 115

    (36) condition_nont -> IF expression THEN statements_nont END .

    SETOUT          reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    GETIN           reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    ID              reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    IF              reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    WHILE           reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    FOR             reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    CALL            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    INT             reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    FLOAT           reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    LPAREN          reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    NUMBER          reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    MAIN            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    END             reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    ELSE            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)
    LOOP            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont END .)


state 116

    (37) condition_nont -> IF expression THEN statements_nont ELSE . statements_nont END
    (18) statements_nont -> . statements_nont statement
    (19) statements_nont -> . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 17
    statements_nont                shift and go to state 126
    statement                      shift and go to state 8
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 117

    (38) iteration_nont -> WHILE expression DO statements_nont LOOP .

    SETOUT          reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    GETIN           reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    ID              reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    IF              reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    WHILE           reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    FOR             reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    CALL            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    INT             reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    FLOAT           reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    LPAREN          reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    NUMBER          reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    MAIN            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    END             reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    ELSE            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    LOOP            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)


state 118

    (39) iteration_nont -> FOR var TO var DO . statements_nont LOOP
    (18) statements_nont -> . statements_nont statement
    (19) statements_nont -> . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    var                            shift and go to state 19
    statements_nont                shift and go to state 127
    statement                      shift and go to state 8
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    expression                     shift and go to state 17
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 119

    (15) dimensiones -> dimensiones LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 128


state 120

    (16) dimensiones -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    FOR             reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    CALL            reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    INT             reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    END             reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 16 (dimensiones -> LBRACKET expression RBRACKET .)


state 121

    (26) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .

    SETOUT          reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    GETIN           reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ID              reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    IF              reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    WHILE           reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FOR             reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    CALL            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    INT             reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FLOAT           reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LPAREN          reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    NUMBER          reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    MAIN            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    END             reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ELSE            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LOOP            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)


state 122

    (27) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA . ENDL RPAREN

    ENDL            shift and go to state 129


state 123

    (30) expression_nont -> SETOUT LPAREN var COMMA var COMMA . RPAREN
    (31) expression_nont -> SETOUT LPAREN var COMMA var COMMA . ENDL RPAREN

    RPAREN          shift and go to state 130
    ENDL            shift and go to state 131


state 124

    (29) expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .

    SETOUT          reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ID              reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    IF              reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FOR             reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    CALL            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    INT             reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    MAIN            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    END             reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)


state 125

    (33) expression_nont -> GETIN LPAREN var COMMA var RPAREN .

    SETOUT          reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    GETIN           reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ID              reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    IF              reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    WHILE           reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FOR             reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    CALL            reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    INT             reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FLOAT           reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LPAREN          reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    NUMBER          reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    MAIN            reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    END             reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ELSE            reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LOOP            reduce using rule 33 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)


state 126

    (37) condition_nont -> IF expression THEN statements_nont ELSE statements_nont . END
    (18) statements_nont -> statements_nont . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    END             shift and go to state 132
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    expression                     shift and go to state 17
    statement                      shift and go to state 35
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    var                            shift and go to state 19
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 127

    (39) iteration_nont -> FOR var TO var DO statements_nont . LOOP
    (18) statements_nont -> statements_nont . statement
    (20) statement -> . expression_nont
    (21) statement -> . condition_nont
    (22) statement -> . iteration_nont
    (23) statement -> . var_declaration
    (24) statement -> . call
    (25) expression_nont -> . expression
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (27) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (28) expression_nont -> . SETOUT LPAREN var RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (31) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (32) expression_nont -> . GETIN LPAREN var RPAREN
    (33) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (34) expression_nont -> . ID PLUSPLUS
    (35) expression_nont -> . ID MINUSMINUS
    (36) condition_nont -> . IF expression THEN statements_nont END
    (37) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (39) iteration_nont -> . FOR var TO var DO statements_nont LOOP
    (8) var_declaration -> . var_type ID
    (9) var_declaration -> . var_type ID COMMA ID
    (10) var_declaration -> . var_type ID EQUAL NUMBER
    (11) var_declaration -> . var_type ID EQUAL var
    (14) var_declaration -> . var_type ID dimensiones
    (62) call -> . CALL LPAREN ID RPAREN
    (40) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (12) var_type -> . INT
    (13) var_type -> . FLOAT
    (41) var -> . ID
    (42) var -> . var ID LBRACKET expression RBRACKET
    (43) var -> . ID vardimen
    (47) simple_expression -> . additive_expression checkop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (63) term -> . term mulop factor
    (64) term -> . factor
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . var
    (61) factor -> . NUMBER

    LOOP            shift and go to state 133
    SETOUT          shift and go to state 18
    GETIN           shift and go to state 20
    ID              shift and go to state 10
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    CALL            shift and go to state 11
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 12
    NUMBER          shift and go to state 25

    var                            shift and go to state 19
    statement                      shift and go to state 35
    expression_nont                shift and go to state 13
    condition_nont                 shift and go to state 14
    iteration_nont                 shift and go to state 15
    var_declaration                shift and go to state 16
    call                           shift and go to state 36
    expression                     shift and go to state 17
    var_type                       shift and go to state 24
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 128

    (15) dimensiones -> dimensiones LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    ID              reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    IF              reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    FOR             reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    CALL            reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    INT             reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    END             reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 15 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)


state 129

    (27) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL . RPAREN

    RPAREN          shift and go to state 134


state 130

    (30) expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .

    SETOUT          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    GETIN           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ID              reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    IF              reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    WHILE           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FOR             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    CALL            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    INT             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FLOAT           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LPAREN          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    NUMBER          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    MAIN            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    END             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ELSE            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LOOP            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)


state 131

    (31) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 135


state 132

    (37) condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .

    SETOUT          reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    GETIN           reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    ID              reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    IF              reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    WHILE           reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    FOR             reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    CALL            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    INT             reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    FLOAT           reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    LPAREN          reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    NUMBER          reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    MAIN            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    END             reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    ELSE            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    LOOP            reduce using rule 37 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)


state 133

    (39) iteration_nont -> FOR var TO var DO statements_nont LOOP .

    SETOUT          reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    GETIN           reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    ID              reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    IF              reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    WHILE           reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    FOR             reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    CALL            reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    INT             reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    FLOAT           reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    LPAREN          reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    NUMBER          reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    MAIN            reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    END             reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    ELSE            reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)
    LOOP            reduce using rule 39 (iteration_nont -> FOR var TO var DO statements_nont LOOP .)


state 134

    (27) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .

    SETOUT          reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    GETIN           reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ID              reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    IF              reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    WHILE           reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FOR             reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    CALL            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    INT             reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    MAIN            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    END             reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ELSE            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LOOP            reduce using rule 27 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)


state 135

    (31) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .

    SETOUT          reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ID              reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    IF              reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FOR             reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    CALL            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    INT             reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    MAIN            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    END             reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 31 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 19 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (program_sequence -> call)
WARNING: rejected rule (statement -> call) in state 7
>>>>>>> tempowork
