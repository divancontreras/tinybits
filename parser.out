Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> BEGIN statement_list END
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> identifier
Rule 5     statement -> expression
Rule 6     statement -> if_statement
Rule 7     identifier -> IDENTIFIER
Rule 8     statement -> EXIT
Rule 9     primitive -> NUM_INT
Rule 10    primitive -> NUM_FLOAT
Rule 11    primitive -> STRING
Rule 12    primitive -> boolean
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression MINUS expression
Rule 15    expression -> expression MUL expression
Rule 16    expression -> expression DIV expression
Rule 17    expression -> expression EXP expression
Rule 18    expression -> expression MOD expression
Rule 19    expression -> expression BIT_AND expression
Rule 20    expression -> expression BIT_OR expression
Rule 21    expression -> expression BIT_XOR expression
Rule 22    expression -> expression LSHIFT expression
Rule 23    expression -> expression RSHIFT expression
Rule 24    boolean -> expression EQ expression
Rule 25    boolean -> expression NEQ expression
Rule 26    boolean -> expression GT expression
Rule 27    boolean -> expression GTE expression
Rule 28    boolean -> expression LT expression
Rule 29    boolean -> expression LTE expression
Rule 30    boolean -> expression AND expression
Rule 31    boolean -> expression OR expression
Rule 32    expression -> MINUS expression
Rule 33    expression -> PLUS expression
Rule 34    expression -> BIT_NEG expression
Rule 35    expression -> NOT expression
Rule 36    expression -> LPAREN expression RPAREN
Rule 37    boolean -> TRUE
Rule 38    boolean -> FALSE
Rule 39    assignable -> primitive
Rule 40    assignable -> expression
Rule 41    arguments -> arguments COMMA expression
Rule 42    arguments -> expression
Rule 43    arguments -> <empty>
Rule 44    expression -> LSQBRACK arguments RSQBRACK
Rule 45    expression -> identifier LSQBRACK expression RSQBRACK
Rule 46    expression -> identifier LSQBRACK expression COLON expression RSQBRACK
Rule 47    expression -> identifier LSQBRACK COLON expression RSQBRACK
Rule 48    expression -> identifier LSQBRACK expression COLON RSQBRACK
Rule 49    expression -> identifier LSQBRACK COLON RSQBRACK
Rule 50    statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression
Rule 51    expression -> identifier EQUALS assignable
Rule 52    if_statement -> IF expression THEN LBRACK statement_list RBRACK
Rule 53    if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
Rule 54    if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
Rule 55    expression -> expression IN expression
Rule 56    expression -> expression NOT IN expression
Rule 57    statement -> SETOUT LPAREN arguments RPAREN
Rule 58    statement -> identifier PLUS_EQ expression
Rule 59    statement -> identifier MINUS_EQ expression
Rule 60    statement -> identifier MUL_EQ expression
Rule 61    statement -> identifier DIV_EQ expression
Rule 62    statement -> identifier EXP_EQ expression
Rule 63    statement -> identifier MOD_EQ expression
Rule 64    expression -> identifier PLUS_EQUAL NUM_INT
Rule 65    expression -> identifier MINUS_EQUAL NUM_INT
Rule 66    expression -> primitive
Rule 67    expression -> STRING
Rule 68    expression -> identifier
Rule 69    statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
Rule 70    statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
Rule 71    statement -> FOR identifier IN expression LBRACK statement_list RBRACK
Rule 72    statement -> WHILE expression DO LBRACK statement_list RBRACK
Rule 73    statement -> PROCESS identifier DO LBRACK statement_list RBRACK
Rule 74    expression -> identifier LPAREN arguments RPAREN
Rule 75    statement -> identifier LPAREN arguments RPAREN

Terminals, with rules where they appear

AND                  : 30
ARROW_LTR            : 69
ARROW_RTL            : 70
BEGIN                : 1
BIT_AND              : 19
BIT_NEG              : 34
BIT_OR               : 20
BIT_XOR              : 21
COLON                : 46 47 48 49
COMMA                : 41
DIV                  : 16
DIV_EQ               : 61
DO                   : 69 70 72 73
ELSE                 : 53 54
END                  : 1
EQ                   : 24
EQUALS               : 50 51
EXIT                 : 8
EXP                  : 17
EXP_EQ               : 62
FALSE                : 38
FOR                  : 69 70 71
GT                   : 26
GTE                  : 27
IDENTIFIER           : 7
IF                   : 52 53 54
IN                   : 55 56 69 70 71
LBRACK               : 52 53 53 54 69 70 71 72 73
LPAREN               : 36 57 74 75
LSHIFT               : 22
LSQBRACK             : 44 45 46 47 48 49 50
LT                   : 28
LTE                  : 29
MINUS                : 14 32
MINUS_EQ             : 59
MINUS_EQUAL          : 65
MOD                  : 18
MOD_EQ               : 63
MUL                  : 15
MUL_EQ               : 60
NEQ                  : 25
NEWLINE              : 
NOT                  : 35 56
NUM_FLOAT            : 10
NUM_INT              : 9 64 65
OR                   : 31
PLUS                 : 13 33
PLUS_EQ              : 58
PLUS_EQUAL           : 64
PROCESS              : 73
RBRACK               : 52 53 53 54 69 70 71 72 73
RPAREN               : 36 57 74 75
RSHIFT               : 23
RSQBRACK             : 44 45 46 47 48 49 50
SETOUT               : 57
STRING               : 11 67
THEN                 : 52 53 54
TRUE                 : 37
WHILE                : 72
error                : 

Nonterminals, with rules where they appear

arguments            : 41 44 57 74 75
assignable           : 51
boolean              : 12
expression           : 5 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 33 34 35 36 40 41 42 45 46 46 47 48 50 50 52 53 54 55 55 56 56 58 59 60 61 62 63 69 69 70 70 71 72
identifier           : 4 45 46 47 48 49 50 51 58 59 60 61 62 63 64 65 68 69 70 71 73 74 75
if_statement         : 6 54
primitive            : 39 66
program              : 0
statement            : 2 3
statement_list       : 1 3 52 53 53 54 69 70 71 72 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BEGIN statement_list END

    BEGIN           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BEGIN . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 3

    (1) program -> BEGIN statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    END             shift and go to state 28
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    statement                      shift and go to state 29
    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 4

    (2) statement_list -> statement .

    END             reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    SETOUT          reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    PROCESS         reduce using rule 2 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    MINUS           reduce using rule 2 (statement_list -> statement .)
    PLUS            reduce using rule 2 (statement_list -> statement .)
    BIT_NEG         reduce using rule 2 (statement_list -> statement .)
    NOT             reduce using rule 2 (statement_list -> statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement .)
    LSQBRACK        reduce using rule 2 (statement_list -> statement .)
    STRING          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    NUM_INT         reduce using rule 2 (statement_list -> statement .)
    NUM_FLOAT       reduce using rule 2 (statement_list -> statement .)
    TRUE            reduce using rule 2 (statement_list -> statement .)
    FALSE           reduce using rule 2 (statement_list -> statement .)
    RBRACK          reduce using rule 2 (statement_list -> statement .)


state 5

    (4) statement -> identifier .
    (50) statement -> identifier . LSQBRACK expression RSQBRACK EQUALS expression
    (58) statement -> identifier . PLUS_EQ expression
    (59) statement -> identifier . MINUS_EQ expression
    (60) statement -> identifier . MUL_EQ expression
    (61) statement -> identifier . DIV_EQ expression
    (62) statement -> identifier . EXP_EQ expression
    (63) statement -> identifier . MOD_EQ expression
    (75) statement -> identifier . LPAREN arguments RPAREN
    (45) expression -> identifier . LSQBRACK expression RSQBRACK
    (46) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (48) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (49) expression -> identifier . LSQBRACK COLON RSQBRACK
    (51) expression -> identifier . EQUALS assignable
    (64) expression -> identifier . PLUS_EQUAL NUM_INT
    (65) expression -> identifier . MINUS_EQUAL NUM_INT
    (68) expression -> identifier .
    (74) expression -> identifier . LPAREN arguments RPAREN

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for END resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for EXIT resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for SETOUT resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for PROCESS resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 4 (statement -> identifier .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for IF resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (statement -> identifier .)
  ! reduce/reduce conflict for RBRACK resolved using rule 4 (statement -> identifier .)
    END             reduce using rule 4 (statement -> identifier .)
    EXIT            reduce using rule 4 (statement -> identifier .)
    SETOUT          reduce using rule 4 (statement -> identifier .)
    FOR             reduce using rule 4 (statement -> identifier .)
    WHILE           reduce using rule 4 (statement -> identifier .)
    PROCESS         reduce using rule 4 (statement -> identifier .)
    IDENTIFIER      reduce using rule 4 (statement -> identifier .)
    MINUS           reduce using rule 4 (statement -> identifier .)
    PLUS            reduce using rule 4 (statement -> identifier .)
    BIT_NEG         reduce using rule 4 (statement -> identifier .)
    NOT             reduce using rule 4 (statement -> identifier .)
    STRING          reduce using rule 4 (statement -> identifier .)
    IF              reduce using rule 4 (statement -> identifier .)
    NUM_INT         reduce using rule 4 (statement -> identifier .)
    NUM_FLOAT       reduce using rule 4 (statement -> identifier .)
    TRUE            reduce using rule 4 (statement -> identifier .)
    FALSE           reduce using rule 4 (statement -> identifier .)
    RBRACK          reduce using rule 4 (statement -> identifier .)
    LSQBRACK        shift and go to state 30
    PLUS_EQ         shift and go to state 32
    MINUS_EQ        shift and go to state 33
    MUL_EQ          shift and go to state 34
    DIV_EQ          shift and go to state 35
    EXP_EQ          shift and go to state 36
    MOD_EQ          shift and go to state 37
    LPAREN          shift and go to state 38
    EQUALS          shift and go to state 31
    PLUS_EQUAL      shift and go to state 39
    MINUS_EQUAL     shift and go to state 40
    MUL             reduce using rule 68 (expression -> identifier .)
    DIV             reduce using rule 68 (expression -> identifier .)
    EXP             reduce using rule 68 (expression -> identifier .)
    MOD             reduce using rule 68 (expression -> identifier .)
    BIT_AND         reduce using rule 68 (expression -> identifier .)
    BIT_OR          reduce using rule 68 (expression -> identifier .)
    BIT_XOR         reduce using rule 68 (expression -> identifier .)
    LSHIFT          reduce using rule 68 (expression -> identifier .)
    RSHIFT          reduce using rule 68 (expression -> identifier .)
    IN              reduce using rule 68 (expression -> identifier .)
    EQ              reduce using rule 68 (expression -> identifier .)
    NEQ             reduce using rule 68 (expression -> identifier .)
    GT              reduce using rule 68 (expression -> identifier .)
    GTE             reduce using rule 68 (expression -> identifier .)
    LT              reduce using rule 68 (expression -> identifier .)
    LTE             reduce using rule 68 (expression -> identifier .)
    AND             reduce using rule 68 (expression -> identifier .)
    OR              reduce using rule 68 (expression -> identifier .)

  ! LPAREN          [ reduce using rule 4 (statement -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 4 (statement -> identifier .) ]
  ! PLUS            [ reduce using rule 68 (expression -> identifier .) ]
  ! MINUS           [ reduce using rule 68 (expression -> identifier .) ]
  ! NOT             [ reduce using rule 68 (expression -> identifier .) ]
  ! END             [ reduce using rule 68 (expression -> identifier .) ]
  ! EXIT            [ reduce using rule 68 (expression -> identifier .) ]
  ! SETOUT          [ reduce using rule 68 (expression -> identifier .) ]
  ! FOR             [ reduce using rule 68 (expression -> identifier .) ]
  ! WHILE           [ reduce using rule 68 (expression -> identifier .) ]
  ! PROCESS         [ reduce using rule 68 (expression -> identifier .) ]
  ! IDENTIFIER      [ reduce using rule 68 (expression -> identifier .) ]
  ! BIT_NEG         [ reduce using rule 68 (expression -> identifier .) ]
  ! LPAREN          [ reduce using rule 68 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 68 (expression -> identifier .) ]
  ! STRING          [ reduce using rule 68 (expression -> identifier .) ]
  ! IF              [ reduce using rule 68 (expression -> identifier .) ]
  ! NUM_INT         [ reduce using rule 68 (expression -> identifier .) ]
  ! NUM_FLOAT       [ reduce using rule 68 (expression -> identifier .) ]
  ! TRUE            [ reduce using rule 68 (expression -> identifier .) ]
  ! FALSE           [ reduce using rule 68 (expression -> identifier .) ]
  ! RBRACK          [ reduce using rule 68 (expression -> identifier .) ]


state 6

    (5) statement -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 5 (statement -> expression .)
    EXIT            reduce using rule 5 (statement -> expression .)
    SETOUT          reduce using rule 5 (statement -> expression .)
    FOR             reduce using rule 5 (statement -> expression .)
    WHILE           reduce using rule 5 (statement -> expression .)
    PROCESS         reduce using rule 5 (statement -> expression .)
    IDENTIFIER      reduce using rule 5 (statement -> expression .)
    BIT_NEG         reduce using rule 5 (statement -> expression .)
    LPAREN          reduce using rule 5 (statement -> expression .)
    LSQBRACK        reduce using rule 5 (statement -> expression .)
    STRING          reduce using rule 5 (statement -> expression .)
    IF              reduce using rule 5 (statement -> expression .)
    NUM_INT         reduce using rule 5 (statement -> expression .)
    NUM_FLOAT       reduce using rule 5 (statement -> expression .)
    TRUE            reduce using rule 5 (statement -> expression .)
    FALSE           reduce using rule 5 (statement -> expression .)
    RBRACK          reduce using rule 5 (statement -> expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 5 (statement -> expression .) ]
  ! PLUS            [ reduce using rule 5 (statement -> expression .) ]
  ! NOT             [ reduce using rule 5 (statement -> expression .) ]


state 7

    (6) statement -> if_statement .

    END             reduce using rule 6 (statement -> if_statement .)
    EXIT            reduce using rule 6 (statement -> if_statement .)
    SETOUT          reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    PROCESS         reduce using rule 6 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    PLUS            reduce using rule 6 (statement -> if_statement .)
    BIT_NEG         reduce using rule 6 (statement -> if_statement .)
    NOT             reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    LSQBRACK        reduce using rule 6 (statement -> if_statement .)
    STRING          reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    NUM_INT         reduce using rule 6 (statement -> if_statement .)
    NUM_FLOAT       reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    RBRACK          reduce using rule 6 (statement -> if_statement .)


state 8

    (8) statement -> EXIT .

    END             reduce using rule 8 (statement -> EXIT .)
    EXIT            reduce using rule 8 (statement -> EXIT .)
    SETOUT          reduce using rule 8 (statement -> EXIT .)
    FOR             reduce using rule 8 (statement -> EXIT .)
    WHILE           reduce using rule 8 (statement -> EXIT .)
    PROCESS         reduce using rule 8 (statement -> EXIT .)
    IDENTIFIER      reduce using rule 8 (statement -> EXIT .)
    MINUS           reduce using rule 8 (statement -> EXIT .)
    PLUS            reduce using rule 8 (statement -> EXIT .)
    BIT_NEG         reduce using rule 8 (statement -> EXIT .)
    NOT             reduce using rule 8 (statement -> EXIT .)
    LPAREN          reduce using rule 8 (statement -> EXIT .)
    LSQBRACK        reduce using rule 8 (statement -> EXIT .)
    STRING          reduce using rule 8 (statement -> EXIT .)
    IF              reduce using rule 8 (statement -> EXIT .)
    NUM_INT         reduce using rule 8 (statement -> EXIT .)
    NUM_FLOAT       reduce using rule 8 (statement -> EXIT .)
    TRUE            reduce using rule 8 (statement -> EXIT .)
    FALSE           reduce using rule 8 (statement -> EXIT .)
    RBRACK          reduce using rule 8 (statement -> EXIT .)


state 9

    (44) expression -> LSQBRACK . arguments RSQBRACK
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RSQBRACK        reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    arguments                      shift and go to state 62
    expression                     shift and go to state 63
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 10

    (57) statement -> SETOUT . LPAREN arguments RPAREN

    LPAREN          shift and go to state 65


state 11

    (36) expression -> LPAREN . expression RPAREN
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 66
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 12

    (69) statement -> FOR . identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> FOR . identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> FOR . identifier IN expression LBRACK statement_list RBRACK
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 67

state 13

    (72) statement -> WHILE . expression DO LBRACK statement_list RBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 68
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 14

    (73) statement -> PROCESS . identifier DO LBRACK statement_list RBRACK
    (7) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 69

state 15

    (7) identifier -> IDENTIFIER .

    LSQBRACK        reduce using rule 7 (identifier -> IDENTIFIER .)
    PLUS_EQ         reduce using rule 7 (identifier -> IDENTIFIER .)
    MINUS_EQ        reduce using rule 7 (identifier -> IDENTIFIER .)
    MUL_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    DIV_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    EXP_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    MOD_EQ          reduce using rule 7 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 7 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (identifier -> IDENTIFIER .)
    PLUS_EQUAL      reduce using rule 7 (identifier -> IDENTIFIER .)
    MINUS_EQUAL     reduce using rule 7 (identifier -> IDENTIFIER .)
    END             reduce using rule 7 (identifier -> IDENTIFIER .)
    EXIT            reduce using rule 7 (identifier -> IDENTIFIER .)
    SETOUT          reduce using rule 7 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 7 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 7 (identifier -> IDENTIFIER .)
    PROCESS         reduce using rule 7 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 7 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 7 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_NEG         reduce using rule 7 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 7 (identifier -> IDENTIFIER .)
    STRING          reduce using rule 7 (identifier -> IDENTIFIER .)
    IF              reduce using rule 7 (identifier -> IDENTIFIER .)
    NUM_INT         reduce using rule 7 (identifier -> IDENTIFIER .)
    NUM_FLOAT       reduce using rule 7 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 7 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 7 (identifier -> IDENTIFIER .)
    MUL             reduce using rule 7 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 7 (identifier -> IDENTIFIER .)
    EXP             reduce using rule 7 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_AND         reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_OR          reduce using rule 7 (identifier -> IDENTIFIER .)
    BIT_XOR         reduce using rule 7 (identifier -> IDENTIFIER .)
    LSHIFT          reduce using rule 7 (identifier -> IDENTIFIER .)
    RSHIFT          reduce using rule 7 (identifier -> IDENTIFIER .)
    IN              reduce using rule 7 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 7 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 7 (identifier -> IDENTIFIER .)
    GT              reduce using rule 7 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 7 (identifier -> IDENTIFIER .)
    LT              reduce using rule 7 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 7 (identifier -> IDENTIFIER .)
    AND             reduce using rule 7 (identifier -> IDENTIFIER .)
    OR              reduce using rule 7 (identifier -> IDENTIFIER .)
    RSQBRACK        reduce using rule 7 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 7 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 7 (identifier -> IDENTIFIER .)
    DO              reduce using rule 7 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 7 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 7 (identifier -> IDENTIFIER .)
    RBRACK          reduce using rule 7 (identifier -> IDENTIFIER .)
    ARROW_LTR       reduce using rule 7 (identifier -> IDENTIFIER .)
    ARROW_RTL       reduce using rule 7 (identifier -> IDENTIFIER .)
    LBRACK          reduce using rule 7 (identifier -> IDENTIFIER .)


state 16

    (33) expression -> PLUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 70
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 17

    (32) expression -> MINUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 71
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 18

    (34) expression -> BIT_NEG . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 72
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 19

    (35) expression -> NOT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 73
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 20

    (9) primitive -> NUM_INT .

    PLUS            reduce using rule 9 (primitive -> NUM_INT .)
    MINUS           reduce using rule 9 (primitive -> NUM_INT .)
    MUL             reduce using rule 9 (primitive -> NUM_INT .)
    DIV             reduce using rule 9 (primitive -> NUM_INT .)
    EXP             reduce using rule 9 (primitive -> NUM_INT .)
    MOD             reduce using rule 9 (primitive -> NUM_INT .)
    BIT_AND         reduce using rule 9 (primitive -> NUM_INT .)
    BIT_OR          reduce using rule 9 (primitive -> NUM_INT .)
    BIT_XOR         reduce using rule 9 (primitive -> NUM_INT .)
    LSHIFT          reduce using rule 9 (primitive -> NUM_INT .)
    RSHIFT          reduce using rule 9 (primitive -> NUM_INT .)
    IN              reduce using rule 9 (primitive -> NUM_INT .)
    NOT             reduce using rule 9 (primitive -> NUM_INT .)
    EQ              reduce using rule 9 (primitive -> NUM_INT .)
    NEQ             reduce using rule 9 (primitive -> NUM_INT .)
    GT              reduce using rule 9 (primitive -> NUM_INT .)
    GTE             reduce using rule 9 (primitive -> NUM_INT .)
    LT              reduce using rule 9 (primitive -> NUM_INT .)
    LTE             reduce using rule 9 (primitive -> NUM_INT .)
    AND             reduce using rule 9 (primitive -> NUM_INT .)
    OR              reduce using rule 9 (primitive -> NUM_INT .)
    END             reduce using rule 9 (primitive -> NUM_INT .)
    EXIT            reduce using rule 9 (primitive -> NUM_INT .)
    SETOUT          reduce using rule 9 (primitive -> NUM_INT .)
    FOR             reduce using rule 9 (primitive -> NUM_INT .)
    WHILE           reduce using rule 9 (primitive -> NUM_INT .)
    PROCESS         reduce using rule 9 (primitive -> NUM_INT .)
    IDENTIFIER      reduce using rule 9 (primitive -> NUM_INT .)
    BIT_NEG         reduce using rule 9 (primitive -> NUM_INT .)
    LPAREN          reduce using rule 9 (primitive -> NUM_INT .)
    LSQBRACK        reduce using rule 9 (primitive -> NUM_INT .)
    STRING          reduce using rule 9 (primitive -> NUM_INT .)
    IF              reduce using rule 9 (primitive -> NUM_INT .)
    NUM_INT         reduce using rule 9 (primitive -> NUM_INT .)
    NUM_FLOAT       reduce using rule 9 (primitive -> NUM_INT .)
    TRUE            reduce using rule 9 (primitive -> NUM_INT .)
    FALSE           reduce using rule 9 (primitive -> NUM_INT .)
    RSQBRACK        reduce using rule 9 (primitive -> NUM_INT .)
    COMMA           reduce using rule 9 (primitive -> NUM_INT .)
    RPAREN          reduce using rule 9 (primitive -> NUM_INT .)
    DO              reduce using rule 9 (primitive -> NUM_INT .)
    THEN            reduce using rule 9 (primitive -> NUM_INT .)
    COLON           reduce using rule 9 (primitive -> NUM_INT .)
    RBRACK          reduce using rule 9 (primitive -> NUM_INT .)
    ARROW_LTR       reduce using rule 9 (primitive -> NUM_INT .)
    ARROW_RTL       reduce using rule 9 (primitive -> NUM_INT .)
    LBRACK          reduce using rule 9 (primitive -> NUM_INT .)


state 21

    (66) expression -> primitive .

    PLUS            reduce using rule 66 (expression -> primitive .)
    MINUS           reduce using rule 66 (expression -> primitive .)
    MUL             reduce using rule 66 (expression -> primitive .)
    DIV             reduce using rule 66 (expression -> primitive .)
    EXP             reduce using rule 66 (expression -> primitive .)
    MOD             reduce using rule 66 (expression -> primitive .)
    BIT_AND         reduce using rule 66 (expression -> primitive .)
    BIT_OR          reduce using rule 66 (expression -> primitive .)
    BIT_XOR         reduce using rule 66 (expression -> primitive .)
    LSHIFT          reduce using rule 66 (expression -> primitive .)
    RSHIFT          reduce using rule 66 (expression -> primitive .)
    IN              reduce using rule 66 (expression -> primitive .)
    NOT             reduce using rule 66 (expression -> primitive .)
    EQ              reduce using rule 66 (expression -> primitive .)
    NEQ             reduce using rule 66 (expression -> primitive .)
    GT              reduce using rule 66 (expression -> primitive .)
    GTE             reduce using rule 66 (expression -> primitive .)
    LT              reduce using rule 66 (expression -> primitive .)
    LTE             reduce using rule 66 (expression -> primitive .)
    AND             reduce using rule 66 (expression -> primitive .)
    OR              reduce using rule 66 (expression -> primitive .)
    END             reduce using rule 66 (expression -> primitive .)
    EXIT            reduce using rule 66 (expression -> primitive .)
    SETOUT          reduce using rule 66 (expression -> primitive .)
    FOR             reduce using rule 66 (expression -> primitive .)
    WHILE           reduce using rule 66 (expression -> primitive .)
    PROCESS         reduce using rule 66 (expression -> primitive .)
    IDENTIFIER      reduce using rule 66 (expression -> primitive .)
    BIT_NEG         reduce using rule 66 (expression -> primitive .)
    LPAREN          reduce using rule 66 (expression -> primitive .)
    LSQBRACK        reduce using rule 66 (expression -> primitive .)
    STRING          reduce using rule 66 (expression -> primitive .)
    IF              reduce using rule 66 (expression -> primitive .)
    NUM_INT         reduce using rule 66 (expression -> primitive .)
    NUM_FLOAT       reduce using rule 66 (expression -> primitive .)
    TRUE            reduce using rule 66 (expression -> primitive .)
    FALSE           reduce using rule 66 (expression -> primitive .)
    RSQBRACK        reduce using rule 66 (expression -> primitive .)
    COMMA           reduce using rule 66 (expression -> primitive .)
    RPAREN          reduce using rule 66 (expression -> primitive .)
    DO              reduce using rule 66 (expression -> primitive .)
    THEN            reduce using rule 66 (expression -> primitive .)
    COLON           reduce using rule 66 (expression -> primitive .)
    RBRACK          reduce using rule 66 (expression -> primitive .)
    ARROW_LTR       reduce using rule 66 (expression -> primitive .)
    ARROW_RTL       reduce using rule 66 (expression -> primitive .)
    LBRACK          reduce using rule 66 (expression -> primitive .)


state 22

    (67) expression -> STRING .
    (11) primitive -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MUL resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for END resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EXIT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for SETOUT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for PROCESS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IF resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RSQBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for DO resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for THEN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for ARROW_LTR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for ARROW_RTL resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LBRACK resolved using rule 11 (primitive -> STRING .)
    PLUS            reduce using rule 11 (primitive -> STRING .)
    MINUS           reduce using rule 11 (primitive -> STRING .)
    MUL             reduce using rule 11 (primitive -> STRING .)
    DIV             reduce using rule 11 (primitive -> STRING .)
    EXP             reduce using rule 11 (primitive -> STRING .)
    MOD             reduce using rule 11 (primitive -> STRING .)
    BIT_AND         reduce using rule 11 (primitive -> STRING .)
    BIT_OR          reduce using rule 11 (primitive -> STRING .)
    BIT_XOR         reduce using rule 11 (primitive -> STRING .)
    LSHIFT          reduce using rule 11 (primitive -> STRING .)
    RSHIFT          reduce using rule 11 (primitive -> STRING .)
    IN              reduce using rule 11 (primitive -> STRING .)
    NOT             reduce using rule 11 (primitive -> STRING .)
    EQ              reduce using rule 11 (primitive -> STRING .)
    NEQ             reduce using rule 11 (primitive -> STRING .)
    GT              reduce using rule 11 (primitive -> STRING .)
    GTE             reduce using rule 11 (primitive -> STRING .)
    LT              reduce using rule 11 (primitive -> STRING .)
    LTE             reduce using rule 11 (primitive -> STRING .)
    AND             reduce using rule 11 (primitive -> STRING .)
    OR              reduce using rule 11 (primitive -> STRING .)
    END             reduce using rule 11 (primitive -> STRING .)
    EXIT            reduce using rule 11 (primitive -> STRING .)
    SETOUT          reduce using rule 11 (primitive -> STRING .)
    FOR             reduce using rule 11 (primitive -> STRING .)
    WHILE           reduce using rule 11 (primitive -> STRING .)
    PROCESS         reduce using rule 11 (primitive -> STRING .)
    IDENTIFIER      reduce using rule 11 (primitive -> STRING .)
    BIT_NEG         reduce using rule 11 (primitive -> STRING .)
    LPAREN          reduce using rule 11 (primitive -> STRING .)
    LSQBRACK        reduce using rule 11 (primitive -> STRING .)
    STRING          reduce using rule 11 (primitive -> STRING .)
    IF              reduce using rule 11 (primitive -> STRING .)
    NUM_INT         reduce using rule 11 (primitive -> STRING .)
    NUM_FLOAT       reduce using rule 11 (primitive -> STRING .)
    TRUE            reduce using rule 11 (primitive -> STRING .)
    FALSE           reduce using rule 11 (primitive -> STRING .)
    RSQBRACK        reduce using rule 11 (primitive -> STRING .)
    COMMA           reduce using rule 11 (primitive -> STRING .)
    RPAREN          reduce using rule 11 (primitive -> STRING .)
    DO              reduce using rule 11 (primitive -> STRING .)
    THEN            reduce using rule 11 (primitive -> STRING .)
    COLON           reduce using rule 11 (primitive -> STRING .)
    RBRACK          reduce using rule 11 (primitive -> STRING .)
    ARROW_LTR       reduce using rule 11 (primitive -> STRING .)
    ARROW_RTL       reduce using rule 11 (primitive -> STRING .)
    LBRACK          reduce using rule 11 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 67 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 67 (expression -> STRING .) ]
  ! MUL             [ reduce using rule 67 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 67 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 67 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 67 (expression -> STRING .) ]
  ! LSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! RSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! IN              [ reduce using rule 67 (expression -> STRING .) ]
  ! NOT             [ reduce using rule 67 (expression -> STRING .) ]
  ! EQ              [ reduce using rule 67 (expression -> STRING .) ]
  ! NEQ             [ reduce using rule 67 (expression -> STRING .) ]
  ! GT              [ reduce using rule 67 (expression -> STRING .) ]
  ! GTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! LT              [ reduce using rule 67 (expression -> STRING .) ]
  ! LTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! AND             [ reduce using rule 67 (expression -> STRING .) ]
  ! OR              [ reduce using rule 67 (expression -> STRING .) ]
  ! END             [ reduce using rule 67 (expression -> STRING .) ]
  ! EXIT            [ reduce using rule 67 (expression -> STRING .) ]
  ! SETOUT          [ reduce using rule 67 (expression -> STRING .) ]
  ! FOR             [ reduce using rule 67 (expression -> STRING .) ]
  ! WHILE           [ reduce using rule 67 (expression -> STRING .) ]
  ! PROCESS         [ reduce using rule 67 (expression -> STRING .) ]
  ! IDENTIFIER      [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_NEG         [ reduce using rule 67 (expression -> STRING .) ]
  ! LPAREN          [ reduce using rule 67 (expression -> STRING .) ]
  ! LSQBRACK        [ reduce using rule 67 (expression -> STRING .) ]
  ! STRING          [ reduce using rule 67 (expression -> STRING .) ]
  ! IF              [ reduce using rule 67 (expression -> STRING .) ]
  ! NUM_INT         [ reduce using rule 67 (expression -> STRING .) ]
  ! NUM_FLOAT       [ reduce using rule 67 (expression -> STRING .) ]
  ! TRUE            [ reduce using rule 67 (expression -> STRING .) ]
  ! FALSE           [ reduce using rule 67 (expression -> STRING .) ]
  ! RSQBRACK        [ reduce using rule 67 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 67 (expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 67 (expression -> STRING .) ]
  ! DO              [ reduce using rule 67 (expression -> STRING .) ]
  ! THEN            [ reduce using rule 67 (expression -> STRING .) ]
  ! COLON           [ reduce using rule 67 (expression -> STRING .) ]
  ! RBRACK          [ reduce using rule 67 (expression -> STRING .) ]
  ! ARROW_LTR       [ reduce using rule 67 (expression -> STRING .) ]
  ! ARROW_RTL       [ reduce using rule 67 (expression -> STRING .) ]
  ! LBRACK          [ reduce using rule 67 (expression -> STRING .) ]


state 23

    (52) if_statement -> IF . expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> IF . expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF . expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 74
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 24

    (10) primitive -> NUM_FLOAT .

    PLUS            reduce using rule 10 (primitive -> NUM_FLOAT .)
    MINUS           reduce using rule 10 (primitive -> NUM_FLOAT .)
    MUL             reduce using rule 10 (primitive -> NUM_FLOAT .)
    DIV             reduce using rule 10 (primitive -> NUM_FLOAT .)
    EXP             reduce using rule 10 (primitive -> NUM_FLOAT .)
    MOD             reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_AND         reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_OR          reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_XOR         reduce using rule 10 (primitive -> NUM_FLOAT .)
    LSHIFT          reduce using rule 10 (primitive -> NUM_FLOAT .)
    RSHIFT          reduce using rule 10 (primitive -> NUM_FLOAT .)
    IN              reduce using rule 10 (primitive -> NUM_FLOAT .)
    NOT             reduce using rule 10 (primitive -> NUM_FLOAT .)
    EQ              reduce using rule 10 (primitive -> NUM_FLOAT .)
    NEQ             reduce using rule 10 (primitive -> NUM_FLOAT .)
    GT              reduce using rule 10 (primitive -> NUM_FLOAT .)
    GTE             reduce using rule 10 (primitive -> NUM_FLOAT .)
    LT              reduce using rule 10 (primitive -> NUM_FLOAT .)
    LTE             reduce using rule 10 (primitive -> NUM_FLOAT .)
    AND             reduce using rule 10 (primitive -> NUM_FLOAT .)
    OR              reduce using rule 10 (primitive -> NUM_FLOAT .)
    END             reduce using rule 10 (primitive -> NUM_FLOAT .)
    EXIT            reduce using rule 10 (primitive -> NUM_FLOAT .)
    SETOUT          reduce using rule 10 (primitive -> NUM_FLOAT .)
    FOR             reduce using rule 10 (primitive -> NUM_FLOAT .)
    WHILE           reduce using rule 10 (primitive -> NUM_FLOAT .)
    PROCESS         reduce using rule 10 (primitive -> NUM_FLOAT .)
    IDENTIFIER      reduce using rule 10 (primitive -> NUM_FLOAT .)
    BIT_NEG         reduce using rule 10 (primitive -> NUM_FLOAT .)
    LPAREN          reduce using rule 10 (primitive -> NUM_FLOAT .)
    LSQBRACK        reduce using rule 10 (primitive -> NUM_FLOAT .)
    STRING          reduce using rule 10 (primitive -> NUM_FLOAT .)
    IF              reduce using rule 10 (primitive -> NUM_FLOAT .)
    NUM_INT         reduce using rule 10 (primitive -> NUM_FLOAT .)
    NUM_FLOAT       reduce using rule 10 (primitive -> NUM_FLOAT .)
    TRUE            reduce using rule 10 (primitive -> NUM_FLOAT .)
    FALSE           reduce using rule 10 (primitive -> NUM_FLOAT .)
    RSQBRACK        reduce using rule 10 (primitive -> NUM_FLOAT .)
    COMMA           reduce using rule 10 (primitive -> NUM_FLOAT .)
    RPAREN          reduce using rule 10 (primitive -> NUM_FLOAT .)
    DO              reduce using rule 10 (primitive -> NUM_FLOAT .)
    THEN            reduce using rule 10 (primitive -> NUM_FLOAT .)
    COLON           reduce using rule 10 (primitive -> NUM_FLOAT .)
    RBRACK          reduce using rule 10 (primitive -> NUM_FLOAT .)
    ARROW_LTR       reduce using rule 10 (primitive -> NUM_FLOAT .)
    ARROW_RTL       reduce using rule 10 (primitive -> NUM_FLOAT .)
    LBRACK          reduce using rule 10 (primitive -> NUM_FLOAT .)


state 25

    (12) primitive -> boolean .

    PLUS            reduce using rule 12 (primitive -> boolean .)
    MINUS           reduce using rule 12 (primitive -> boolean .)
    MUL             reduce using rule 12 (primitive -> boolean .)
    DIV             reduce using rule 12 (primitive -> boolean .)
    EXP             reduce using rule 12 (primitive -> boolean .)
    MOD             reduce using rule 12 (primitive -> boolean .)
    BIT_AND         reduce using rule 12 (primitive -> boolean .)
    BIT_OR          reduce using rule 12 (primitive -> boolean .)
    BIT_XOR         reduce using rule 12 (primitive -> boolean .)
    LSHIFT          reduce using rule 12 (primitive -> boolean .)
    RSHIFT          reduce using rule 12 (primitive -> boolean .)
    IN              reduce using rule 12 (primitive -> boolean .)
    NOT             reduce using rule 12 (primitive -> boolean .)
    EQ              reduce using rule 12 (primitive -> boolean .)
    NEQ             reduce using rule 12 (primitive -> boolean .)
    GT              reduce using rule 12 (primitive -> boolean .)
    GTE             reduce using rule 12 (primitive -> boolean .)
    LT              reduce using rule 12 (primitive -> boolean .)
    LTE             reduce using rule 12 (primitive -> boolean .)
    AND             reduce using rule 12 (primitive -> boolean .)
    OR              reduce using rule 12 (primitive -> boolean .)
    END             reduce using rule 12 (primitive -> boolean .)
    EXIT            reduce using rule 12 (primitive -> boolean .)
    SETOUT          reduce using rule 12 (primitive -> boolean .)
    FOR             reduce using rule 12 (primitive -> boolean .)
    WHILE           reduce using rule 12 (primitive -> boolean .)
    PROCESS         reduce using rule 12 (primitive -> boolean .)
    IDENTIFIER      reduce using rule 12 (primitive -> boolean .)
    BIT_NEG         reduce using rule 12 (primitive -> boolean .)
    LPAREN          reduce using rule 12 (primitive -> boolean .)
    LSQBRACK        reduce using rule 12 (primitive -> boolean .)
    STRING          reduce using rule 12 (primitive -> boolean .)
    IF              reduce using rule 12 (primitive -> boolean .)
    NUM_INT         reduce using rule 12 (primitive -> boolean .)
    NUM_FLOAT       reduce using rule 12 (primitive -> boolean .)
    TRUE            reduce using rule 12 (primitive -> boolean .)
    FALSE           reduce using rule 12 (primitive -> boolean .)
    RSQBRACK        reduce using rule 12 (primitive -> boolean .)
    COMMA           reduce using rule 12 (primitive -> boolean .)
    RPAREN          reduce using rule 12 (primitive -> boolean .)
    DO              reduce using rule 12 (primitive -> boolean .)
    THEN            reduce using rule 12 (primitive -> boolean .)
    COLON           reduce using rule 12 (primitive -> boolean .)
    RBRACK          reduce using rule 12 (primitive -> boolean .)
    ARROW_LTR       reduce using rule 12 (primitive -> boolean .)
    ARROW_RTL       reduce using rule 12 (primitive -> boolean .)
    LBRACK          reduce using rule 12 (primitive -> boolean .)


state 26

    (37) boolean -> TRUE .

    PLUS            reduce using rule 37 (boolean -> TRUE .)
    MINUS           reduce using rule 37 (boolean -> TRUE .)
    MUL             reduce using rule 37 (boolean -> TRUE .)
    DIV             reduce using rule 37 (boolean -> TRUE .)
    EXP             reduce using rule 37 (boolean -> TRUE .)
    MOD             reduce using rule 37 (boolean -> TRUE .)
    BIT_AND         reduce using rule 37 (boolean -> TRUE .)
    BIT_OR          reduce using rule 37 (boolean -> TRUE .)
    BIT_XOR         reduce using rule 37 (boolean -> TRUE .)
    LSHIFT          reduce using rule 37 (boolean -> TRUE .)
    RSHIFT          reduce using rule 37 (boolean -> TRUE .)
    IN              reduce using rule 37 (boolean -> TRUE .)
    NOT             reduce using rule 37 (boolean -> TRUE .)
    EQ              reduce using rule 37 (boolean -> TRUE .)
    NEQ             reduce using rule 37 (boolean -> TRUE .)
    GT              reduce using rule 37 (boolean -> TRUE .)
    GTE             reduce using rule 37 (boolean -> TRUE .)
    LT              reduce using rule 37 (boolean -> TRUE .)
    LTE             reduce using rule 37 (boolean -> TRUE .)
    AND             reduce using rule 37 (boolean -> TRUE .)
    OR              reduce using rule 37 (boolean -> TRUE .)
    END             reduce using rule 37 (boolean -> TRUE .)
    EXIT            reduce using rule 37 (boolean -> TRUE .)
    SETOUT          reduce using rule 37 (boolean -> TRUE .)
    FOR             reduce using rule 37 (boolean -> TRUE .)
    WHILE           reduce using rule 37 (boolean -> TRUE .)
    PROCESS         reduce using rule 37 (boolean -> TRUE .)
    IDENTIFIER      reduce using rule 37 (boolean -> TRUE .)
    BIT_NEG         reduce using rule 37 (boolean -> TRUE .)
    LPAREN          reduce using rule 37 (boolean -> TRUE .)
    LSQBRACK        reduce using rule 37 (boolean -> TRUE .)
    STRING          reduce using rule 37 (boolean -> TRUE .)
    IF              reduce using rule 37 (boolean -> TRUE .)
    NUM_INT         reduce using rule 37 (boolean -> TRUE .)
    NUM_FLOAT       reduce using rule 37 (boolean -> TRUE .)
    TRUE            reduce using rule 37 (boolean -> TRUE .)
    FALSE           reduce using rule 37 (boolean -> TRUE .)
    RSQBRACK        reduce using rule 37 (boolean -> TRUE .)
    COMMA           reduce using rule 37 (boolean -> TRUE .)
    RPAREN          reduce using rule 37 (boolean -> TRUE .)
    DO              reduce using rule 37 (boolean -> TRUE .)
    THEN            reduce using rule 37 (boolean -> TRUE .)
    COLON           reduce using rule 37 (boolean -> TRUE .)
    RBRACK          reduce using rule 37 (boolean -> TRUE .)
    ARROW_LTR       reduce using rule 37 (boolean -> TRUE .)
    ARROW_RTL       reduce using rule 37 (boolean -> TRUE .)
    LBRACK          reduce using rule 37 (boolean -> TRUE .)


state 27

    (38) boolean -> FALSE .

    PLUS            reduce using rule 38 (boolean -> FALSE .)
    MINUS           reduce using rule 38 (boolean -> FALSE .)
    MUL             reduce using rule 38 (boolean -> FALSE .)
    DIV             reduce using rule 38 (boolean -> FALSE .)
    EXP             reduce using rule 38 (boolean -> FALSE .)
    MOD             reduce using rule 38 (boolean -> FALSE .)
    BIT_AND         reduce using rule 38 (boolean -> FALSE .)
    BIT_OR          reduce using rule 38 (boolean -> FALSE .)
    BIT_XOR         reduce using rule 38 (boolean -> FALSE .)
    LSHIFT          reduce using rule 38 (boolean -> FALSE .)
    RSHIFT          reduce using rule 38 (boolean -> FALSE .)
    IN              reduce using rule 38 (boolean -> FALSE .)
    NOT             reduce using rule 38 (boolean -> FALSE .)
    EQ              reduce using rule 38 (boolean -> FALSE .)
    NEQ             reduce using rule 38 (boolean -> FALSE .)
    GT              reduce using rule 38 (boolean -> FALSE .)
    GTE             reduce using rule 38 (boolean -> FALSE .)
    LT              reduce using rule 38 (boolean -> FALSE .)
    LTE             reduce using rule 38 (boolean -> FALSE .)
    AND             reduce using rule 38 (boolean -> FALSE .)
    OR              reduce using rule 38 (boolean -> FALSE .)
    END             reduce using rule 38 (boolean -> FALSE .)
    EXIT            reduce using rule 38 (boolean -> FALSE .)
    SETOUT          reduce using rule 38 (boolean -> FALSE .)
    FOR             reduce using rule 38 (boolean -> FALSE .)
    WHILE           reduce using rule 38 (boolean -> FALSE .)
    PROCESS         reduce using rule 38 (boolean -> FALSE .)
    IDENTIFIER      reduce using rule 38 (boolean -> FALSE .)
    BIT_NEG         reduce using rule 38 (boolean -> FALSE .)
    LPAREN          reduce using rule 38 (boolean -> FALSE .)
    LSQBRACK        reduce using rule 38 (boolean -> FALSE .)
    STRING          reduce using rule 38 (boolean -> FALSE .)
    IF              reduce using rule 38 (boolean -> FALSE .)
    NUM_INT         reduce using rule 38 (boolean -> FALSE .)
    NUM_FLOAT       reduce using rule 38 (boolean -> FALSE .)
    TRUE            reduce using rule 38 (boolean -> FALSE .)
    FALSE           reduce using rule 38 (boolean -> FALSE .)
    RSQBRACK        reduce using rule 38 (boolean -> FALSE .)
    COMMA           reduce using rule 38 (boolean -> FALSE .)
    RPAREN          reduce using rule 38 (boolean -> FALSE .)
    DO              reduce using rule 38 (boolean -> FALSE .)
    THEN            reduce using rule 38 (boolean -> FALSE .)
    COLON           reduce using rule 38 (boolean -> FALSE .)
    RBRACK          reduce using rule 38 (boolean -> FALSE .)
    ARROW_LTR       reduce using rule 38 (boolean -> FALSE .)
    ARROW_RTL       reduce using rule 38 (boolean -> FALSE .)
    LBRACK          reduce using rule 38 (boolean -> FALSE .)


state 28

    (1) program -> BEGIN statement_list END .

    $end            reduce using rule 1 (program -> BEGIN statement_list END .)


state 29

    (3) statement_list -> statement_list statement .

    END             reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    SETOUT          reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    PROCESS         reduce using rule 3 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 3 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 3 (statement_list -> statement_list statement .)
    BIT_NEG         reduce using rule 3 (statement_list -> statement_list statement .)
    NOT             reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement_list statement .)
    LSQBRACK        reduce using rule 3 (statement_list -> statement_list statement .)
    STRING          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 3 (statement_list -> statement_list statement .)
    NUM_FLOAT       reduce using rule 3 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 3 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACK          reduce using rule 3 (statement_list -> statement_list statement .)


state 30

    (50) statement -> identifier LSQBRACK . expression RSQBRACK EQUALS expression
    (45) expression -> identifier LSQBRACK . expression RSQBRACK
    (46) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (47) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (49) expression -> identifier LSQBRACK . COLON RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    COLON           shift and go to state 76
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 75
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 31

    (51) expression -> identifier EQUALS . assignable
    (39) assignable -> . primitive
    (40) assignable -> . expression
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE
    (7) identifier -> . IDENTIFIER

    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    STRING          shift and go to state 80
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 64
    assignable                     shift and go to state 77
    primitive                      shift and go to state 78
    expression                     shift and go to state 79
    boolean                        shift and go to state 25

state 32

    (58) statement -> identifier PLUS_EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 81
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 33

    (59) statement -> identifier MINUS_EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 82
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 34

    (60) statement -> identifier MUL_EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 83
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 35

    (61) statement -> identifier DIV_EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 84
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 36

    (62) statement -> identifier EXP_EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 85
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 37

    (63) statement -> identifier MOD_EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 86
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 38

    (75) statement -> identifier LPAREN . arguments RPAREN
    (74) expression -> identifier LPAREN . arguments RPAREN
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RPAREN          reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    arguments                      shift and go to state 87
    expression                     shift and go to state 63
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 39

    (64) expression -> identifier PLUS_EQUAL . NUM_INT

    NUM_INT         shift and go to state 88


state 40

    (65) expression -> identifier MINUS_EQUAL . NUM_INT

    NUM_INT         shift and go to state 89


state 41

    (13) expression -> expression PLUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 90
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 42

    (14) expression -> expression MINUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 91
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 43

    (15) expression -> expression MUL . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 92
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 44

    (16) expression -> expression DIV . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 93
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 45

    (17) expression -> expression EXP . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 94
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 46

    (18) expression -> expression MOD . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 95
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 47

    (19) expression -> expression BIT_AND . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 96
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 48

    (20) expression -> expression BIT_OR . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 97
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 49

    (21) expression -> expression BIT_XOR . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 98
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 50

    (22) expression -> expression LSHIFT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 99
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 51

    (23) expression -> expression RSHIFT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 100
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 52

    (55) expression -> expression IN . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 101
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 53

    (56) expression -> expression NOT . IN expression

    IN              shift and go to state 102


state 54

    (24) boolean -> expression EQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 103
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 55

    (25) boolean -> expression NEQ . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 104
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 56

    (26) boolean -> expression GT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 105
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 57

    (27) boolean -> expression GTE . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 106
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 58

    (28) boolean -> expression LT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 107
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 59

    (29) boolean -> expression LTE . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 108
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 60

    (30) boolean -> expression AND . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 109
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 61

    (31) boolean -> expression OR . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 110
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 62

    (44) expression -> LSQBRACK arguments . RSQBRACK
    (41) arguments -> arguments . COMMA expression

    RSQBRACK        shift and go to state 111
    COMMA           shift and go to state 112


state 63

    (42) arguments -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        reduce using rule 42 (arguments -> expression .)
    COMMA           reduce using rule 42 (arguments -> expression .)
    RPAREN          reduce using rule 42 (arguments -> expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 64

    (45) expression -> identifier . LSQBRACK expression RSQBRACK
    (46) expression -> identifier . LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> identifier . LSQBRACK COLON expression RSQBRACK
    (48) expression -> identifier . LSQBRACK expression COLON RSQBRACK
    (49) expression -> identifier . LSQBRACK COLON RSQBRACK
    (51) expression -> identifier . EQUALS assignable
    (64) expression -> identifier . PLUS_EQUAL NUM_INT
    (65) expression -> identifier . MINUS_EQUAL NUM_INT
    (68) expression -> identifier .
    (74) expression -> identifier . LPAREN arguments RPAREN

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    LSQBRACK        shift and go to state 113
    EQUALS          shift and go to state 31
    PLUS_EQUAL      shift and go to state 39
    MINUS_EQUAL     shift and go to state 40
    PLUS            reduce using rule 68 (expression -> identifier .)
    MINUS           reduce using rule 68 (expression -> identifier .)
    MUL             reduce using rule 68 (expression -> identifier .)
    DIV             reduce using rule 68 (expression -> identifier .)
    EXP             reduce using rule 68 (expression -> identifier .)
    MOD             reduce using rule 68 (expression -> identifier .)
    BIT_AND         reduce using rule 68 (expression -> identifier .)
    BIT_OR          reduce using rule 68 (expression -> identifier .)
    BIT_XOR         reduce using rule 68 (expression -> identifier .)
    LSHIFT          reduce using rule 68 (expression -> identifier .)
    RSHIFT          reduce using rule 68 (expression -> identifier .)
    IN              reduce using rule 68 (expression -> identifier .)
    NOT             reduce using rule 68 (expression -> identifier .)
    EQ              reduce using rule 68 (expression -> identifier .)
    NEQ             reduce using rule 68 (expression -> identifier .)
    GT              reduce using rule 68 (expression -> identifier .)
    GTE             reduce using rule 68 (expression -> identifier .)
    LT              reduce using rule 68 (expression -> identifier .)
    LTE             reduce using rule 68 (expression -> identifier .)
    AND             reduce using rule 68 (expression -> identifier .)
    OR              reduce using rule 68 (expression -> identifier .)
    RSQBRACK        reduce using rule 68 (expression -> identifier .)
    COMMA           reduce using rule 68 (expression -> identifier .)
    RPAREN          reduce using rule 68 (expression -> identifier .)
    DO              reduce using rule 68 (expression -> identifier .)
    END             reduce using rule 68 (expression -> identifier .)
    EXIT            reduce using rule 68 (expression -> identifier .)
    SETOUT          reduce using rule 68 (expression -> identifier .)
    FOR             reduce using rule 68 (expression -> identifier .)
    WHILE           reduce using rule 68 (expression -> identifier .)
    PROCESS         reduce using rule 68 (expression -> identifier .)
    IDENTIFIER      reduce using rule 68 (expression -> identifier .)
    BIT_NEG         reduce using rule 68 (expression -> identifier .)
    STRING          reduce using rule 68 (expression -> identifier .)
    IF              reduce using rule 68 (expression -> identifier .)
    NUM_INT         reduce using rule 68 (expression -> identifier .)
    NUM_FLOAT       reduce using rule 68 (expression -> identifier .)
    TRUE            reduce using rule 68 (expression -> identifier .)
    FALSE           reduce using rule 68 (expression -> identifier .)
    THEN            reduce using rule 68 (expression -> identifier .)
    COLON           reduce using rule 68 (expression -> identifier .)
    RBRACK          reduce using rule 68 (expression -> identifier .)
    ARROW_LTR       reduce using rule 68 (expression -> identifier .)
    ARROW_RTL       reduce using rule 68 (expression -> identifier .)
    LBRACK          reduce using rule 68 (expression -> identifier .)
    LPAREN          shift and go to state 114

  ! LPAREN          [ reduce using rule 68 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 68 (expression -> identifier .) ]


state 65

    (57) statement -> SETOUT LPAREN . arguments RPAREN
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RPAREN          reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    arguments                      shift and go to state 115
    expression                     shift and go to state 63
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 66

    (36) expression -> LPAREN expression . RPAREN
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 67

    (69) statement -> FOR identifier . IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> FOR identifier . IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> FOR identifier . IN expression LBRACK statement_list RBRACK

    IN              shift and go to state 117


state 68

    (72) statement -> WHILE expression . DO LBRACK statement_list RBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    DO              shift and go to state 118
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 69

    (73) statement -> PROCESS identifier . DO LBRACK statement_list RBRACK

    DO              shift and go to state 119


state 70

    (33) expression -> PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 33 (expression -> PLUS expression .)
    MINUS           reduce using rule 33 (expression -> PLUS expression .)
    MUL             reduce using rule 33 (expression -> PLUS expression .)
    DIV             reduce using rule 33 (expression -> PLUS expression .)
    EXP             reduce using rule 33 (expression -> PLUS expression .)
    MOD             reduce using rule 33 (expression -> PLUS expression .)
    BIT_AND         reduce using rule 33 (expression -> PLUS expression .)
    BIT_OR          reduce using rule 33 (expression -> PLUS expression .)
    BIT_XOR         reduce using rule 33 (expression -> PLUS expression .)
    LSHIFT          reduce using rule 33 (expression -> PLUS expression .)
    RSHIFT          reduce using rule 33 (expression -> PLUS expression .)
    IN              reduce using rule 33 (expression -> PLUS expression .)
    NOT             reduce using rule 33 (expression -> PLUS expression .)
    EQ              reduce using rule 33 (expression -> PLUS expression .)
    NEQ             reduce using rule 33 (expression -> PLUS expression .)
    GT              reduce using rule 33 (expression -> PLUS expression .)
    GTE             reduce using rule 33 (expression -> PLUS expression .)
    LT              reduce using rule 33 (expression -> PLUS expression .)
    LTE             reduce using rule 33 (expression -> PLUS expression .)
    AND             reduce using rule 33 (expression -> PLUS expression .)
    OR              reduce using rule 33 (expression -> PLUS expression .)
    END             reduce using rule 33 (expression -> PLUS expression .)
    EXIT            reduce using rule 33 (expression -> PLUS expression .)
    SETOUT          reduce using rule 33 (expression -> PLUS expression .)
    FOR             reduce using rule 33 (expression -> PLUS expression .)
    WHILE           reduce using rule 33 (expression -> PLUS expression .)
    PROCESS         reduce using rule 33 (expression -> PLUS expression .)
    IDENTIFIER      reduce using rule 33 (expression -> PLUS expression .)
    BIT_NEG         reduce using rule 33 (expression -> PLUS expression .)
    LPAREN          reduce using rule 33 (expression -> PLUS expression .)
    LSQBRACK        reduce using rule 33 (expression -> PLUS expression .)
    STRING          reduce using rule 33 (expression -> PLUS expression .)
    IF              reduce using rule 33 (expression -> PLUS expression .)
    NUM_INT         reduce using rule 33 (expression -> PLUS expression .)
    NUM_FLOAT       reduce using rule 33 (expression -> PLUS expression .)
    TRUE            reduce using rule 33 (expression -> PLUS expression .)
    FALSE           reduce using rule 33 (expression -> PLUS expression .)
    RSQBRACK        reduce using rule 33 (expression -> PLUS expression .)
    COMMA           reduce using rule 33 (expression -> PLUS expression .)
    RPAREN          reduce using rule 33 (expression -> PLUS expression .)
    DO              reduce using rule 33 (expression -> PLUS expression .)
    THEN            reduce using rule 33 (expression -> PLUS expression .)
    COLON           reduce using rule 33 (expression -> PLUS expression .)
    RBRACK          reduce using rule 33 (expression -> PLUS expression .)
    ARROW_LTR       reduce using rule 33 (expression -> PLUS expression .)
    ARROW_RTL       reduce using rule 33 (expression -> PLUS expression .)
    LBRACK          reduce using rule 33 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MUL             [ shift and go to state 43 ]
  ! DIV             [ shift and go to state 44 ]
  ! EXP             [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 71

    (32) expression -> MINUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 32 (expression -> MINUS expression .)
    MINUS           reduce using rule 32 (expression -> MINUS expression .)
    MUL             reduce using rule 32 (expression -> MINUS expression .)
    DIV             reduce using rule 32 (expression -> MINUS expression .)
    EXP             reduce using rule 32 (expression -> MINUS expression .)
    MOD             reduce using rule 32 (expression -> MINUS expression .)
    BIT_AND         reduce using rule 32 (expression -> MINUS expression .)
    BIT_OR          reduce using rule 32 (expression -> MINUS expression .)
    BIT_XOR         reduce using rule 32 (expression -> MINUS expression .)
    LSHIFT          reduce using rule 32 (expression -> MINUS expression .)
    RSHIFT          reduce using rule 32 (expression -> MINUS expression .)
    IN              reduce using rule 32 (expression -> MINUS expression .)
    NOT             reduce using rule 32 (expression -> MINUS expression .)
    EQ              reduce using rule 32 (expression -> MINUS expression .)
    NEQ             reduce using rule 32 (expression -> MINUS expression .)
    GT              reduce using rule 32 (expression -> MINUS expression .)
    GTE             reduce using rule 32 (expression -> MINUS expression .)
    LT              reduce using rule 32 (expression -> MINUS expression .)
    LTE             reduce using rule 32 (expression -> MINUS expression .)
    AND             reduce using rule 32 (expression -> MINUS expression .)
    OR              reduce using rule 32 (expression -> MINUS expression .)
    END             reduce using rule 32 (expression -> MINUS expression .)
    EXIT            reduce using rule 32 (expression -> MINUS expression .)
    SETOUT          reduce using rule 32 (expression -> MINUS expression .)
    FOR             reduce using rule 32 (expression -> MINUS expression .)
    WHILE           reduce using rule 32 (expression -> MINUS expression .)
    PROCESS         reduce using rule 32 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 32 (expression -> MINUS expression .)
    BIT_NEG         reduce using rule 32 (expression -> MINUS expression .)
    LPAREN          reduce using rule 32 (expression -> MINUS expression .)
    LSQBRACK        reduce using rule 32 (expression -> MINUS expression .)
    STRING          reduce using rule 32 (expression -> MINUS expression .)
    IF              reduce using rule 32 (expression -> MINUS expression .)
    NUM_INT         reduce using rule 32 (expression -> MINUS expression .)
    NUM_FLOAT       reduce using rule 32 (expression -> MINUS expression .)
    TRUE            reduce using rule 32 (expression -> MINUS expression .)
    FALSE           reduce using rule 32 (expression -> MINUS expression .)
    RSQBRACK        reduce using rule 32 (expression -> MINUS expression .)
    COMMA           reduce using rule 32 (expression -> MINUS expression .)
    RPAREN          reduce using rule 32 (expression -> MINUS expression .)
    DO              reduce using rule 32 (expression -> MINUS expression .)
    THEN            reduce using rule 32 (expression -> MINUS expression .)
    COLON           reduce using rule 32 (expression -> MINUS expression .)
    RBRACK          reduce using rule 32 (expression -> MINUS expression .)
    ARROW_LTR       reduce using rule 32 (expression -> MINUS expression .)
    ARROW_RTL       reduce using rule 32 (expression -> MINUS expression .)
    LBRACK          reduce using rule 32 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MUL             [ shift and go to state 43 ]
  ! DIV             [ shift and go to state 44 ]
  ! EXP             [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 72

    (34) expression -> BIT_NEG expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 34 (expression -> BIT_NEG expression .)
    EXIT            reduce using rule 34 (expression -> BIT_NEG expression .)
    SETOUT          reduce using rule 34 (expression -> BIT_NEG expression .)
    FOR             reduce using rule 34 (expression -> BIT_NEG expression .)
    WHILE           reduce using rule 34 (expression -> BIT_NEG expression .)
    PROCESS         reduce using rule 34 (expression -> BIT_NEG expression .)
    IDENTIFIER      reduce using rule 34 (expression -> BIT_NEG expression .)
    BIT_NEG         reduce using rule 34 (expression -> BIT_NEG expression .)
    LPAREN          reduce using rule 34 (expression -> BIT_NEG expression .)
    LSQBRACK        reduce using rule 34 (expression -> BIT_NEG expression .)
    STRING          reduce using rule 34 (expression -> BIT_NEG expression .)
    IF              reduce using rule 34 (expression -> BIT_NEG expression .)
    NUM_INT         reduce using rule 34 (expression -> BIT_NEG expression .)
    NUM_FLOAT       reduce using rule 34 (expression -> BIT_NEG expression .)
    TRUE            reduce using rule 34 (expression -> BIT_NEG expression .)
    FALSE           reduce using rule 34 (expression -> BIT_NEG expression .)
    RSQBRACK        reduce using rule 34 (expression -> BIT_NEG expression .)
    COMMA           reduce using rule 34 (expression -> BIT_NEG expression .)
    RPAREN          reduce using rule 34 (expression -> BIT_NEG expression .)
    DO              reduce using rule 34 (expression -> BIT_NEG expression .)
    THEN            reduce using rule 34 (expression -> BIT_NEG expression .)
    COLON           reduce using rule 34 (expression -> BIT_NEG expression .)
    RBRACK          reduce using rule 34 (expression -> BIT_NEG expression .)
    ARROW_LTR       reduce using rule 34 (expression -> BIT_NEG expression .)
    ARROW_RTL       reduce using rule 34 (expression -> BIT_NEG expression .)
    LBRACK          reduce using rule 34 (expression -> BIT_NEG expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! EXP             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! BIT_AND         [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! BIT_OR          [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! BIT_XOR         [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! LSHIFT          [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! RSHIFT          [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! IN              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! NOT             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! EQ              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! NEQ             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! GT              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! GTE             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! LT              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! LTE             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! AND             [ reduce using rule 34 (expression -> BIT_NEG expression .) ]
  ! OR              [ reduce using rule 34 (expression -> BIT_NEG expression .) ]


state 73

    (35) expression -> NOT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    BIT_AND         reduce using rule 35 (expression -> NOT expression .)
    BIT_OR          reduce using rule 35 (expression -> NOT expression .)
    BIT_XOR         reduce using rule 35 (expression -> NOT expression .)
    LSHIFT          reduce using rule 35 (expression -> NOT expression .)
    RSHIFT          reduce using rule 35 (expression -> NOT expression .)
    IN              reduce using rule 35 (expression -> NOT expression .)
    NOT             reduce using rule 35 (expression -> NOT expression .)
    EQ              reduce using rule 35 (expression -> NOT expression .)
    NEQ             reduce using rule 35 (expression -> NOT expression .)
    GT              reduce using rule 35 (expression -> NOT expression .)
    GTE             reduce using rule 35 (expression -> NOT expression .)
    LT              reduce using rule 35 (expression -> NOT expression .)
    LTE             reduce using rule 35 (expression -> NOT expression .)
    AND             reduce using rule 35 (expression -> NOT expression .)
    OR              reduce using rule 35 (expression -> NOT expression .)
    END             reduce using rule 35 (expression -> NOT expression .)
    EXIT            reduce using rule 35 (expression -> NOT expression .)
    SETOUT          reduce using rule 35 (expression -> NOT expression .)
    FOR             reduce using rule 35 (expression -> NOT expression .)
    WHILE           reduce using rule 35 (expression -> NOT expression .)
    PROCESS         reduce using rule 35 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 35 (expression -> NOT expression .)
    BIT_NEG         reduce using rule 35 (expression -> NOT expression .)
    LPAREN          reduce using rule 35 (expression -> NOT expression .)
    LSQBRACK        reduce using rule 35 (expression -> NOT expression .)
    STRING          reduce using rule 35 (expression -> NOT expression .)
    IF              reduce using rule 35 (expression -> NOT expression .)
    NUM_INT         reduce using rule 35 (expression -> NOT expression .)
    NUM_FLOAT       reduce using rule 35 (expression -> NOT expression .)
    TRUE            reduce using rule 35 (expression -> NOT expression .)
    FALSE           reduce using rule 35 (expression -> NOT expression .)
    RSQBRACK        reduce using rule 35 (expression -> NOT expression .)
    COMMA           reduce using rule 35 (expression -> NOT expression .)
    RPAREN          reduce using rule 35 (expression -> NOT expression .)
    DO              reduce using rule 35 (expression -> NOT expression .)
    THEN            reduce using rule 35 (expression -> NOT expression .)
    COLON           reduce using rule 35 (expression -> NOT expression .)
    RBRACK          reduce using rule 35 (expression -> NOT expression .)
    ARROW_LTR       reduce using rule 35 (expression -> NOT expression .)
    ARROW_RTL       reduce using rule 35 (expression -> NOT expression .)
    LBRACK          reduce using rule 35 (expression -> NOT expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46

  ! PLUS            [ reduce using rule 35 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> NOT expression .) ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 74

    (52) if_statement -> IF expression . THEN LBRACK statement_list RBRACK
    (53) if_statement -> IF expression . THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression . THEN LBRACK statement_list RBRACK ELSE if_statement
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    THEN            shift and go to state 120
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 75

    (50) statement -> identifier LSQBRACK expression . RSQBRACK EQUALS expression
    (45) expression -> identifier LSQBRACK expression . RSQBRACK
    (46) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 121
    COLON           shift and go to state 122
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 76

    (47) expression -> identifier LSQBRACK COLON . expression RSQBRACK
    (49) expression -> identifier LSQBRACK COLON . RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RSQBRACK        shift and go to state 124
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 123
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 77

    (51) expression -> identifier EQUALS assignable .

    PLUS            reduce using rule 51 (expression -> identifier EQUALS assignable .)
    MINUS           reduce using rule 51 (expression -> identifier EQUALS assignable .)
    MUL             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    DIV             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    EXP             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    MOD             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    BIT_AND         reduce using rule 51 (expression -> identifier EQUALS assignable .)
    BIT_OR          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    BIT_XOR         reduce using rule 51 (expression -> identifier EQUALS assignable .)
    LSHIFT          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    RSHIFT          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    IN              reduce using rule 51 (expression -> identifier EQUALS assignable .)
    NOT             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    EQ              reduce using rule 51 (expression -> identifier EQUALS assignable .)
    NEQ             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    GT              reduce using rule 51 (expression -> identifier EQUALS assignable .)
    GTE             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    LT              reduce using rule 51 (expression -> identifier EQUALS assignable .)
    LTE             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    AND             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    OR              reduce using rule 51 (expression -> identifier EQUALS assignable .)
    END             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    EXIT            reduce using rule 51 (expression -> identifier EQUALS assignable .)
    SETOUT          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    FOR             reduce using rule 51 (expression -> identifier EQUALS assignable .)
    WHILE           reduce using rule 51 (expression -> identifier EQUALS assignable .)
    PROCESS         reduce using rule 51 (expression -> identifier EQUALS assignable .)
    IDENTIFIER      reduce using rule 51 (expression -> identifier EQUALS assignable .)
    BIT_NEG         reduce using rule 51 (expression -> identifier EQUALS assignable .)
    LPAREN          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    LSQBRACK        reduce using rule 51 (expression -> identifier EQUALS assignable .)
    STRING          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    IF              reduce using rule 51 (expression -> identifier EQUALS assignable .)
    NUM_INT         reduce using rule 51 (expression -> identifier EQUALS assignable .)
    NUM_FLOAT       reduce using rule 51 (expression -> identifier EQUALS assignable .)
    TRUE            reduce using rule 51 (expression -> identifier EQUALS assignable .)
    FALSE           reduce using rule 51 (expression -> identifier EQUALS assignable .)
    RSQBRACK        reduce using rule 51 (expression -> identifier EQUALS assignable .)
    COMMA           reduce using rule 51 (expression -> identifier EQUALS assignable .)
    RPAREN          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    DO              reduce using rule 51 (expression -> identifier EQUALS assignable .)
    THEN            reduce using rule 51 (expression -> identifier EQUALS assignable .)
    COLON           reduce using rule 51 (expression -> identifier EQUALS assignable .)
    RBRACK          reduce using rule 51 (expression -> identifier EQUALS assignable .)
    ARROW_LTR       reduce using rule 51 (expression -> identifier EQUALS assignable .)
    ARROW_RTL       reduce using rule 51 (expression -> identifier EQUALS assignable .)
    LBRACK          reduce using rule 51 (expression -> identifier EQUALS assignable .)


state 78

    (39) assignable -> primitive .
    (66) expression -> primitive .

  ! reduce/reduce conflict for PLUS resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for MUL resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for DIV resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for EXP resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for MOD resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for IN resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for NOT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for GT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for GTE resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for LT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for LTE resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for AND resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for OR resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for END resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for EXIT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for SETOUT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for WHILE resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for PROCESS resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for LPAREN resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for STRING resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for IF resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for TRUE resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for FALSE resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for RSQBRACK resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for DO resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for THEN resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for COLON resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for RBRACK resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for ARROW_LTR resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for ARROW_RTL resolved using rule 39 (assignable -> primitive .)
  ! reduce/reduce conflict for LBRACK resolved using rule 39 (assignable -> primitive .)
    PLUS            reduce using rule 39 (assignable -> primitive .)
    MINUS           reduce using rule 39 (assignable -> primitive .)
    MUL             reduce using rule 39 (assignable -> primitive .)
    DIV             reduce using rule 39 (assignable -> primitive .)
    EXP             reduce using rule 39 (assignable -> primitive .)
    MOD             reduce using rule 39 (assignable -> primitive .)
    BIT_AND         reduce using rule 39 (assignable -> primitive .)
    BIT_OR          reduce using rule 39 (assignable -> primitive .)
    BIT_XOR         reduce using rule 39 (assignable -> primitive .)
    LSHIFT          reduce using rule 39 (assignable -> primitive .)
    RSHIFT          reduce using rule 39 (assignable -> primitive .)
    IN              reduce using rule 39 (assignable -> primitive .)
    NOT             reduce using rule 39 (assignable -> primitive .)
    EQ              reduce using rule 39 (assignable -> primitive .)
    NEQ             reduce using rule 39 (assignable -> primitive .)
    GT              reduce using rule 39 (assignable -> primitive .)
    GTE             reduce using rule 39 (assignable -> primitive .)
    LT              reduce using rule 39 (assignable -> primitive .)
    LTE             reduce using rule 39 (assignable -> primitive .)
    AND             reduce using rule 39 (assignable -> primitive .)
    OR              reduce using rule 39 (assignable -> primitive .)
    END             reduce using rule 39 (assignable -> primitive .)
    EXIT            reduce using rule 39 (assignable -> primitive .)
    SETOUT          reduce using rule 39 (assignable -> primitive .)
    FOR             reduce using rule 39 (assignable -> primitive .)
    WHILE           reduce using rule 39 (assignable -> primitive .)
    PROCESS         reduce using rule 39 (assignable -> primitive .)
    IDENTIFIER      reduce using rule 39 (assignable -> primitive .)
    BIT_NEG         reduce using rule 39 (assignable -> primitive .)
    LPAREN          reduce using rule 39 (assignable -> primitive .)
    LSQBRACK        reduce using rule 39 (assignable -> primitive .)
    STRING          reduce using rule 39 (assignable -> primitive .)
    IF              reduce using rule 39 (assignable -> primitive .)
    NUM_INT         reduce using rule 39 (assignable -> primitive .)
    NUM_FLOAT       reduce using rule 39 (assignable -> primitive .)
    TRUE            reduce using rule 39 (assignable -> primitive .)
    FALSE           reduce using rule 39 (assignable -> primitive .)
    RSQBRACK        reduce using rule 39 (assignable -> primitive .)
    COMMA           reduce using rule 39 (assignable -> primitive .)
    RPAREN          reduce using rule 39 (assignable -> primitive .)
    DO              reduce using rule 39 (assignable -> primitive .)
    THEN            reduce using rule 39 (assignable -> primitive .)
    COLON           reduce using rule 39 (assignable -> primitive .)
    RBRACK          reduce using rule 39 (assignable -> primitive .)
    ARROW_LTR       reduce using rule 39 (assignable -> primitive .)
    ARROW_RTL       reduce using rule 39 (assignable -> primitive .)
    LBRACK          reduce using rule 39 (assignable -> primitive .)

  ! PLUS            [ reduce using rule 66 (expression -> primitive .) ]
  ! MINUS           [ reduce using rule 66 (expression -> primitive .) ]
  ! MUL             [ reduce using rule 66 (expression -> primitive .) ]
  ! DIV             [ reduce using rule 66 (expression -> primitive .) ]
  ! EXP             [ reduce using rule 66 (expression -> primitive .) ]
  ! MOD             [ reduce using rule 66 (expression -> primitive .) ]
  ! BIT_AND         [ reduce using rule 66 (expression -> primitive .) ]
  ! BIT_OR          [ reduce using rule 66 (expression -> primitive .) ]
  ! BIT_XOR         [ reduce using rule 66 (expression -> primitive .) ]
  ! LSHIFT          [ reduce using rule 66 (expression -> primitive .) ]
  ! RSHIFT          [ reduce using rule 66 (expression -> primitive .) ]
  ! IN              [ reduce using rule 66 (expression -> primitive .) ]
  ! NOT             [ reduce using rule 66 (expression -> primitive .) ]
  ! EQ              [ reduce using rule 66 (expression -> primitive .) ]
  ! NEQ             [ reduce using rule 66 (expression -> primitive .) ]
  ! GT              [ reduce using rule 66 (expression -> primitive .) ]
  ! GTE             [ reduce using rule 66 (expression -> primitive .) ]
  ! LT              [ reduce using rule 66 (expression -> primitive .) ]
  ! LTE             [ reduce using rule 66 (expression -> primitive .) ]
  ! AND             [ reduce using rule 66 (expression -> primitive .) ]
  ! OR              [ reduce using rule 66 (expression -> primitive .) ]
  ! END             [ reduce using rule 66 (expression -> primitive .) ]
  ! EXIT            [ reduce using rule 66 (expression -> primitive .) ]
  ! SETOUT          [ reduce using rule 66 (expression -> primitive .) ]
  ! FOR             [ reduce using rule 66 (expression -> primitive .) ]
  ! WHILE           [ reduce using rule 66 (expression -> primitive .) ]
  ! PROCESS         [ reduce using rule 66 (expression -> primitive .) ]
  ! IDENTIFIER      [ reduce using rule 66 (expression -> primitive .) ]
  ! BIT_NEG         [ reduce using rule 66 (expression -> primitive .) ]
  ! LPAREN          [ reduce using rule 66 (expression -> primitive .) ]
  ! LSQBRACK        [ reduce using rule 66 (expression -> primitive .) ]
  ! STRING          [ reduce using rule 66 (expression -> primitive .) ]
  ! IF              [ reduce using rule 66 (expression -> primitive .) ]
  ! NUM_INT         [ reduce using rule 66 (expression -> primitive .) ]
  ! NUM_FLOAT       [ reduce using rule 66 (expression -> primitive .) ]
  ! TRUE            [ reduce using rule 66 (expression -> primitive .) ]
  ! FALSE           [ reduce using rule 66 (expression -> primitive .) ]
  ! RSQBRACK        [ reduce using rule 66 (expression -> primitive .) ]
  ! COMMA           [ reduce using rule 66 (expression -> primitive .) ]
  ! RPAREN          [ reduce using rule 66 (expression -> primitive .) ]
  ! DO              [ reduce using rule 66 (expression -> primitive .) ]
  ! THEN            [ reduce using rule 66 (expression -> primitive .) ]
  ! COLON           [ reduce using rule 66 (expression -> primitive .) ]
  ! RBRACK          [ reduce using rule 66 (expression -> primitive .) ]
  ! ARROW_LTR       [ reduce using rule 66 (expression -> primitive .) ]
  ! ARROW_RTL       [ reduce using rule 66 (expression -> primitive .) ]
  ! LBRACK          [ reduce using rule 66 (expression -> primitive .) ]


state 79

    (40) assignable -> expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 40 (assignable -> expression .)
    EXIT            reduce using rule 40 (assignable -> expression .)
    SETOUT          reduce using rule 40 (assignable -> expression .)
    FOR             reduce using rule 40 (assignable -> expression .)
    WHILE           reduce using rule 40 (assignable -> expression .)
    PROCESS         reduce using rule 40 (assignable -> expression .)
    IDENTIFIER      reduce using rule 40 (assignable -> expression .)
    BIT_NEG         reduce using rule 40 (assignable -> expression .)
    LPAREN          reduce using rule 40 (assignable -> expression .)
    LSQBRACK        reduce using rule 40 (assignable -> expression .)
    STRING          reduce using rule 40 (assignable -> expression .)
    IF              reduce using rule 40 (assignable -> expression .)
    NUM_INT         reduce using rule 40 (assignable -> expression .)
    NUM_FLOAT       reduce using rule 40 (assignable -> expression .)
    TRUE            reduce using rule 40 (assignable -> expression .)
    FALSE           reduce using rule 40 (assignable -> expression .)
    RSQBRACK        reduce using rule 40 (assignable -> expression .)
    COMMA           reduce using rule 40 (assignable -> expression .)
    RPAREN          reduce using rule 40 (assignable -> expression .)
    DO              reduce using rule 40 (assignable -> expression .)
    THEN            reduce using rule 40 (assignable -> expression .)
    COLON           reduce using rule 40 (assignable -> expression .)
    RBRACK          reduce using rule 40 (assignable -> expression .)
    ARROW_LTR       reduce using rule 40 (assignable -> expression .)
    ARROW_RTL       reduce using rule 40 (assignable -> expression .)
    LBRACK          reduce using rule 40 (assignable -> expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 40 (assignable -> expression .) ]
  ! MINUS           [ reduce using rule 40 (assignable -> expression .) ]
  ! MUL             [ reduce using rule 40 (assignable -> expression .) ]
  ! DIV             [ reduce using rule 40 (assignable -> expression .) ]
  ! EXP             [ reduce using rule 40 (assignable -> expression .) ]
  ! MOD             [ reduce using rule 40 (assignable -> expression .) ]
  ! BIT_AND         [ reduce using rule 40 (assignable -> expression .) ]
  ! BIT_OR          [ reduce using rule 40 (assignable -> expression .) ]
  ! BIT_XOR         [ reduce using rule 40 (assignable -> expression .) ]
  ! LSHIFT          [ reduce using rule 40 (assignable -> expression .) ]
  ! RSHIFT          [ reduce using rule 40 (assignable -> expression .) ]
  ! IN              [ reduce using rule 40 (assignable -> expression .) ]
  ! NOT             [ reduce using rule 40 (assignable -> expression .) ]
  ! EQ              [ reduce using rule 40 (assignable -> expression .) ]
  ! NEQ             [ reduce using rule 40 (assignable -> expression .) ]
  ! GT              [ reduce using rule 40 (assignable -> expression .) ]
  ! GTE             [ reduce using rule 40 (assignable -> expression .) ]
  ! LT              [ reduce using rule 40 (assignable -> expression .) ]
  ! LTE             [ reduce using rule 40 (assignable -> expression .) ]
  ! AND             [ reduce using rule 40 (assignable -> expression .) ]
  ! OR              [ reduce using rule 40 (assignable -> expression .) ]


state 80

    (11) primitive -> STRING .
    (67) expression -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MUL resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for GTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LTE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for END resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for EXIT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for SETOUT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for PROCESS resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for IF resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RSQBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for DO resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for THEN resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for COLON resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for RBRACK resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for ARROW_LTR resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for ARROW_RTL resolved using rule 11 (primitive -> STRING .)
  ! reduce/reduce conflict for LBRACK resolved using rule 11 (primitive -> STRING .)
    PLUS            reduce using rule 11 (primitive -> STRING .)
    MINUS           reduce using rule 11 (primitive -> STRING .)
    MUL             reduce using rule 11 (primitive -> STRING .)
    DIV             reduce using rule 11 (primitive -> STRING .)
    EXP             reduce using rule 11 (primitive -> STRING .)
    MOD             reduce using rule 11 (primitive -> STRING .)
    BIT_AND         reduce using rule 11 (primitive -> STRING .)
    BIT_OR          reduce using rule 11 (primitive -> STRING .)
    BIT_XOR         reduce using rule 11 (primitive -> STRING .)
    LSHIFT          reduce using rule 11 (primitive -> STRING .)
    RSHIFT          reduce using rule 11 (primitive -> STRING .)
    IN              reduce using rule 11 (primitive -> STRING .)
    NOT             reduce using rule 11 (primitive -> STRING .)
    EQ              reduce using rule 11 (primitive -> STRING .)
    NEQ             reduce using rule 11 (primitive -> STRING .)
    GT              reduce using rule 11 (primitive -> STRING .)
    GTE             reduce using rule 11 (primitive -> STRING .)
    LT              reduce using rule 11 (primitive -> STRING .)
    LTE             reduce using rule 11 (primitive -> STRING .)
    AND             reduce using rule 11 (primitive -> STRING .)
    OR              reduce using rule 11 (primitive -> STRING .)
    END             reduce using rule 11 (primitive -> STRING .)
    EXIT            reduce using rule 11 (primitive -> STRING .)
    SETOUT          reduce using rule 11 (primitive -> STRING .)
    FOR             reduce using rule 11 (primitive -> STRING .)
    WHILE           reduce using rule 11 (primitive -> STRING .)
    PROCESS         reduce using rule 11 (primitive -> STRING .)
    IDENTIFIER      reduce using rule 11 (primitive -> STRING .)
    BIT_NEG         reduce using rule 11 (primitive -> STRING .)
    LPAREN          reduce using rule 11 (primitive -> STRING .)
    LSQBRACK        reduce using rule 11 (primitive -> STRING .)
    STRING          reduce using rule 11 (primitive -> STRING .)
    IF              reduce using rule 11 (primitive -> STRING .)
    NUM_INT         reduce using rule 11 (primitive -> STRING .)
    NUM_FLOAT       reduce using rule 11 (primitive -> STRING .)
    TRUE            reduce using rule 11 (primitive -> STRING .)
    FALSE           reduce using rule 11 (primitive -> STRING .)
    RSQBRACK        reduce using rule 11 (primitive -> STRING .)
    COMMA           reduce using rule 11 (primitive -> STRING .)
    RPAREN          reduce using rule 11 (primitive -> STRING .)
    DO              reduce using rule 11 (primitive -> STRING .)
    THEN            reduce using rule 11 (primitive -> STRING .)
    COLON           reduce using rule 11 (primitive -> STRING .)
    RBRACK          reduce using rule 11 (primitive -> STRING .)
    ARROW_LTR       reduce using rule 11 (primitive -> STRING .)
    ARROW_RTL       reduce using rule 11 (primitive -> STRING .)
    LBRACK          reduce using rule 11 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 67 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 67 (expression -> STRING .) ]
  ! MUL             [ reduce using rule 67 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 67 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 67 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 67 (expression -> STRING .) ]
  ! LSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! RSHIFT          [ reduce using rule 67 (expression -> STRING .) ]
  ! IN              [ reduce using rule 67 (expression -> STRING .) ]
  ! NOT             [ reduce using rule 67 (expression -> STRING .) ]
  ! EQ              [ reduce using rule 67 (expression -> STRING .) ]
  ! NEQ             [ reduce using rule 67 (expression -> STRING .) ]
  ! GT              [ reduce using rule 67 (expression -> STRING .) ]
  ! GTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! LT              [ reduce using rule 67 (expression -> STRING .) ]
  ! LTE             [ reduce using rule 67 (expression -> STRING .) ]
  ! AND             [ reduce using rule 67 (expression -> STRING .) ]
  ! OR              [ reduce using rule 67 (expression -> STRING .) ]
  ! END             [ reduce using rule 67 (expression -> STRING .) ]
  ! EXIT            [ reduce using rule 67 (expression -> STRING .) ]
  ! SETOUT          [ reduce using rule 67 (expression -> STRING .) ]
  ! FOR             [ reduce using rule 67 (expression -> STRING .) ]
  ! WHILE           [ reduce using rule 67 (expression -> STRING .) ]
  ! PROCESS         [ reduce using rule 67 (expression -> STRING .) ]
  ! IDENTIFIER      [ reduce using rule 67 (expression -> STRING .) ]
  ! BIT_NEG         [ reduce using rule 67 (expression -> STRING .) ]
  ! LPAREN          [ reduce using rule 67 (expression -> STRING .) ]
  ! LSQBRACK        [ reduce using rule 67 (expression -> STRING .) ]
  ! STRING          [ reduce using rule 67 (expression -> STRING .) ]
  ! IF              [ reduce using rule 67 (expression -> STRING .) ]
  ! NUM_INT         [ reduce using rule 67 (expression -> STRING .) ]
  ! NUM_FLOAT       [ reduce using rule 67 (expression -> STRING .) ]
  ! TRUE            [ reduce using rule 67 (expression -> STRING .) ]
  ! FALSE           [ reduce using rule 67 (expression -> STRING .) ]
  ! RSQBRACK        [ reduce using rule 67 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 67 (expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 67 (expression -> STRING .) ]
  ! DO              [ reduce using rule 67 (expression -> STRING .) ]
  ! THEN            [ reduce using rule 67 (expression -> STRING .) ]
  ! COLON           [ reduce using rule 67 (expression -> STRING .) ]
  ! RBRACK          [ reduce using rule 67 (expression -> STRING .) ]
  ! ARROW_LTR       [ reduce using rule 67 (expression -> STRING .) ]
  ! ARROW_RTL       [ reduce using rule 67 (expression -> STRING .) ]
  ! LBRACK          [ reduce using rule 67 (expression -> STRING .) ]


state 81

    (58) statement -> identifier PLUS_EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    EXIT            reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    SETOUT          reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    FOR             reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    WHILE           reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    PROCESS         reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    IDENTIFIER      reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    BIT_NEG         reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    LPAREN          reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    LSQBRACK        reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    STRING          reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    IF              reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    NUM_INT         reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    NUM_FLOAT       reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    TRUE            reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    FALSE           reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    RBRACK          reduce using rule 58 (statement -> identifier PLUS_EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 58 (statement -> identifier PLUS_EQ expression .) ]
  ! PLUS            [ reduce using rule 58 (statement -> identifier PLUS_EQ expression .) ]
  ! NOT             [ reduce using rule 58 (statement -> identifier PLUS_EQ expression .) ]


state 82

    (59) statement -> identifier MINUS_EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    EXIT            reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    SETOUT          reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    FOR             reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    WHILE           reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    PROCESS         reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    IDENTIFIER      reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    BIT_NEG         reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    LPAREN          reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    LSQBRACK        reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    STRING          reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    IF              reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    NUM_INT         reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    NUM_FLOAT       reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    TRUE            reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    FALSE           reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    RBRACK          reduce using rule 59 (statement -> identifier MINUS_EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 59 (statement -> identifier MINUS_EQ expression .) ]
  ! PLUS            [ reduce using rule 59 (statement -> identifier MINUS_EQ expression .) ]
  ! NOT             [ reduce using rule 59 (statement -> identifier MINUS_EQ expression .) ]


state 83

    (60) statement -> identifier MUL_EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    EXIT            reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    SETOUT          reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    FOR             reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    WHILE           reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    PROCESS         reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    IDENTIFIER      reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    BIT_NEG         reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    LPAREN          reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    LSQBRACK        reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    STRING          reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    IF              reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    NUM_INT         reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    NUM_FLOAT       reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    TRUE            reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    FALSE           reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    RBRACK          reduce using rule 60 (statement -> identifier MUL_EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 60 (statement -> identifier MUL_EQ expression .) ]
  ! PLUS            [ reduce using rule 60 (statement -> identifier MUL_EQ expression .) ]
  ! NOT             [ reduce using rule 60 (statement -> identifier MUL_EQ expression .) ]


state 84

    (61) statement -> identifier DIV_EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    EXIT            reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    SETOUT          reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    FOR             reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    WHILE           reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    PROCESS         reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    IDENTIFIER      reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    BIT_NEG         reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    LPAREN          reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    LSQBRACK        reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    STRING          reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    IF              reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    NUM_INT         reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    NUM_FLOAT       reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    TRUE            reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    FALSE           reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    RBRACK          reduce using rule 61 (statement -> identifier DIV_EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 61 (statement -> identifier DIV_EQ expression .) ]
  ! PLUS            [ reduce using rule 61 (statement -> identifier DIV_EQ expression .) ]
  ! NOT             [ reduce using rule 61 (statement -> identifier DIV_EQ expression .) ]


state 85

    (62) statement -> identifier EXP_EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    EXIT            reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    SETOUT          reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    FOR             reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    WHILE           reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    PROCESS         reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    IDENTIFIER      reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    BIT_NEG         reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    LPAREN          reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    LSQBRACK        reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    STRING          reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    IF              reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    NUM_INT         reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    NUM_FLOAT       reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    TRUE            reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    FALSE           reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    RBRACK          reduce using rule 62 (statement -> identifier EXP_EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 62 (statement -> identifier EXP_EQ expression .) ]
  ! PLUS            [ reduce using rule 62 (statement -> identifier EXP_EQ expression .) ]
  ! NOT             [ reduce using rule 62 (statement -> identifier EXP_EQ expression .) ]


state 86

    (63) statement -> identifier MOD_EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    EXIT            reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    SETOUT          reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    FOR             reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    WHILE           reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    PROCESS         reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    IDENTIFIER      reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    BIT_NEG         reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    LPAREN          reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    LSQBRACK        reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    STRING          reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    IF              reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    NUM_INT         reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    NUM_FLOAT       reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    TRUE            reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    FALSE           reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    RBRACK          reduce using rule 63 (statement -> identifier MOD_EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 63 (statement -> identifier MOD_EQ expression .) ]
  ! PLUS            [ reduce using rule 63 (statement -> identifier MOD_EQ expression .) ]
  ! NOT             [ reduce using rule 63 (statement -> identifier MOD_EQ expression .) ]


state 87

    (75) statement -> identifier LPAREN arguments . RPAREN
    (74) expression -> identifier LPAREN arguments . RPAREN
    (41) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 125
    COMMA           shift and go to state 112


state 88

    (64) expression -> identifier PLUS_EQUAL NUM_INT .

    PLUS            reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    MINUS           reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    MUL             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    DIV             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    EXP             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    MOD             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    BIT_AND         reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    BIT_OR          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    BIT_XOR         reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    LSHIFT          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    RSHIFT          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    IN              reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    NOT             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    EQ              reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    NEQ             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    GT              reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    GTE             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    LT              reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    LTE             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    AND             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    OR              reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    END             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    EXIT            reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    SETOUT          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    FOR             reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    WHILE           reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    PROCESS         reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    IDENTIFIER      reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    BIT_NEG         reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    LPAREN          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    LSQBRACK        reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    STRING          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    IF              reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    NUM_INT         reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    NUM_FLOAT       reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    TRUE            reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    FALSE           reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    RSQBRACK        reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    COMMA           reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    RPAREN          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    DO              reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    THEN            reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    COLON           reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    RBRACK          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    ARROW_LTR       reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    ARROW_RTL       reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)
    LBRACK          reduce using rule 64 (expression -> identifier PLUS_EQUAL NUM_INT .)


state 89

    (65) expression -> identifier MINUS_EQUAL NUM_INT .

    PLUS            reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    MINUS           reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    MUL             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    DIV             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    EXP             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    MOD             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    BIT_AND         reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    BIT_OR          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    BIT_XOR         reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    LSHIFT          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    RSHIFT          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    IN              reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    NOT             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    EQ              reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    NEQ             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    GT              reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    GTE             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    LT              reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    LTE             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    AND             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    OR              reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    END             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    EXIT            reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    SETOUT          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    FOR             reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    WHILE           reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    PROCESS         reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    IDENTIFIER      reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    BIT_NEG         reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    LPAREN          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    LSQBRACK        reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    STRING          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    IF              reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    NUM_INT         reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    NUM_FLOAT       reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    TRUE            reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    FALSE           reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    RSQBRACK        reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    COMMA           reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    RPAREN          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    DO              reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    THEN            reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    COLON           reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    RBRACK          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    ARROW_LTR       reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    ARROW_RTL       reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)
    LBRACK          reduce using rule 65 (expression -> identifier MINUS_EQUAL NUM_INT .)


state 90

    (13) expression -> expression PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_AND         reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_OR          reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_XOR         reduce using rule 13 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 13 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 13 (expression -> expression PLUS expression .)
    IN              reduce using rule 13 (expression -> expression PLUS expression .)
    NOT             reduce using rule 13 (expression -> expression PLUS expression .)
    EQ              reduce using rule 13 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 13 (expression -> expression PLUS expression .)
    GT              reduce using rule 13 (expression -> expression PLUS expression .)
    GTE             reduce using rule 13 (expression -> expression PLUS expression .)
    LT              reduce using rule 13 (expression -> expression PLUS expression .)
    LTE             reduce using rule 13 (expression -> expression PLUS expression .)
    AND             reduce using rule 13 (expression -> expression PLUS expression .)
    OR              reduce using rule 13 (expression -> expression PLUS expression .)
    END             reduce using rule 13 (expression -> expression PLUS expression .)
    EXIT            reduce using rule 13 (expression -> expression PLUS expression .)
    SETOUT          reduce using rule 13 (expression -> expression PLUS expression .)
    FOR             reduce using rule 13 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 13 (expression -> expression PLUS expression .)
    PROCESS         reduce using rule 13 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 13 (expression -> expression PLUS expression .)
    BIT_NEG         reduce using rule 13 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 13 (expression -> expression PLUS expression .)
    LSQBRACK        reduce using rule 13 (expression -> expression PLUS expression .)
    STRING          reduce using rule 13 (expression -> expression PLUS expression .)
    IF              reduce using rule 13 (expression -> expression PLUS expression .)
    NUM_INT         reduce using rule 13 (expression -> expression PLUS expression .)
    NUM_FLOAT       reduce using rule 13 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 13 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 13 (expression -> expression PLUS expression .)
    RSQBRACK        reduce using rule 13 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 13 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS expression .)
    DO              reduce using rule 13 (expression -> expression PLUS expression .)
    THEN            reduce using rule 13 (expression -> expression PLUS expression .)
    COLON           reduce using rule 13 (expression -> expression PLUS expression .)
    RBRACK          reduce using rule 13 (expression -> expression PLUS expression .)
    ARROW_LTR       reduce using rule 13 (expression -> expression PLUS expression .)
    ARROW_RTL       reduce using rule 13 (expression -> expression PLUS expression .)
    LBRACK          reduce using rule 13 (expression -> expression PLUS expression .)
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46

  ! MUL             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! EXP             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 91

    (14) expression -> expression MINUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 14 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_AND         reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_OR          reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_XOR         reduce using rule 14 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 14 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 14 (expression -> expression MINUS expression .)
    IN              reduce using rule 14 (expression -> expression MINUS expression .)
    NOT             reduce using rule 14 (expression -> expression MINUS expression .)
    EQ              reduce using rule 14 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 14 (expression -> expression MINUS expression .)
    GT              reduce using rule 14 (expression -> expression MINUS expression .)
    GTE             reduce using rule 14 (expression -> expression MINUS expression .)
    LT              reduce using rule 14 (expression -> expression MINUS expression .)
    LTE             reduce using rule 14 (expression -> expression MINUS expression .)
    AND             reduce using rule 14 (expression -> expression MINUS expression .)
    OR              reduce using rule 14 (expression -> expression MINUS expression .)
    END             reduce using rule 14 (expression -> expression MINUS expression .)
    EXIT            reduce using rule 14 (expression -> expression MINUS expression .)
    SETOUT          reduce using rule 14 (expression -> expression MINUS expression .)
    FOR             reduce using rule 14 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 14 (expression -> expression MINUS expression .)
    PROCESS         reduce using rule 14 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 14 (expression -> expression MINUS expression .)
    BIT_NEG         reduce using rule 14 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 14 (expression -> expression MINUS expression .)
    LSQBRACK        reduce using rule 14 (expression -> expression MINUS expression .)
    STRING          reduce using rule 14 (expression -> expression MINUS expression .)
    IF              reduce using rule 14 (expression -> expression MINUS expression .)
    NUM_INT         reduce using rule 14 (expression -> expression MINUS expression .)
    NUM_FLOAT       reduce using rule 14 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 14 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 14 (expression -> expression MINUS expression .)
    RSQBRACK        reduce using rule 14 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 14 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression MINUS expression .)
    DO              reduce using rule 14 (expression -> expression MINUS expression .)
    THEN            reduce using rule 14 (expression -> expression MINUS expression .)
    COLON           reduce using rule 14 (expression -> expression MINUS expression .)
    RBRACK          reduce using rule 14 (expression -> expression MINUS expression .)
    ARROW_LTR       reduce using rule 14 (expression -> expression MINUS expression .)
    ARROW_RTL       reduce using rule 14 (expression -> expression MINUS expression .)
    LBRACK          reduce using rule 14 (expression -> expression MINUS expression .)
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46

  ! MUL             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! EXP             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 92

    (15) expression -> expression MUL expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 15 (expression -> expression MUL expression .)
    MINUS           reduce using rule 15 (expression -> expression MUL expression .)
    MUL             reduce using rule 15 (expression -> expression MUL expression .)
    DIV             reduce using rule 15 (expression -> expression MUL expression .)
    BIT_AND         reduce using rule 15 (expression -> expression MUL expression .)
    BIT_OR          reduce using rule 15 (expression -> expression MUL expression .)
    BIT_XOR         reduce using rule 15 (expression -> expression MUL expression .)
    LSHIFT          reduce using rule 15 (expression -> expression MUL expression .)
    RSHIFT          reduce using rule 15 (expression -> expression MUL expression .)
    IN              reduce using rule 15 (expression -> expression MUL expression .)
    NOT             reduce using rule 15 (expression -> expression MUL expression .)
    EQ              reduce using rule 15 (expression -> expression MUL expression .)
    NEQ             reduce using rule 15 (expression -> expression MUL expression .)
    GT              reduce using rule 15 (expression -> expression MUL expression .)
    GTE             reduce using rule 15 (expression -> expression MUL expression .)
    LT              reduce using rule 15 (expression -> expression MUL expression .)
    LTE             reduce using rule 15 (expression -> expression MUL expression .)
    AND             reduce using rule 15 (expression -> expression MUL expression .)
    OR              reduce using rule 15 (expression -> expression MUL expression .)
    END             reduce using rule 15 (expression -> expression MUL expression .)
    EXIT            reduce using rule 15 (expression -> expression MUL expression .)
    SETOUT          reduce using rule 15 (expression -> expression MUL expression .)
    FOR             reduce using rule 15 (expression -> expression MUL expression .)
    WHILE           reduce using rule 15 (expression -> expression MUL expression .)
    PROCESS         reduce using rule 15 (expression -> expression MUL expression .)
    IDENTIFIER      reduce using rule 15 (expression -> expression MUL expression .)
    BIT_NEG         reduce using rule 15 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 15 (expression -> expression MUL expression .)
    LSQBRACK        reduce using rule 15 (expression -> expression MUL expression .)
    STRING          reduce using rule 15 (expression -> expression MUL expression .)
    IF              reduce using rule 15 (expression -> expression MUL expression .)
    NUM_INT         reduce using rule 15 (expression -> expression MUL expression .)
    NUM_FLOAT       reduce using rule 15 (expression -> expression MUL expression .)
    TRUE            reduce using rule 15 (expression -> expression MUL expression .)
    FALSE           reduce using rule 15 (expression -> expression MUL expression .)
    RSQBRACK        reduce using rule 15 (expression -> expression MUL expression .)
    COMMA           reduce using rule 15 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 15 (expression -> expression MUL expression .)
    DO              reduce using rule 15 (expression -> expression MUL expression .)
    THEN            reduce using rule 15 (expression -> expression MUL expression .)
    COLON           reduce using rule 15 (expression -> expression MUL expression .)
    RBRACK          reduce using rule 15 (expression -> expression MUL expression .)
    ARROW_LTR       reduce using rule 15 (expression -> expression MUL expression .)
    ARROW_RTL       reduce using rule 15 (expression -> expression MUL expression .)
    LBRACK          reduce using rule 15 (expression -> expression MUL expression .)
    EXP             shift and go to state 45
    MOD             shift and go to state 46

  ! EXP             [ reduce using rule 15 (expression -> expression MUL expression .) ]
  ! MOD             [ reduce using rule 15 (expression -> expression MUL expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MUL             [ shift and go to state 43 ]
  ! DIV             [ shift and go to state 44 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 93

    (16) expression -> expression DIV expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 16 (expression -> expression DIV expression .)
    MINUS           reduce using rule 16 (expression -> expression DIV expression .)
    MUL             reduce using rule 16 (expression -> expression DIV expression .)
    DIV             reduce using rule 16 (expression -> expression DIV expression .)
    BIT_AND         reduce using rule 16 (expression -> expression DIV expression .)
    BIT_OR          reduce using rule 16 (expression -> expression DIV expression .)
    BIT_XOR         reduce using rule 16 (expression -> expression DIV expression .)
    LSHIFT          reduce using rule 16 (expression -> expression DIV expression .)
    RSHIFT          reduce using rule 16 (expression -> expression DIV expression .)
    IN              reduce using rule 16 (expression -> expression DIV expression .)
    NOT             reduce using rule 16 (expression -> expression DIV expression .)
    EQ              reduce using rule 16 (expression -> expression DIV expression .)
    NEQ             reduce using rule 16 (expression -> expression DIV expression .)
    GT              reduce using rule 16 (expression -> expression DIV expression .)
    GTE             reduce using rule 16 (expression -> expression DIV expression .)
    LT              reduce using rule 16 (expression -> expression DIV expression .)
    LTE             reduce using rule 16 (expression -> expression DIV expression .)
    AND             reduce using rule 16 (expression -> expression DIV expression .)
    OR              reduce using rule 16 (expression -> expression DIV expression .)
    END             reduce using rule 16 (expression -> expression DIV expression .)
    EXIT            reduce using rule 16 (expression -> expression DIV expression .)
    SETOUT          reduce using rule 16 (expression -> expression DIV expression .)
    FOR             reduce using rule 16 (expression -> expression DIV expression .)
    WHILE           reduce using rule 16 (expression -> expression DIV expression .)
    PROCESS         reduce using rule 16 (expression -> expression DIV expression .)
    IDENTIFIER      reduce using rule 16 (expression -> expression DIV expression .)
    BIT_NEG         reduce using rule 16 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 16 (expression -> expression DIV expression .)
    LSQBRACK        reduce using rule 16 (expression -> expression DIV expression .)
    STRING          reduce using rule 16 (expression -> expression DIV expression .)
    IF              reduce using rule 16 (expression -> expression DIV expression .)
    NUM_INT         reduce using rule 16 (expression -> expression DIV expression .)
    NUM_FLOAT       reduce using rule 16 (expression -> expression DIV expression .)
    TRUE            reduce using rule 16 (expression -> expression DIV expression .)
    FALSE           reduce using rule 16 (expression -> expression DIV expression .)
    RSQBRACK        reduce using rule 16 (expression -> expression DIV expression .)
    COMMA           reduce using rule 16 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 16 (expression -> expression DIV expression .)
    DO              reduce using rule 16 (expression -> expression DIV expression .)
    THEN            reduce using rule 16 (expression -> expression DIV expression .)
    COLON           reduce using rule 16 (expression -> expression DIV expression .)
    RBRACK          reduce using rule 16 (expression -> expression DIV expression .)
    ARROW_LTR       reduce using rule 16 (expression -> expression DIV expression .)
    ARROW_RTL       reduce using rule 16 (expression -> expression DIV expression .)
    LBRACK          reduce using rule 16 (expression -> expression DIV expression .)
    EXP             shift and go to state 45
    MOD             shift and go to state 46

  ! EXP             [ reduce using rule 16 (expression -> expression DIV expression .) ]
  ! MOD             [ reduce using rule 16 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MUL             [ shift and go to state 43 ]
  ! DIV             [ shift and go to state 44 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 94

    (17) expression -> expression EXP expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 17 (expression -> expression EXP expression .)
    MINUS           reduce using rule 17 (expression -> expression EXP expression .)
    MUL             reduce using rule 17 (expression -> expression EXP expression .)
    DIV             reduce using rule 17 (expression -> expression EXP expression .)
    EXP             reduce using rule 17 (expression -> expression EXP expression .)
    MOD             reduce using rule 17 (expression -> expression EXP expression .)
    BIT_AND         reduce using rule 17 (expression -> expression EXP expression .)
    BIT_OR          reduce using rule 17 (expression -> expression EXP expression .)
    BIT_XOR         reduce using rule 17 (expression -> expression EXP expression .)
    LSHIFT          reduce using rule 17 (expression -> expression EXP expression .)
    RSHIFT          reduce using rule 17 (expression -> expression EXP expression .)
    IN              reduce using rule 17 (expression -> expression EXP expression .)
    NOT             reduce using rule 17 (expression -> expression EXP expression .)
    EQ              reduce using rule 17 (expression -> expression EXP expression .)
    NEQ             reduce using rule 17 (expression -> expression EXP expression .)
    GT              reduce using rule 17 (expression -> expression EXP expression .)
    GTE             reduce using rule 17 (expression -> expression EXP expression .)
    LT              reduce using rule 17 (expression -> expression EXP expression .)
    LTE             reduce using rule 17 (expression -> expression EXP expression .)
    AND             reduce using rule 17 (expression -> expression EXP expression .)
    OR              reduce using rule 17 (expression -> expression EXP expression .)
    END             reduce using rule 17 (expression -> expression EXP expression .)
    EXIT            reduce using rule 17 (expression -> expression EXP expression .)
    SETOUT          reduce using rule 17 (expression -> expression EXP expression .)
    FOR             reduce using rule 17 (expression -> expression EXP expression .)
    WHILE           reduce using rule 17 (expression -> expression EXP expression .)
    PROCESS         reduce using rule 17 (expression -> expression EXP expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression EXP expression .)
    BIT_NEG         reduce using rule 17 (expression -> expression EXP expression .)
    LPAREN          reduce using rule 17 (expression -> expression EXP expression .)
    LSQBRACK        reduce using rule 17 (expression -> expression EXP expression .)
    STRING          reduce using rule 17 (expression -> expression EXP expression .)
    IF              reduce using rule 17 (expression -> expression EXP expression .)
    NUM_INT         reduce using rule 17 (expression -> expression EXP expression .)
    NUM_FLOAT       reduce using rule 17 (expression -> expression EXP expression .)
    TRUE            reduce using rule 17 (expression -> expression EXP expression .)
    FALSE           reduce using rule 17 (expression -> expression EXP expression .)
    RSQBRACK        reduce using rule 17 (expression -> expression EXP expression .)
    COMMA           reduce using rule 17 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 17 (expression -> expression EXP expression .)
    DO              reduce using rule 17 (expression -> expression EXP expression .)
    THEN            reduce using rule 17 (expression -> expression EXP expression .)
    COLON           reduce using rule 17 (expression -> expression EXP expression .)
    RBRACK          reduce using rule 17 (expression -> expression EXP expression .)
    ARROW_LTR       reduce using rule 17 (expression -> expression EXP expression .)
    ARROW_RTL       reduce using rule 17 (expression -> expression EXP expression .)
    LBRACK          reduce using rule 17 (expression -> expression EXP expression .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MUL             [ shift and go to state 43 ]
  ! DIV             [ shift and go to state 44 ]
  ! EXP             [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 95

    (18) expression -> expression MOD expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    PLUS            reduce using rule 18 (expression -> expression MOD expression .)
    MINUS           reduce using rule 18 (expression -> expression MOD expression .)
    MUL             reduce using rule 18 (expression -> expression MOD expression .)
    DIV             reduce using rule 18 (expression -> expression MOD expression .)
    EXP             reduce using rule 18 (expression -> expression MOD expression .)
    MOD             reduce using rule 18 (expression -> expression MOD expression .)
    BIT_AND         reduce using rule 18 (expression -> expression MOD expression .)
    BIT_OR          reduce using rule 18 (expression -> expression MOD expression .)
    BIT_XOR         reduce using rule 18 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 18 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 18 (expression -> expression MOD expression .)
    IN              reduce using rule 18 (expression -> expression MOD expression .)
    NOT             reduce using rule 18 (expression -> expression MOD expression .)
    EQ              reduce using rule 18 (expression -> expression MOD expression .)
    NEQ             reduce using rule 18 (expression -> expression MOD expression .)
    GT              reduce using rule 18 (expression -> expression MOD expression .)
    GTE             reduce using rule 18 (expression -> expression MOD expression .)
    LT              reduce using rule 18 (expression -> expression MOD expression .)
    LTE             reduce using rule 18 (expression -> expression MOD expression .)
    AND             reduce using rule 18 (expression -> expression MOD expression .)
    OR              reduce using rule 18 (expression -> expression MOD expression .)
    END             reduce using rule 18 (expression -> expression MOD expression .)
    EXIT            reduce using rule 18 (expression -> expression MOD expression .)
    SETOUT          reduce using rule 18 (expression -> expression MOD expression .)
    FOR             reduce using rule 18 (expression -> expression MOD expression .)
    WHILE           reduce using rule 18 (expression -> expression MOD expression .)
    PROCESS         reduce using rule 18 (expression -> expression MOD expression .)
    IDENTIFIER      reduce using rule 18 (expression -> expression MOD expression .)
    BIT_NEG         reduce using rule 18 (expression -> expression MOD expression .)
    LPAREN          reduce using rule 18 (expression -> expression MOD expression .)
    LSQBRACK        reduce using rule 18 (expression -> expression MOD expression .)
    STRING          reduce using rule 18 (expression -> expression MOD expression .)
    IF              reduce using rule 18 (expression -> expression MOD expression .)
    NUM_INT         reduce using rule 18 (expression -> expression MOD expression .)
    NUM_FLOAT       reduce using rule 18 (expression -> expression MOD expression .)
    TRUE            reduce using rule 18 (expression -> expression MOD expression .)
    FALSE           reduce using rule 18 (expression -> expression MOD expression .)
    RSQBRACK        reduce using rule 18 (expression -> expression MOD expression .)
    COMMA           reduce using rule 18 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 18 (expression -> expression MOD expression .)
    DO              reduce using rule 18 (expression -> expression MOD expression .)
    THEN            reduce using rule 18 (expression -> expression MOD expression .)
    COLON           reduce using rule 18 (expression -> expression MOD expression .)
    RBRACK          reduce using rule 18 (expression -> expression MOD expression .)
    ARROW_LTR       reduce using rule 18 (expression -> expression MOD expression .)
    ARROW_RTL       reduce using rule 18 (expression -> expression MOD expression .)
    LBRACK          reduce using rule 18 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MUL             [ shift and go to state 43 ]
  ! DIV             [ shift and go to state 44 ]
  ! EXP             [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! BIT_AND         [ shift and go to state 47 ]
  ! BIT_OR          [ shift and go to state 48 ]
  ! BIT_XOR         [ shift and go to state 49 ]
  ! LSHIFT          [ shift and go to state 50 ]
  ! RSHIFT          [ shift and go to state 51 ]
  ! IN              [ shift and go to state 52 ]
  ! NOT             [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! GTE             [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LTE             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 96

    (19) expression -> expression BIT_AND expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 19 (expression -> expression BIT_AND expression .)
    EXIT            reduce using rule 19 (expression -> expression BIT_AND expression .)
    SETOUT          reduce using rule 19 (expression -> expression BIT_AND expression .)
    FOR             reduce using rule 19 (expression -> expression BIT_AND expression .)
    WHILE           reduce using rule 19 (expression -> expression BIT_AND expression .)
    PROCESS         reduce using rule 19 (expression -> expression BIT_AND expression .)
    IDENTIFIER      reduce using rule 19 (expression -> expression BIT_AND expression .)
    BIT_NEG         reduce using rule 19 (expression -> expression BIT_AND expression .)
    LPAREN          reduce using rule 19 (expression -> expression BIT_AND expression .)
    LSQBRACK        reduce using rule 19 (expression -> expression BIT_AND expression .)
    STRING          reduce using rule 19 (expression -> expression BIT_AND expression .)
    IF              reduce using rule 19 (expression -> expression BIT_AND expression .)
    NUM_INT         reduce using rule 19 (expression -> expression BIT_AND expression .)
    NUM_FLOAT       reduce using rule 19 (expression -> expression BIT_AND expression .)
    TRUE            reduce using rule 19 (expression -> expression BIT_AND expression .)
    FALSE           reduce using rule 19 (expression -> expression BIT_AND expression .)
    RSQBRACK        reduce using rule 19 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 19 (expression -> expression BIT_AND expression .)
    RPAREN          reduce using rule 19 (expression -> expression BIT_AND expression .)
    DO              reduce using rule 19 (expression -> expression BIT_AND expression .)
    THEN            reduce using rule 19 (expression -> expression BIT_AND expression .)
    COLON           reduce using rule 19 (expression -> expression BIT_AND expression .)
    RBRACK          reduce using rule 19 (expression -> expression BIT_AND expression .)
    ARROW_LTR       reduce using rule 19 (expression -> expression BIT_AND expression .)
    ARROW_RTL       reduce using rule 19 (expression -> expression BIT_AND expression .)
    LBRACK          reduce using rule 19 (expression -> expression BIT_AND expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MUL             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! DIV             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! EXP             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! MOD             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_AND         [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_OR          [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! BIT_XOR         [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LSHIFT          [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! RSHIFT          [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! IN              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! NOT             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! EQ              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! NEQ             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! GT              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! GTE             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LT              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! LTE             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! AND             [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]
  ! OR              [ reduce using rule 19 (expression -> expression BIT_AND expression .) ]


state 97

    (20) expression -> expression BIT_OR expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 20 (expression -> expression BIT_OR expression .)
    EXIT            reduce using rule 20 (expression -> expression BIT_OR expression .)
    SETOUT          reduce using rule 20 (expression -> expression BIT_OR expression .)
    FOR             reduce using rule 20 (expression -> expression BIT_OR expression .)
    WHILE           reduce using rule 20 (expression -> expression BIT_OR expression .)
    PROCESS         reduce using rule 20 (expression -> expression BIT_OR expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression BIT_OR expression .)
    BIT_NEG         reduce using rule 20 (expression -> expression BIT_OR expression .)
    LPAREN          reduce using rule 20 (expression -> expression BIT_OR expression .)
    LSQBRACK        reduce using rule 20 (expression -> expression BIT_OR expression .)
    STRING          reduce using rule 20 (expression -> expression BIT_OR expression .)
    IF              reduce using rule 20 (expression -> expression BIT_OR expression .)
    NUM_INT         reduce using rule 20 (expression -> expression BIT_OR expression .)
    NUM_FLOAT       reduce using rule 20 (expression -> expression BIT_OR expression .)
    TRUE            reduce using rule 20 (expression -> expression BIT_OR expression .)
    FALSE           reduce using rule 20 (expression -> expression BIT_OR expression .)
    RSQBRACK        reduce using rule 20 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 20 (expression -> expression BIT_OR expression .)
    RPAREN          reduce using rule 20 (expression -> expression BIT_OR expression .)
    DO              reduce using rule 20 (expression -> expression BIT_OR expression .)
    THEN            reduce using rule 20 (expression -> expression BIT_OR expression .)
    COLON           reduce using rule 20 (expression -> expression BIT_OR expression .)
    RBRACK          reduce using rule 20 (expression -> expression BIT_OR expression .)
    ARROW_LTR       reduce using rule 20 (expression -> expression BIT_OR expression .)
    ARROW_RTL       reduce using rule 20 (expression -> expression BIT_OR expression .)
    LBRACK          reduce using rule 20 (expression -> expression BIT_OR expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MUL             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! EXP             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! MOD             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_OR          [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! BIT_XOR         [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LSHIFT          [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! RSHIFT          [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! IN              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! NOT             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! EQ              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! NEQ             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! GT              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! GTE             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LT              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! LTE             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression BIT_OR expression .) ]


state 98

    (21) expression -> expression BIT_XOR expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 21 (expression -> expression BIT_XOR expression .)
    EXIT            reduce using rule 21 (expression -> expression BIT_XOR expression .)
    SETOUT          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    FOR             reduce using rule 21 (expression -> expression BIT_XOR expression .)
    WHILE           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    PROCESS         reduce using rule 21 (expression -> expression BIT_XOR expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression BIT_XOR expression .)
    BIT_NEG         reduce using rule 21 (expression -> expression BIT_XOR expression .)
    LPAREN          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    LSQBRACK        reduce using rule 21 (expression -> expression BIT_XOR expression .)
    STRING          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    IF              reduce using rule 21 (expression -> expression BIT_XOR expression .)
    NUM_INT         reduce using rule 21 (expression -> expression BIT_XOR expression .)
    NUM_FLOAT       reduce using rule 21 (expression -> expression BIT_XOR expression .)
    TRUE            reduce using rule 21 (expression -> expression BIT_XOR expression .)
    FALSE           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    RSQBRACK        reduce using rule 21 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    RPAREN          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    DO              reduce using rule 21 (expression -> expression BIT_XOR expression .)
    THEN            reduce using rule 21 (expression -> expression BIT_XOR expression .)
    COLON           reduce using rule 21 (expression -> expression BIT_XOR expression .)
    RBRACK          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    ARROW_LTR       reduce using rule 21 (expression -> expression BIT_XOR expression .)
    ARROW_RTL       reduce using rule 21 (expression -> expression BIT_XOR expression .)
    LBRACK          reduce using rule 21 (expression -> expression BIT_XOR expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! MUL             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! DIV             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! EXP             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! MOD             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! BIT_OR          [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! BIT_XOR         [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! LSHIFT          [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! RSHIFT          [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! IN              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! NOT             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! NEQ             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! GT              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! GTE             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! LT              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! LTE             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! AND             [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]
  ! OR              [ reduce using rule 21 (expression -> expression BIT_XOR expression .) ]


state 99

    (22) expression -> expression LSHIFT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 22 (expression -> expression LSHIFT expression .)
    EXIT            reduce using rule 22 (expression -> expression LSHIFT expression .)
    SETOUT          reduce using rule 22 (expression -> expression LSHIFT expression .)
    FOR             reduce using rule 22 (expression -> expression LSHIFT expression .)
    WHILE           reduce using rule 22 (expression -> expression LSHIFT expression .)
    PROCESS         reduce using rule 22 (expression -> expression LSHIFT expression .)
    IDENTIFIER      reduce using rule 22 (expression -> expression LSHIFT expression .)
    BIT_NEG         reduce using rule 22 (expression -> expression LSHIFT expression .)
    LPAREN          reduce using rule 22 (expression -> expression LSHIFT expression .)
    LSQBRACK        reduce using rule 22 (expression -> expression LSHIFT expression .)
    STRING          reduce using rule 22 (expression -> expression LSHIFT expression .)
    IF              reduce using rule 22 (expression -> expression LSHIFT expression .)
    NUM_INT         reduce using rule 22 (expression -> expression LSHIFT expression .)
    NUM_FLOAT       reduce using rule 22 (expression -> expression LSHIFT expression .)
    TRUE            reduce using rule 22 (expression -> expression LSHIFT expression .)
    FALSE           reduce using rule 22 (expression -> expression LSHIFT expression .)
    RSQBRACK        reduce using rule 22 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 22 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 22 (expression -> expression LSHIFT expression .)
    DO              reduce using rule 22 (expression -> expression LSHIFT expression .)
    THEN            reduce using rule 22 (expression -> expression LSHIFT expression .)
    COLON           reduce using rule 22 (expression -> expression LSHIFT expression .)
    RBRACK          reduce using rule 22 (expression -> expression LSHIFT expression .)
    ARROW_LTR       reduce using rule 22 (expression -> expression LSHIFT expression .)
    ARROW_RTL       reduce using rule 22 (expression -> expression LSHIFT expression .)
    LBRACK          reduce using rule 22 (expression -> expression LSHIFT expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! MUL             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! DIV             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! EXP             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! BIT_AND         [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! BIT_OR          [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! BIT_XOR         [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! LSHIFT          [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! RSHIFT          [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! IN              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! NOT             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! EQ              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! NEQ             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! GT              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! GTE             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! LT              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! LTE             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! AND             [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]
  ! OR              [ reduce using rule 22 (expression -> expression LSHIFT expression .) ]


state 100

    (23) expression -> expression RSHIFT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 23 (expression -> expression RSHIFT expression .)
    EXIT            reduce using rule 23 (expression -> expression RSHIFT expression .)
    SETOUT          reduce using rule 23 (expression -> expression RSHIFT expression .)
    FOR             reduce using rule 23 (expression -> expression RSHIFT expression .)
    WHILE           reduce using rule 23 (expression -> expression RSHIFT expression .)
    PROCESS         reduce using rule 23 (expression -> expression RSHIFT expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression RSHIFT expression .)
    BIT_NEG         reduce using rule 23 (expression -> expression RSHIFT expression .)
    LPAREN          reduce using rule 23 (expression -> expression RSHIFT expression .)
    LSQBRACK        reduce using rule 23 (expression -> expression RSHIFT expression .)
    STRING          reduce using rule 23 (expression -> expression RSHIFT expression .)
    IF              reduce using rule 23 (expression -> expression RSHIFT expression .)
    NUM_INT         reduce using rule 23 (expression -> expression RSHIFT expression .)
    NUM_FLOAT       reduce using rule 23 (expression -> expression RSHIFT expression .)
    TRUE            reduce using rule 23 (expression -> expression RSHIFT expression .)
    FALSE           reduce using rule 23 (expression -> expression RSHIFT expression .)
    RSQBRACK        reduce using rule 23 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 23 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 23 (expression -> expression RSHIFT expression .)
    DO              reduce using rule 23 (expression -> expression RSHIFT expression .)
    THEN            reduce using rule 23 (expression -> expression RSHIFT expression .)
    COLON           reduce using rule 23 (expression -> expression RSHIFT expression .)
    RBRACK          reduce using rule 23 (expression -> expression RSHIFT expression .)
    ARROW_LTR       reduce using rule 23 (expression -> expression RSHIFT expression .)
    ARROW_RTL       reduce using rule 23 (expression -> expression RSHIFT expression .)
    LBRACK          reduce using rule 23 (expression -> expression RSHIFT expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! MUL             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! DIV             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! EXP             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! BIT_AND         [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! BIT_OR          [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! BIT_XOR         [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! LSHIFT          [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! RSHIFT          [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! IN              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! NOT             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! NEQ             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! GTE             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! LT              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! LTE             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! AND             [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]
  ! OR              [ reduce using rule 23 (expression -> expression RSHIFT expression .) ]


state 101

    (55) expression -> expression IN expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 55 (expression -> expression IN expression .)
    EXIT            reduce using rule 55 (expression -> expression IN expression .)
    SETOUT          reduce using rule 55 (expression -> expression IN expression .)
    FOR             reduce using rule 55 (expression -> expression IN expression .)
    WHILE           reduce using rule 55 (expression -> expression IN expression .)
    PROCESS         reduce using rule 55 (expression -> expression IN expression .)
    IDENTIFIER      reduce using rule 55 (expression -> expression IN expression .)
    BIT_NEG         reduce using rule 55 (expression -> expression IN expression .)
    LPAREN          reduce using rule 55 (expression -> expression IN expression .)
    LSQBRACK        reduce using rule 55 (expression -> expression IN expression .)
    STRING          reduce using rule 55 (expression -> expression IN expression .)
    IF              reduce using rule 55 (expression -> expression IN expression .)
    NUM_INT         reduce using rule 55 (expression -> expression IN expression .)
    NUM_FLOAT       reduce using rule 55 (expression -> expression IN expression .)
    TRUE            reduce using rule 55 (expression -> expression IN expression .)
    FALSE           reduce using rule 55 (expression -> expression IN expression .)
    RSQBRACK        reduce using rule 55 (expression -> expression IN expression .)
    COMMA           reduce using rule 55 (expression -> expression IN expression .)
    RPAREN          reduce using rule 55 (expression -> expression IN expression .)
    DO              reduce using rule 55 (expression -> expression IN expression .)
    THEN            reduce using rule 55 (expression -> expression IN expression .)
    COLON           reduce using rule 55 (expression -> expression IN expression .)
    RBRACK          reduce using rule 55 (expression -> expression IN expression .)
    ARROW_LTR       reduce using rule 55 (expression -> expression IN expression .)
    ARROW_RTL       reduce using rule 55 (expression -> expression IN expression .)
    LBRACK          reduce using rule 55 (expression -> expression IN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! MUL             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! EXP             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! BIT_AND         [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! BIT_OR          [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! BIT_XOR         [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! LSHIFT          [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! RSHIFT          [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! IN              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! NOT             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! GT              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! GTE             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! LT              [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! LTE             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression IN expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression IN expression .) ]


state 102

    (56) expression -> expression NOT IN . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 126
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 103

    (24) boolean -> expression EQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 24 (boolean -> expression EQ expression .)
    EXIT            reduce using rule 24 (boolean -> expression EQ expression .)
    SETOUT          reduce using rule 24 (boolean -> expression EQ expression .)
    FOR             reduce using rule 24 (boolean -> expression EQ expression .)
    WHILE           reduce using rule 24 (boolean -> expression EQ expression .)
    PROCESS         reduce using rule 24 (boolean -> expression EQ expression .)
    IDENTIFIER      reduce using rule 24 (boolean -> expression EQ expression .)
    BIT_NEG         reduce using rule 24 (boolean -> expression EQ expression .)
    LPAREN          reduce using rule 24 (boolean -> expression EQ expression .)
    LSQBRACK        reduce using rule 24 (boolean -> expression EQ expression .)
    STRING          reduce using rule 24 (boolean -> expression EQ expression .)
    IF              reduce using rule 24 (boolean -> expression EQ expression .)
    NUM_INT         reduce using rule 24 (boolean -> expression EQ expression .)
    NUM_FLOAT       reduce using rule 24 (boolean -> expression EQ expression .)
    TRUE            reduce using rule 24 (boolean -> expression EQ expression .)
    FALSE           reduce using rule 24 (boolean -> expression EQ expression .)
    RSQBRACK        reduce using rule 24 (boolean -> expression EQ expression .)
    COMMA           reduce using rule 24 (boolean -> expression EQ expression .)
    RPAREN          reduce using rule 24 (boolean -> expression EQ expression .)
    DO              reduce using rule 24 (boolean -> expression EQ expression .)
    THEN            reduce using rule 24 (boolean -> expression EQ expression .)
    COLON           reduce using rule 24 (boolean -> expression EQ expression .)
    RBRACK          reduce using rule 24 (boolean -> expression EQ expression .)
    ARROW_LTR       reduce using rule 24 (boolean -> expression EQ expression .)
    ARROW_RTL       reduce using rule 24 (boolean -> expression EQ expression .)
    LBRACK          reduce using rule 24 (boolean -> expression EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! EXP             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! BIT_AND         [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! BIT_OR          [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! BIT_XOR         [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! LSHIFT          [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! IN              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! NOT             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! GT              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! GTE             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! LT              [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! LTE             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! AND             [ reduce using rule 24 (boolean -> expression EQ expression .) ]
  ! OR              [ reduce using rule 24 (boolean -> expression EQ expression .) ]


state 104

    (25) boolean -> expression NEQ expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 25 (boolean -> expression NEQ expression .)
    EXIT            reduce using rule 25 (boolean -> expression NEQ expression .)
    SETOUT          reduce using rule 25 (boolean -> expression NEQ expression .)
    FOR             reduce using rule 25 (boolean -> expression NEQ expression .)
    WHILE           reduce using rule 25 (boolean -> expression NEQ expression .)
    PROCESS         reduce using rule 25 (boolean -> expression NEQ expression .)
    IDENTIFIER      reduce using rule 25 (boolean -> expression NEQ expression .)
    BIT_NEG         reduce using rule 25 (boolean -> expression NEQ expression .)
    LPAREN          reduce using rule 25 (boolean -> expression NEQ expression .)
    LSQBRACK        reduce using rule 25 (boolean -> expression NEQ expression .)
    STRING          reduce using rule 25 (boolean -> expression NEQ expression .)
    IF              reduce using rule 25 (boolean -> expression NEQ expression .)
    NUM_INT         reduce using rule 25 (boolean -> expression NEQ expression .)
    NUM_FLOAT       reduce using rule 25 (boolean -> expression NEQ expression .)
    TRUE            reduce using rule 25 (boolean -> expression NEQ expression .)
    FALSE           reduce using rule 25 (boolean -> expression NEQ expression .)
    RSQBRACK        reduce using rule 25 (boolean -> expression NEQ expression .)
    COMMA           reduce using rule 25 (boolean -> expression NEQ expression .)
    RPAREN          reduce using rule 25 (boolean -> expression NEQ expression .)
    DO              reduce using rule 25 (boolean -> expression NEQ expression .)
    THEN            reduce using rule 25 (boolean -> expression NEQ expression .)
    COLON           reduce using rule 25 (boolean -> expression NEQ expression .)
    RBRACK          reduce using rule 25 (boolean -> expression NEQ expression .)
    ARROW_LTR       reduce using rule 25 (boolean -> expression NEQ expression .)
    ARROW_RTL       reduce using rule 25 (boolean -> expression NEQ expression .)
    LBRACK          reduce using rule 25 (boolean -> expression NEQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! MUL             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! EXP             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! BIT_AND         [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! BIT_OR          [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! BIT_XOR         [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! LSHIFT          [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! RSHIFT          [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! IN              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! NOT             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! GTE             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 25 (boolean -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 25 (boolean -> expression NEQ expression .) ]


state 105

    (26) boolean -> expression GT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 26 (boolean -> expression GT expression .)
    EXIT            reduce using rule 26 (boolean -> expression GT expression .)
    SETOUT          reduce using rule 26 (boolean -> expression GT expression .)
    FOR             reduce using rule 26 (boolean -> expression GT expression .)
    WHILE           reduce using rule 26 (boolean -> expression GT expression .)
    PROCESS         reduce using rule 26 (boolean -> expression GT expression .)
    IDENTIFIER      reduce using rule 26 (boolean -> expression GT expression .)
    BIT_NEG         reduce using rule 26 (boolean -> expression GT expression .)
    LPAREN          reduce using rule 26 (boolean -> expression GT expression .)
    LSQBRACK        reduce using rule 26 (boolean -> expression GT expression .)
    STRING          reduce using rule 26 (boolean -> expression GT expression .)
    IF              reduce using rule 26 (boolean -> expression GT expression .)
    NUM_INT         reduce using rule 26 (boolean -> expression GT expression .)
    NUM_FLOAT       reduce using rule 26 (boolean -> expression GT expression .)
    TRUE            reduce using rule 26 (boolean -> expression GT expression .)
    FALSE           reduce using rule 26 (boolean -> expression GT expression .)
    RSQBRACK        reduce using rule 26 (boolean -> expression GT expression .)
    COMMA           reduce using rule 26 (boolean -> expression GT expression .)
    RPAREN          reduce using rule 26 (boolean -> expression GT expression .)
    DO              reduce using rule 26 (boolean -> expression GT expression .)
    THEN            reduce using rule 26 (boolean -> expression GT expression .)
    COLON           reduce using rule 26 (boolean -> expression GT expression .)
    RBRACK          reduce using rule 26 (boolean -> expression GT expression .)
    ARROW_LTR       reduce using rule 26 (boolean -> expression GT expression .)
    ARROW_RTL       reduce using rule 26 (boolean -> expression GT expression .)
    LBRACK          reduce using rule 26 (boolean -> expression GT expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! MUL             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! DIV             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! EXP             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! MOD             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! BIT_AND         [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! BIT_OR          [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! BIT_XOR         [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! IN              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! NOT             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! EQ              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! GT              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! GTE             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! LT              [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! LTE             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! AND             [ reduce using rule 26 (boolean -> expression GT expression .) ]
  ! OR              [ reduce using rule 26 (boolean -> expression GT expression .) ]


state 106

    (27) boolean -> expression GTE expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 27 (boolean -> expression GTE expression .)
    EXIT            reduce using rule 27 (boolean -> expression GTE expression .)
    SETOUT          reduce using rule 27 (boolean -> expression GTE expression .)
    FOR             reduce using rule 27 (boolean -> expression GTE expression .)
    WHILE           reduce using rule 27 (boolean -> expression GTE expression .)
    PROCESS         reduce using rule 27 (boolean -> expression GTE expression .)
    IDENTIFIER      reduce using rule 27 (boolean -> expression GTE expression .)
    BIT_NEG         reduce using rule 27 (boolean -> expression GTE expression .)
    LPAREN          reduce using rule 27 (boolean -> expression GTE expression .)
    LSQBRACK        reduce using rule 27 (boolean -> expression GTE expression .)
    STRING          reduce using rule 27 (boolean -> expression GTE expression .)
    IF              reduce using rule 27 (boolean -> expression GTE expression .)
    NUM_INT         reduce using rule 27 (boolean -> expression GTE expression .)
    NUM_FLOAT       reduce using rule 27 (boolean -> expression GTE expression .)
    TRUE            reduce using rule 27 (boolean -> expression GTE expression .)
    FALSE           reduce using rule 27 (boolean -> expression GTE expression .)
    RSQBRACK        reduce using rule 27 (boolean -> expression GTE expression .)
    COMMA           reduce using rule 27 (boolean -> expression GTE expression .)
    RPAREN          reduce using rule 27 (boolean -> expression GTE expression .)
    DO              reduce using rule 27 (boolean -> expression GTE expression .)
    THEN            reduce using rule 27 (boolean -> expression GTE expression .)
    COLON           reduce using rule 27 (boolean -> expression GTE expression .)
    RBRACK          reduce using rule 27 (boolean -> expression GTE expression .)
    ARROW_LTR       reduce using rule 27 (boolean -> expression GTE expression .)
    ARROW_RTL       reduce using rule 27 (boolean -> expression GTE expression .)
    LBRACK          reduce using rule 27 (boolean -> expression GTE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! MUL             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! DIV             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! EXP             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! BIT_AND         [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! BIT_OR          [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! BIT_XOR         [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! LSHIFT          [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! RSHIFT          [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! IN              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! NOT             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! EQ              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! NEQ             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! GT              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! GTE             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! LT              [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! LTE             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! AND             [ reduce using rule 27 (boolean -> expression GTE expression .) ]
  ! OR              [ reduce using rule 27 (boolean -> expression GTE expression .) ]


state 107

    (28) boolean -> expression LT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 28 (boolean -> expression LT expression .)
    EXIT            reduce using rule 28 (boolean -> expression LT expression .)
    SETOUT          reduce using rule 28 (boolean -> expression LT expression .)
    FOR             reduce using rule 28 (boolean -> expression LT expression .)
    WHILE           reduce using rule 28 (boolean -> expression LT expression .)
    PROCESS         reduce using rule 28 (boolean -> expression LT expression .)
    IDENTIFIER      reduce using rule 28 (boolean -> expression LT expression .)
    BIT_NEG         reduce using rule 28 (boolean -> expression LT expression .)
    LPAREN          reduce using rule 28 (boolean -> expression LT expression .)
    LSQBRACK        reduce using rule 28 (boolean -> expression LT expression .)
    STRING          reduce using rule 28 (boolean -> expression LT expression .)
    IF              reduce using rule 28 (boolean -> expression LT expression .)
    NUM_INT         reduce using rule 28 (boolean -> expression LT expression .)
    NUM_FLOAT       reduce using rule 28 (boolean -> expression LT expression .)
    TRUE            reduce using rule 28 (boolean -> expression LT expression .)
    FALSE           reduce using rule 28 (boolean -> expression LT expression .)
    RSQBRACK        reduce using rule 28 (boolean -> expression LT expression .)
    COMMA           reduce using rule 28 (boolean -> expression LT expression .)
    RPAREN          reduce using rule 28 (boolean -> expression LT expression .)
    DO              reduce using rule 28 (boolean -> expression LT expression .)
    THEN            reduce using rule 28 (boolean -> expression LT expression .)
    COLON           reduce using rule 28 (boolean -> expression LT expression .)
    RBRACK          reduce using rule 28 (boolean -> expression LT expression .)
    ARROW_LTR       reduce using rule 28 (boolean -> expression LT expression .)
    ARROW_RTL       reduce using rule 28 (boolean -> expression LT expression .)
    LBRACK          reduce using rule 28 (boolean -> expression LT expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! MUL             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! DIV             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! EXP             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! MOD             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! BIT_AND         [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! BIT_OR          [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! BIT_XOR         [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! IN              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! NOT             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! EQ              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! GT              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! GTE             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! LT              [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! LTE             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! AND             [ reduce using rule 28 (boolean -> expression LT expression .) ]
  ! OR              [ reduce using rule 28 (boolean -> expression LT expression .) ]


state 108

    (29) boolean -> expression LTE expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 29 (boolean -> expression LTE expression .)
    EXIT            reduce using rule 29 (boolean -> expression LTE expression .)
    SETOUT          reduce using rule 29 (boolean -> expression LTE expression .)
    FOR             reduce using rule 29 (boolean -> expression LTE expression .)
    WHILE           reduce using rule 29 (boolean -> expression LTE expression .)
    PROCESS         reduce using rule 29 (boolean -> expression LTE expression .)
    IDENTIFIER      reduce using rule 29 (boolean -> expression LTE expression .)
    BIT_NEG         reduce using rule 29 (boolean -> expression LTE expression .)
    LPAREN          reduce using rule 29 (boolean -> expression LTE expression .)
    LSQBRACK        reduce using rule 29 (boolean -> expression LTE expression .)
    STRING          reduce using rule 29 (boolean -> expression LTE expression .)
    IF              reduce using rule 29 (boolean -> expression LTE expression .)
    NUM_INT         reduce using rule 29 (boolean -> expression LTE expression .)
    NUM_FLOAT       reduce using rule 29 (boolean -> expression LTE expression .)
    TRUE            reduce using rule 29 (boolean -> expression LTE expression .)
    FALSE           reduce using rule 29 (boolean -> expression LTE expression .)
    RSQBRACK        reduce using rule 29 (boolean -> expression LTE expression .)
    COMMA           reduce using rule 29 (boolean -> expression LTE expression .)
    RPAREN          reduce using rule 29 (boolean -> expression LTE expression .)
    DO              reduce using rule 29 (boolean -> expression LTE expression .)
    THEN            reduce using rule 29 (boolean -> expression LTE expression .)
    COLON           reduce using rule 29 (boolean -> expression LTE expression .)
    RBRACK          reduce using rule 29 (boolean -> expression LTE expression .)
    ARROW_LTR       reduce using rule 29 (boolean -> expression LTE expression .)
    ARROW_RTL       reduce using rule 29 (boolean -> expression LTE expression .)
    LBRACK          reduce using rule 29 (boolean -> expression LTE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! MUL             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! DIV             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! EXP             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! BIT_AND         [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! BIT_OR          [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! BIT_XOR         [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! LSHIFT          [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! RSHIFT          [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! IN              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! NOT             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! EQ              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! GT              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! GTE             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! LT              [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! AND             [ reduce using rule 29 (boolean -> expression LTE expression .) ]
  ! OR              [ reduce using rule 29 (boolean -> expression LTE expression .) ]


state 109

    (30) boolean -> expression AND expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 30 (boolean -> expression AND expression .)
    EXIT            reduce using rule 30 (boolean -> expression AND expression .)
    SETOUT          reduce using rule 30 (boolean -> expression AND expression .)
    FOR             reduce using rule 30 (boolean -> expression AND expression .)
    WHILE           reduce using rule 30 (boolean -> expression AND expression .)
    PROCESS         reduce using rule 30 (boolean -> expression AND expression .)
    IDENTIFIER      reduce using rule 30 (boolean -> expression AND expression .)
    BIT_NEG         reduce using rule 30 (boolean -> expression AND expression .)
    LPAREN          reduce using rule 30 (boolean -> expression AND expression .)
    LSQBRACK        reduce using rule 30 (boolean -> expression AND expression .)
    STRING          reduce using rule 30 (boolean -> expression AND expression .)
    IF              reduce using rule 30 (boolean -> expression AND expression .)
    NUM_INT         reduce using rule 30 (boolean -> expression AND expression .)
    NUM_FLOAT       reduce using rule 30 (boolean -> expression AND expression .)
    TRUE            reduce using rule 30 (boolean -> expression AND expression .)
    FALSE           reduce using rule 30 (boolean -> expression AND expression .)
    RSQBRACK        reduce using rule 30 (boolean -> expression AND expression .)
    COMMA           reduce using rule 30 (boolean -> expression AND expression .)
    RPAREN          reduce using rule 30 (boolean -> expression AND expression .)
    DO              reduce using rule 30 (boolean -> expression AND expression .)
    THEN            reduce using rule 30 (boolean -> expression AND expression .)
    COLON           reduce using rule 30 (boolean -> expression AND expression .)
    RBRACK          reduce using rule 30 (boolean -> expression AND expression .)
    ARROW_LTR       reduce using rule 30 (boolean -> expression AND expression .)
    ARROW_RTL       reduce using rule 30 (boolean -> expression AND expression .)
    LBRACK          reduce using rule 30 (boolean -> expression AND expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! MUL             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! DIV             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! EXP             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! MOD             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! BIT_AND         [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! BIT_OR          [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! BIT_XOR         [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! IN              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! NOT             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! EQ              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! GT              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! GTE             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! LT              [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! LTE             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! AND             [ reduce using rule 30 (boolean -> expression AND expression .) ]
  ! OR              [ reduce using rule 30 (boolean -> expression AND expression .) ]


state 110

    (31) boolean -> expression OR expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 31 (boolean -> expression OR expression .)
    EXIT            reduce using rule 31 (boolean -> expression OR expression .)
    SETOUT          reduce using rule 31 (boolean -> expression OR expression .)
    FOR             reduce using rule 31 (boolean -> expression OR expression .)
    WHILE           reduce using rule 31 (boolean -> expression OR expression .)
    PROCESS         reduce using rule 31 (boolean -> expression OR expression .)
    IDENTIFIER      reduce using rule 31 (boolean -> expression OR expression .)
    BIT_NEG         reduce using rule 31 (boolean -> expression OR expression .)
    LPAREN          reduce using rule 31 (boolean -> expression OR expression .)
    LSQBRACK        reduce using rule 31 (boolean -> expression OR expression .)
    STRING          reduce using rule 31 (boolean -> expression OR expression .)
    IF              reduce using rule 31 (boolean -> expression OR expression .)
    NUM_INT         reduce using rule 31 (boolean -> expression OR expression .)
    NUM_FLOAT       reduce using rule 31 (boolean -> expression OR expression .)
    TRUE            reduce using rule 31 (boolean -> expression OR expression .)
    FALSE           reduce using rule 31 (boolean -> expression OR expression .)
    RSQBRACK        reduce using rule 31 (boolean -> expression OR expression .)
    COMMA           reduce using rule 31 (boolean -> expression OR expression .)
    RPAREN          reduce using rule 31 (boolean -> expression OR expression .)
    DO              reduce using rule 31 (boolean -> expression OR expression .)
    THEN            reduce using rule 31 (boolean -> expression OR expression .)
    COLON           reduce using rule 31 (boolean -> expression OR expression .)
    RBRACK          reduce using rule 31 (boolean -> expression OR expression .)
    ARROW_LTR       reduce using rule 31 (boolean -> expression OR expression .)
    ARROW_RTL       reduce using rule 31 (boolean -> expression OR expression .)
    LBRACK          reduce using rule 31 (boolean -> expression OR expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! MUL             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! DIV             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! EXP             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! MOD             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! BIT_AND         [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! BIT_OR          [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! BIT_XOR         [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! IN              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! NOT             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! EQ              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! GT              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! GTE             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! LT              [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! LTE             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! AND             [ reduce using rule 31 (boolean -> expression OR expression .) ]
  ! OR              [ reduce using rule 31 (boolean -> expression OR expression .) ]


state 111

    (44) expression -> LSQBRACK arguments RSQBRACK .

    PLUS            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    MINUS           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    MUL             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    DIV             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    EXP             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    MOD             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_AND         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_OR          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_XOR         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LSHIFT          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RSHIFT          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    IN              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NOT             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    EQ              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NEQ             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    GT              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    GTE             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LT              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LTE             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    AND             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    OR              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    END             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    EXIT            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    SETOUT          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    FOR             reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    WHILE           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    PROCESS         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    IDENTIFIER      reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    BIT_NEG         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LPAREN          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LSQBRACK        reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    STRING          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    IF              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_INT         reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_FLOAT       reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    TRUE            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    FALSE           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RSQBRACK        reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    COMMA           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RPAREN          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    DO              reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    THEN            reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    COLON           reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    RBRACK          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    ARROW_LTR       reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    ARROW_RTL       reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)
    LBRACK          reduce using rule 44 (expression -> LSQBRACK arguments RSQBRACK .)


state 112

    (41) arguments -> arguments COMMA . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 127
    identifier                     shift and go to state 64
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 113

    (45) expression -> identifier LSQBRACK . expression RSQBRACK
    (46) expression -> identifier LSQBRACK . expression COLON expression RSQBRACK
    (47) expression -> identifier LSQBRACK . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK . expression COLON RSQBRACK
    (49) expression -> identifier LSQBRACK . COLON RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    COLON           shift and go to state 76
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 128
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 114

    (74) expression -> identifier LPAREN . arguments RPAREN
    (41) arguments -> . arguments COMMA expression
    (42) arguments -> . expression
    (43) arguments -> .
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RPAREN          reduce using rule 43 (arguments -> .)
    COMMA           reduce using rule 43 (arguments -> .)
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    arguments                      shift and go to state 129
    expression                     shift and go to state 63
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 115

    (57) statement -> SETOUT LPAREN arguments . RPAREN
    (41) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 130
    COMMA           shift and go to state 112


state 116

    (36) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_AND         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_OR          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_XOR         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    EXIT            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    SETOUT          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    PROCESS         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BIT_NEG         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LSQBRACK        reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NUM_INT         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NUM_FLOAT       reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RSQBRACK        reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    ARROW_LTR       reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    ARROW_RTL       reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LBRACK          reduce using rule 36 (expression -> LPAREN expression RPAREN .)


state 117

    (69) statement -> FOR identifier IN . expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> FOR identifier IN . expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> FOR identifier IN . expression LBRACK statement_list RBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 131
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 118

    (72) statement -> WHILE expression DO . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 132


state 119

    (73) statement -> PROCESS identifier DO . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 133


state 120

    (52) if_statement -> IF expression THEN . LBRACK statement_list RBRACK
    (53) if_statement -> IF expression THEN . LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression THEN . LBRACK statement_list RBRACK ELSE if_statement

    LBRACK          shift and go to state 134


state 121

    (50) statement -> identifier LSQBRACK expression RSQBRACK . EQUALS expression
    (45) expression -> identifier LSQBRACK expression RSQBRACK .

    EQUALS          shift and go to state 135
    PLUS            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_XOR         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    END             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXIT            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SETOUT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PROCESS         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STRING          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RBRACK          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 122

    (46) expression -> identifier LSQBRACK expression COLON . expression RSQBRACK
    (48) expression -> identifier LSQBRACK expression COLON . RSQBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RSQBRACK        shift and go to state 137
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 136
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 123

    (47) expression -> identifier LSQBRACK COLON expression . RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 138
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 124

    (49) expression -> identifier LSQBRACK COLON RSQBRACK .

    PLUS            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MINUS           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MUL             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    DIV             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EXP             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    MOD             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_AND         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_OR          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_XOR         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LSHIFT          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RSHIFT          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IN              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NOT             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EQ              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NEQ             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GT              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    GTE             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LT              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LTE             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    AND             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    OR              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    END             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    EXIT            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    SETOUT          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FOR             reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    WHILE           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    PROCESS         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    BIT_NEG         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LPAREN          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LSQBRACK        reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    STRING          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    IF              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_INT         reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    TRUE            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    FALSE           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RSQBRACK        reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COMMA           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RPAREN          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    DO              reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    THEN            reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    COLON           reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    RBRACK          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    ARROW_LTR       reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    ARROW_RTL       reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)
    LBRACK          reduce using rule 49 (expression -> identifier LSQBRACK COLON RSQBRACK .)


state 125

    (75) statement -> identifier LPAREN arguments RPAREN .
    (74) expression -> identifier LPAREN arguments RPAREN .

  ! reduce/reduce conflict for PLUS resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for NOT resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for END resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for EXIT resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for SETOUT resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for PROCESS resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for TRUE resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for FALSE resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
  ! reduce/reduce conflict for RBRACK resolved using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    PLUS            reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    MINUS           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    MUL             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    DIV             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    EXP             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    MOD             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_AND         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_OR          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_XOR         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LSHIFT          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    RSHIFT          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    IN              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NOT             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    EQ              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NEQ             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    GT              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    GTE             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LT              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LTE             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    AND             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    OR              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    END             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    EXIT            reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    SETOUT          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    FOR             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    WHILE           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    PROCESS         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_NEG         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    STRING          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    IF              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_FLOAT       reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    TRUE            reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    FALSE           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    RBRACK          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)

  ! END             [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! EXIT            [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! SETOUT          [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! FOR             [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! WHILE           [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! PROCESS         [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! IDENTIFIER      [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! MINUS           [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! PLUS            [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! BIT_NEG         [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! NOT             [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! LPAREN          [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! LSQBRACK        [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! STRING          [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! IF              [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! NUM_INT         [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! NUM_FLOAT       [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! TRUE            [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! FALSE           [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]
  ! RBRACK          [ reduce using rule 75 (statement -> identifier LPAREN arguments RPAREN .) ]


state 126

    (56) expression -> expression NOT IN expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    END             reduce using rule 56 (expression -> expression NOT IN expression .)
    EXIT            reduce using rule 56 (expression -> expression NOT IN expression .)
    SETOUT          reduce using rule 56 (expression -> expression NOT IN expression .)
    FOR             reduce using rule 56 (expression -> expression NOT IN expression .)
    WHILE           reduce using rule 56 (expression -> expression NOT IN expression .)
    PROCESS         reduce using rule 56 (expression -> expression NOT IN expression .)
    IDENTIFIER      reduce using rule 56 (expression -> expression NOT IN expression .)
    BIT_NEG         reduce using rule 56 (expression -> expression NOT IN expression .)
    LPAREN          reduce using rule 56 (expression -> expression NOT IN expression .)
    LSQBRACK        reduce using rule 56 (expression -> expression NOT IN expression .)
    STRING          reduce using rule 56 (expression -> expression NOT IN expression .)
    IF              reduce using rule 56 (expression -> expression NOT IN expression .)
    NUM_INT         reduce using rule 56 (expression -> expression NOT IN expression .)
    NUM_FLOAT       reduce using rule 56 (expression -> expression NOT IN expression .)
    TRUE            reduce using rule 56 (expression -> expression NOT IN expression .)
    FALSE           reduce using rule 56 (expression -> expression NOT IN expression .)
    RSQBRACK        reduce using rule 56 (expression -> expression NOT IN expression .)
    COMMA           reduce using rule 56 (expression -> expression NOT IN expression .)
    RPAREN          reduce using rule 56 (expression -> expression NOT IN expression .)
    DO              reduce using rule 56 (expression -> expression NOT IN expression .)
    THEN            reduce using rule 56 (expression -> expression NOT IN expression .)
    COLON           reduce using rule 56 (expression -> expression NOT IN expression .)
    RBRACK          reduce using rule 56 (expression -> expression NOT IN expression .)
    ARROW_LTR       reduce using rule 56 (expression -> expression NOT IN expression .)
    ARROW_RTL       reduce using rule 56 (expression -> expression NOT IN expression .)
    LBRACK          reduce using rule 56 (expression -> expression NOT IN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! PLUS            [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! MUL             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! EXP             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! BIT_AND         [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! BIT_OR          [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! BIT_XOR         [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! LSHIFT          [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! RSHIFT          [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! IN              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! NOT             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! GTE             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! LTE             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression NOT IN expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression NOT IN expression .) ]


state 127

    (41) arguments -> arguments COMMA expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        reduce using rule 41 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 41 (arguments -> arguments COMMA expression .)
    RPAREN          reduce using rule 41 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 128

    (45) expression -> identifier LSQBRACK expression . RSQBRACK
    (46) expression -> identifier LSQBRACK expression . COLON expression RSQBRACK
    (48) expression -> identifier LSQBRACK expression . COLON RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 139
    COLON           shift and go to state 122
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 129

    (74) expression -> identifier LPAREN arguments . RPAREN
    (41) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 140
    COMMA           shift and go to state 112


state 130

    (57) statement -> SETOUT LPAREN arguments RPAREN .

    END             reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    EXIT            reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    SETOUT          reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    FOR             reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    WHILE           reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    PROCESS         reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    MINUS           reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    PLUS            reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    BIT_NEG         reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    NOT             reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    STRING          reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    IF              reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    NUM_FLOAT       reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    TRUE            reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    FALSE           reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)
    RBRACK          reduce using rule 57 (statement -> SETOUT LPAREN arguments RPAREN .)


state 131

    (69) statement -> FOR identifier IN expression . ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> FOR identifier IN expression . ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> FOR identifier IN expression . LBRACK statement_list RBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    ARROW_LTR       shift and go to state 141
    ARROW_RTL       shift and go to state 143
    LBRACK          shift and go to state 142
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 132

    (72) statement -> WHILE expression DO LBRACK . statement_list RBRACK
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 6
    statement_list                 shift and go to state 144
    statement                      shift and go to state 4
    identifier                     shift and go to state 5
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 133

    (73) statement -> PROCESS identifier DO LBRACK . statement_list RBRACK
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    statement_list                 shift and go to state 145
    statement                      shift and go to state 4
    expression                     shift and go to state 6
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 134

    (52) if_statement -> IF expression THEN LBRACK . statement_list RBRACK
    (53) if_statement -> IF expression THEN LBRACK . statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression THEN LBRACK . statement_list RBRACK ELSE if_statement
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 6
    statement_list                 shift and go to state 146
    if_statement                   shift and go to state 7
    statement                      shift and go to state 4
    identifier                     shift and go to state 5
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 135

    (50) statement -> identifier LSQBRACK expression RSQBRACK EQUALS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 147
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 136

    (46) expression -> identifier LSQBRACK expression COLON expression . RSQBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    RSQBRACK        shift and go to state 148
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 137

    (48) expression -> identifier LSQBRACK expression COLON RSQBRACK .

    PLUS            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MINUS           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MUL             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    DIV             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EXP             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    MOD             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_AND         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_OR          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_XOR         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LSHIFT          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RSHIFT          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IN              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NOT             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EQ              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NEQ             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GT              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    GTE             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LT              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LTE             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    AND             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    OR              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    END             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    EXIT            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    SETOUT          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FOR             reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    WHILE           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    PROCESS         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IDENTIFIER      reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    BIT_NEG         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LPAREN          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LSQBRACK        reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    STRING          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    IF              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_INT         reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    NUM_FLOAT       reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    TRUE            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    FALSE           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RSQBRACK        reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COMMA           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RPAREN          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    DO              reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    THEN            reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    COLON           reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    RBRACK          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    ARROW_LTR       reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    ARROW_RTL       reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)
    LBRACK          reduce using rule 48 (expression -> identifier LSQBRACK expression COLON RSQBRACK .)


state 138

    (47) expression -> identifier LSQBRACK COLON expression RSQBRACK .

    PLUS            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MINUS           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MUL             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    DIV             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EXP             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    MOD             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_XOR         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LSHIFT          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RSHIFT          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IN              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NOT             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EQ              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NEQ             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GT              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    GTE             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LT              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LTE             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    AND             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    OR              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    END             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    EXIT            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    SETOUT          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FOR             reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    WHILE           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    PROCESS         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LPAREN          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    STRING          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    IF              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    TRUE            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    FALSE           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COMMA           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RPAREN          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    DO              reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    THEN            reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    COLON           reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    RBRACK          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    ARROW_LTR       reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    ARROW_RTL       reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)
    LBRACK          reduce using rule 47 (expression -> identifier LSQBRACK COLON expression RSQBRACK .)


state 139

    (45) expression -> identifier LSQBRACK expression RSQBRACK .

    PLUS            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MUL             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DIV             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXP             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MOD             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_AND         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_OR          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_XOR         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSHIFT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IN              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NEQ             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LTE             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    DO              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    END             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EXIT            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SETOUT          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    WHILE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PROCESS         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BIT_NEG         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LPAREN          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STRING          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    THEN            reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COLON           reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RBRACK          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ARROW_LTR       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ARROW_RTL       reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LBRACK          reduce using rule 45 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 140

    (74) expression -> identifier LPAREN arguments RPAREN .

    PLUS            reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    MINUS           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    MUL             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    DIV             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    EXP             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    MOD             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_AND         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_OR          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_XOR         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LSHIFT          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    RSHIFT          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    IN              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NOT             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    EQ              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NEQ             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    GT              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    GTE             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LT              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LTE             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    AND             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    OR              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    RSQBRACK        reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    COMMA           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    DO              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    END             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    EXIT            reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    SETOUT          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    FOR             reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    WHILE           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    PROCESS         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    BIT_NEG         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    STRING          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    IF              reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_FLOAT       reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    TRUE            reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    FALSE           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    THEN            reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    COLON           reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    RBRACK          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    ARROW_LTR       reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    ARROW_RTL       reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)
    LBRACK          reduce using rule 74 (expression -> identifier LPAREN arguments RPAREN .)


state 141

    (69) statement -> FOR identifier IN expression ARROW_LTR . expression DO LBRACK statement_list RBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 149
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 142

    (71) statement -> FOR identifier IN expression LBRACK . statement_list RBRACK
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    statement_list                 shift and go to state 150
    statement                      shift and go to state 4
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 143

    (70) statement -> FOR identifier IN expression ARROW_RTL . expression DO LBRACK statement_list RBRACK
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 64
    expression                     shift and go to state 151
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 144

    (72) statement -> WHILE expression DO LBRACK statement_list . RBRACK
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 152
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 6
    statement                      shift and go to state 29
    identifier                     shift and go to state 5
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 145

    (73) statement -> PROCESS identifier DO LBRACK statement_list . RBRACK
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 153
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    statement                      shift and go to state 29
    expression                     shift and go to state 6
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 146

    (52) if_statement -> IF expression THEN LBRACK statement_list . RBRACK
    (53) if_statement -> IF expression THEN LBRACK statement_list . RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression THEN LBRACK statement_list . RBRACK ELSE if_statement
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 154
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 6
    if_statement                   shift and go to state 7
    statement                      shift and go to state 29
    identifier                     shift and go to state 5
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 147

    (50) statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    END             reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    EXIT            reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    SETOUT          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    FOR             reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    WHILE           reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    PROCESS         reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    IDENTIFIER      reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    BIT_NEG         reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    LPAREN          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    LSQBRACK        reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    STRING          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    IF              reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    NUM_INT         reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    NUM_FLOAT       reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    TRUE            reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    FALSE           reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    RBRACK          reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! MINUS           [ reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .) ]
  ! PLUS            [ reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .) ]
  ! NOT             [ reduce using rule 50 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .) ]


state 148

    (46) expression -> identifier LSQBRACK expression COLON expression RSQBRACK .

    PLUS            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MINUS           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MUL             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    DIV             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EXP             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    MOD             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_AND         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_OR          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_XOR         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RSHIFT          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IN              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NOT             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EQ              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NEQ             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GT              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    GTE             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LT              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LTE             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    AND             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    OR              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    END             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    EXIT            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    SETOUT          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FOR             reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    WHILE           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    PROCESS         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IDENTIFIER      reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    BIT_NEG         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    STRING          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    IF              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_INT         reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    NUM_FLOAT       reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    TRUE            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    FALSE           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COMMA           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    DO              reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    THEN            reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    COLON           reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    RBRACK          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    ARROW_LTR       reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    ARROW_RTL       reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)
    LBRACK          reduce using rule 46 (expression -> identifier LSQBRACK expression COLON expression RSQBRACK .)


state 149

    (69) statement -> FOR identifier IN expression ARROW_LTR expression . DO LBRACK statement_list RBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    DO              shift and go to state 155
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 150

    (71) statement -> FOR identifier IN expression LBRACK statement_list . RBRACK
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 156
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    statement                      shift and go to state 29
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 151

    (70) statement -> FOR identifier IN expression ARROW_RTL expression . DO LBRACK statement_list RBRACK
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . MUL expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . EXP expression
    (18) expression -> expression . MOD expression
    (19) expression -> expression . BIT_AND expression
    (20) expression -> expression . BIT_OR expression
    (21) expression -> expression . BIT_XOR expression
    (22) expression -> expression . LSHIFT expression
    (23) expression -> expression . RSHIFT expression
    (55) expression -> expression . IN expression
    (56) expression -> expression . NOT IN expression
    (24) boolean -> expression . EQ expression
    (25) boolean -> expression . NEQ expression
    (26) boolean -> expression . GT expression
    (27) boolean -> expression . GTE expression
    (28) boolean -> expression . LT expression
    (29) boolean -> expression . LTE expression
    (30) boolean -> expression . AND expression
    (31) boolean -> expression . OR expression

    DO              shift and go to state 157
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MUL             shift and go to state 43
    DIV             shift and go to state 44
    EXP             shift and go to state 45
    MOD             shift and go to state 46
    BIT_AND         shift and go to state 47
    BIT_OR          shift and go to state 48
    BIT_XOR         shift and go to state 49
    LSHIFT          shift and go to state 50
    RSHIFT          shift and go to state 51
    IN              shift and go to state 52
    NOT             shift and go to state 53
    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    GT              shift and go to state 56
    GTE             shift and go to state 57
    LT              shift and go to state 58
    LTE             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 152

    (72) statement -> WHILE expression DO LBRACK statement_list RBRACK .

    END             reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    EXIT            reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    SETOUT          reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    FOR             reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    PROCESS         reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    NOT             reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    STRING          reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    IF              reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 72 (statement -> WHILE expression DO LBRACK statement_list RBRACK .)


state 153

    (73) statement -> PROCESS identifier DO LBRACK statement_list RBRACK .

    END             reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    EXIT            reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    SETOUT          reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    FOR             reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    PROCESS         reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    NOT             reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    STRING          reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    IF              reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 73 (statement -> PROCESS identifier DO LBRACK statement_list RBRACK .)


state 154

    (52) if_statement -> IF expression THEN LBRACK statement_list RBRACK .
    (53) if_statement -> IF expression THEN LBRACK statement_list RBRACK . ELSE LBRACK statement_list RBRACK
    (54) if_statement -> IF expression THEN LBRACK statement_list RBRACK . ELSE if_statement

    END             reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    EXIT            reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    SETOUT          reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    FOR             reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    PROCESS         reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    NOT             reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    STRING          reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    IF              reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 52 (if_statement -> IF expression THEN LBRACK statement_list RBRACK .)
    ELSE            shift and go to state 158


state 155

    (69) statement -> FOR identifier IN expression ARROW_LTR expression DO . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 159


state 156

    (71) statement -> FOR identifier IN expression LBRACK statement_list RBRACK .

    END             reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    EXIT            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    SETOUT          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FOR             reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    PROCESS         reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NOT             reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    STRING          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    IF              reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 71 (statement -> FOR identifier IN expression LBRACK statement_list RBRACK .)


state 157

    (70) statement -> FOR identifier IN expression ARROW_RTL expression DO . LBRACK statement_list RBRACK

    LBRACK          shift and go to state 160


state 158

    (53) if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE . LBRACK statement_list RBRACK
    (54) if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE . if_statement
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement

    LBRACK          shift and go to state 161
    IF              shift and go to state 23

    if_statement                   shift and go to state 162

state 159

    (69) statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK . statement_list RBRACK
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    statement_list                 shift and go to state 163
    statement                      shift and go to state 4
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 160

    (70) statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK . statement_list RBRACK
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    statement_list                 shift and go to state 164
    statement                      shift and go to state 4
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 161

    (53) if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK . statement_list RBRACK
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 6
    statement_list                 shift and go to state 165
    statement                      shift and go to state 4
    identifier                     shift and go to state 5
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 162

    (54) if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .

    END             reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    EXIT            reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    SETOUT          reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    FOR             reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    WHILE           reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    PROCESS         reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    IDENTIFIER      reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    MINUS           reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    PLUS            reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    BIT_NEG         reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    NOT             reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    LPAREN          reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    LSQBRACK        reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    STRING          reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    IF              reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    NUM_INT         reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    NUM_FLOAT       reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    TRUE            reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    FALSE           reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)
    RBRACK          reduce using rule 54 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE if_statement .)


state 163

    (69) statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list . RBRACK
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 166
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    statement                      shift and go to state 29
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 164

    (70) statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list . RBRACK
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 167
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 5
    expression                     shift and go to state 6
    statement                      shift and go to state 29
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 165

    (53) if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list . RBRACK
    (3) statement_list -> statement_list . statement
    (4) statement -> . identifier
    (5) statement -> . expression
    (6) statement -> . if_statement
    (8) statement -> . EXIT
    (50) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (57) statement -> . SETOUT LPAREN arguments RPAREN
    (58) statement -> . identifier PLUS_EQ expression
    (59) statement -> . identifier MINUS_EQ expression
    (60) statement -> . identifier MUL_EQ expression
    (61) statement -> . identifier DIV_EQ expression
    (62) statement -> . identifier EXP_EQ expression
    (63) statement -> . identifier MOD_EQ expression
    (69) statement -> . FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK
    (70) statement -> . FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK
    (71) statement -> . FOR identifier IN expression LBRACK statement_list RBRACK
    (72) statement -> . WHILE expression DO LBRACK statement_list RBRACK
    (73) statement -> . PROCESS identifier DO LBRACK statement_list RBRACK
    (75) statement -> . identifier LPAREN arguments RPAREN
    (7) identifier -> . IDENTIFIER
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression MUL expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression EXP expression
    (18) expression -> . expression MOD expression
    (19) expression -> . expression BIT_AND expression
    (20) expression -> . expression BIT_OR expression
    (21) expression -> . expression BIT_XOR expression
    (22) expression -> . expression LSHIFT expression
    (23) expression -> . expression RSHIFT expression
    (32) expression -> . MINUS expression
    (33) expression -> . PLUS expression
    (34) expression -> . BIT_NEG expression
    (35) expression -> . NOT expression
    (36) expression -> . LPAREN expression RPAREN
    (44) expression -> . LSQBRACK arguments RSQBRACK
    (45) expression -> . identifier LSQBRACK expression RSQBRACK
    (46) expression -> . identifier LSQBRACK expression COLON expression RSQBRACK
    (47) expression -> . identifier LSQBRACK COLON expression RSQBRACK
    (48) expression -> . identifier LSQBRACK expression COLON RSQBRACK
    (49) expression -> . identifier LSQBRACK COLON RSQBRACK
    (51) expression -> . identifier EQUALS assignable
    (55) expression -> . expression IN expression
    (56) expression -> . expression NOT IN expression
    (64) expression -> . identifier PLUS_EQUAL NUM_INT
    (65) expression -> . identifier MINUS_EQUAL NUM_INT
    (66) expression -> . primitive
    (67) expression -> . STRING
    (68) expression -> . identifier
    (74) expression -> . identifier LPAREN arguments RPAREN
    (52) if_statement -> . IF expression THEN LBRACK statement_list RBRACK
    (53) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK
    (54) if_statement -> . IF expression THEN LBRACK statement_list RBRACK ELSE if_statement
    (9) primitive -> . NUM_INT
    (10) primitive -> . NUM_FLOAT
    (11) primitive -> . STRING
    (12) primitive -> . boolean
    (24) boolean -> . expression EQ expression
    (25) boolean -> . expression NEQ expression
    (26) boolean -> . expression GT expression
    (27) boolean -> . expression GTE expression
    (28) boolean -> . expression LT expression
    (29) boolean -> . expression LTE expression
    (30) boolean -> . expression AND expression
    (31) boolean -> . expression OR expression
    (37) boolean -> . TRUE
    (38) boolean -> . FALSE

    RBRACK          shift and go to state 168
    EXIT            shift and go to state 8
    SETOUT          shift and go to state 10
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PROCESS         shift and go to state 14
    IDENTIFIER      shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 16
    BIT_NEG         shift and go to state 18
    NOT             shift and go to state 19
    LPAREN          shift and go to state 11
    LSQBRACK        shift and go to state 9
    STRING          shift and go to state 22
    IF              shift and go to state 23
    NUM_INT         shift and go to state 20
    NUM_FLOAT       shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 6
    statement                      shift and go to state 29
    identifier                     shift and go to state 5
    if_statement                   shift and go to state 7
    primitive                      shift and go to state 21
    boolean                        shift and go to state 25

state 166

    (69) statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .

    END             reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    EXIT            reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    SETOUT          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    FOR             reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    PROCESS         reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    NOT             reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    STRING          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    IF              reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 69 (statement -> FOR identifier IN expression ARROW_LTR expression DO LBRACK statement_list RBRACK .)


state 167

    (70) statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .

    END             reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    EXIT            reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    SETOUT          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    FOR             reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    PROCESS         reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    NOT             reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    STRING          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    IF              reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 70 (statement -> FOR identifier IN expression ARROW_RTL expression DO LBRACK statement_list RBRACK .)


state 168

    (53) if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .

    END             reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    EXIT            reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    SETOUT          reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FOR             reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    WHILE           reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    PROCESS         reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    IDENTIFIER      reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    MINUS           reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    PLUS            reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    BIT_NEG         reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NOT             reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    LPAREN          reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    LSQBRACK        reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    STRING          reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    IF              reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NUM_INT         reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    NUM_FLOAT       reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    TRUE            reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    FALSE           reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)
    RBRACK          reduce using rule 53 (if_statement -> IF expression THEN LBRACK statement_list RBRACK ELSE LBRACK statement_list RBRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQBRACK in state 5 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 6 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 6 resolved as shift
WARNING: shift/reduce conflict for NOT in state 6 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 64 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MUL in state 72 resolved as shift
WARNING: shift/reduce conflict for DIV in state 72 resolved as shift
WARNING: shift/reduce conflict for EXP in state 72 resolved as shift
WARNING: shift/reduce conflict for MOD in state 72 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 72 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 72 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 72 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 72 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 72 resolved as shift
WARNING: shift/reduce conflict for IN in state 72 resolved as shift
WARNING: shift/reduce conflict for NOT in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for GTE in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for LTE in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for EXP in state 79 resolved as shift
WARNING: shift/reduce conflict for MOD in state 79 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 79 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 79 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 79 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for IN in state 79 resolved as shift
WARNING: shift/reduce conflict for NOT in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for GTE in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for LTE in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for NOT in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for NOT in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for NOT in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MUL in state 96 resolved as shift
WARNING: shift/reduce conflict for DIV in state 96 resolved as shift
WARNING: shift/reduce conflict for EXP in state 96 resolved as shift
WARNING: shift/reduce conflict for MOD in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 96 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 96 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 96 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 96 resolved as shift
WARNING: shift/reduce conflict for IN in state 96 resolved as shift
WARNING: shift/reduce conflict for NOT in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 96 resolved as shift
WARNING: shift/reduce conflict for GT in state 96 resolved as shift
WARNING: shift/reduce conflict for GTE in state 96 resolved as shift
WARNING: shift/reduce conflict for LT in state 96 resolved as shift
WARNING: shift/reduce conflict for LTE in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MUL in state 97 resolved as shift
WARNING: shift/reduce conflict for DIV in state 97 resolved as shift
WARNING: shift/reduce conflict for EXP in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 97 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 97 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 97 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 97 resolved as shift
WARNING: shift/reduce conflict for IN in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for GTE in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for LTE in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for EXP in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 98 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 98 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for IN in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for GTE in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for LTE in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MUL in state 99 resolved as shift
WARNING: shift/reduce conflict for DIV in state 99 resolved as shift
WARNING: shift/reduce conflict for EXP in state 99 resolved as shift
WARNING: shift/reduce conflict for MOD in state 99 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 99 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 99 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 99 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 99 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 99 resolved as shift
WARNING: shift/reduce conflict for IN in state 99 resolved as shift
WARNING: shift/reduce conflict for NOT in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for GTE in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for LTE in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MUL in state 100 resolved as shift
WARNING: shift/reduce conflict for DIV in state 100 resolved as shift
WARNING: shift/reduce conflict for EXP in state 100 resolved as shift
WARNING: shift/reduce conflict for MOD in state 100 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 100 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 100 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 100 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 100 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 100 resolved as shift
WARNING: shift/reduce conflict for IN in state 100 resolved as shift
WARNING: shift/reduce conflict for NOT in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 100 resolved as shift
WARNING: shift/reduce conflict for GT in state 100 resolved as shift
WARNING: shift/reduce conflict for GTE in state 100 resolved as shift
WARNING: shift/reduce conflict for LT in state 100 resolved as shift
WARNING: shift/reduce conflict for LTE in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MUL in state 101 resolved as shift
WARNING: shift/reduce conflict for DIV in state 101 resolved as shift
WARNING: shift/reduce conflict for EXP in state 101 resolved as shift
WARNING: shift/reduce conflict for MOD in state 101 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 101 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 101 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 101 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 101 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 101 resolved as shift
WARNING: shift/reduce conflict for IN in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for GTE in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for LTE in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MUL in state 103 resolved as shift
WARNING: shift/reduce conflict for DIV in state 103 resolved as shift
WARNING: shift/reduce conflict for EXP in state 103 resolved as shift
WARNING: shift/reduce conflict for MOD in state 103 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 103 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 103 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 103 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 103 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 103 resolved as shift
WARNING: shift/reduce conflict for IN in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for GT in state 103 resolved as shift
WARNING: shift/reduce conflict for GTE in state 103 resolved as shift
WARNING: shift/reduce conflict for LT in state 103 resolved as shift
WARNING: shift/reduce conflict for LTE in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MUL in state 104 resolved as shift
WARNING: shift/reduce conflict for DIV in state 104 resolved as shift
WARNING: shift/reduce conflict for EXP in state 104 resolved as shift
WARNING: shift/reduce conflict for MOD in state 104 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 104 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 104 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 104 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 104 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 104 resolved as shift
WARNING: shift/reduce conflict for IN in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for GTE in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for LTE in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MUL in state 105 resolved as shift
WARNING: shift/reduce conflict for DIV in state 105 resolved as shift
WARNING: shift/reduce conflict for EXP in state 105 resolved as shift
WARNING: shift/reduce conflict for MOD in state 105 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 105 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 105 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 105 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 105 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 105 resolved as shift
WARNING: shift/reduce conflict for IN in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for GTE in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for LTE in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MUL in state 106 resolved as shift
WARNING: shift/reduce conflict for DIV in state 106 resolved as shift
WARNING: shift/reduce conflict for EXP in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 106 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 106 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 106 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 106 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 106 resolved as shift
WARNING: shift/reduce conflict for IN in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for GTE in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for LTE in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MUL in state 107 resolved as shift
WARNING: shift/reduce conflict for DIV in state 107 resolved as shift
WARNING: shift/reduce conflict for EXP in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 107 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 107 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 107 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 107 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 107 resolved as shift
WARNING: shift/reduce conflict for IN in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for GTE in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for LTE in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MUL in state 108 resolved as shift
WARNING: shift/reduce conflict for DIV in state 108 resolved as shift
WARNING: shift/reduce conflict for EXP in state 108 resolved as shift
WARNING: shift/reduce conflict for MOD in state 108 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 108 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 108 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 108 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 108 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 108 resolved as shift
WARNING: shift/reduce conflict for IN in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for GTE in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for LTE in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MUL in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for EXP in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD in state 109 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 109 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 109 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 109 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 109 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 109 resolved as shift
WARNING: shift/reduce conflict for IN in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for GTE in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for LTE in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MUL in state 110 resolved as shift
WARNING: shift/reduce conflict for DIV in state 110 resolved as shift
WARNING: shift/reduce conflict for EXP in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD in state 110 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 110 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 110 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 110 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 110 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 110 resolved as shift
WARNING: shift/reduce conflict for IN in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for GTE in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for LTE in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MUL in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV in state 126 resolved as shift
WARNING: shift/reduce conflict for EXP in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD in state 126 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 126 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 126 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 126 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 126 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 126 resolved as shift
WARNING: shift/reduce conflict for IN in state 126 resolved as shift
WARNING: shift/reduce conflict for NOT in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for GTE in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for LTE in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for NOT in state 147 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (statement -> identifier)
WARNING: rejected rule (expression -> identifier) in state 5
WARNING: reduce/reduce conflict in state 22 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 22
WARNING: reduce/reduce conflict in state 78 resolved using rule (assignable -> primitive)
WARNING: rejected rule (expression -> primitive) in state 78
WARNING: reduce/reduce conflict in state 80 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 80
WARNING: reduce/reduce conflict in state 125 resolved using rule (expression -> identifier LPAREN arguments RPAREN)
WARNING: rejected rule (statement -> identifier LPAREN arguments RPAREN) in state 125
WARNING: Rule (expression -> STRING) is never reduced
WARNING: Rule (statement -> identifier LPAREN arguments RPAREN) is never reduced
