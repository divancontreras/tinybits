Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> START program_sequence END
Rule 2     program_sequence -> program_sequence declaration
Rule 3     program_sequence -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> process_declaration
Rule 6     var_declaration -> var_type ID
Rule 7     var_declaration -> var_type ID COMMA ID
Rule 8     var_declaration -> var_type ID EQUAL NUMBER
Rule 9     var_declaration -> var_type ID EQUAL var
Rule 10    var_type -> INT
Rule 11    var_type -> FLOAT
Rule 12    var_declaration -> var_type ID LBRACKET NUMBER RBRACKET
Rule 13    process_declaration -> PROCCES ID COLON statements_nont END
Rule 14    statements_nont -> statements_nont statement
Rule 15    statements_nont -> empty
Rule 16    statement -> expression_nont
Rule 17    statement -> statements_nont
Rule 18    statement -> condition_nont
Rule 19    statement -> iteration_nont
Rule 20    expression_nont -> expression
Rule 21    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN
Rule 22    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
Rule 23    expression_nont -> SETOUT LPAREN var RPAREN
Rule 24    expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN
Rule 25    expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN
Rule 26    expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
Rule 27    expression_nont -> GETIN LPAREN var RPAREN
Rule 28    expression_nont -> GETIN LPAREN var COMMA var RPAREN
Rule 29    expression_nont -> ID PLUSPLUS
Rule 30    expression_nont -> PLUSPLUS ID
Rule 31    expression_nont -> ID MINUSMINUS
Rule 32    expression_nont -> MINUSMINUS ID
Rule 33    condition_nont -> IF expression THEN statement END
Rule 34    condition_nont -> IF expression THEN statement ELSE statement END
Rule 35    iteration_nont -> WHILE expression DO statement LOOP
Rule 36    iteration_nont -> <empty>
Rule 37    iteration_nont -> FOR var COMMA expression COMMA expression DO statement
Rule 38    iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement
Rule 39    iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement
Rule 40    iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement
Rule 41    iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement
Rule 42    expression -> var EQUAL expression
Rule 43    var -> ID
Rule 44    var -> ID LBRACKET expression RBRACKET
Rule 45    expression -> simple_expression
Rule 46    simple_expression -> additive_expression relop additive_expression
Rule 47    simple_expression -> additive_expression
Rule 48    relop -> LESS
Rule 49    relop -> LESSEQUAL
Rule 50    relop -> GREATER
Rule 51    relop -> GREATEREQUAL
Rule 52    relop -> DEQUAL
Rule 53    relop -> DISTINT
Rule 54    relop -> QUOTES
Rule 55    additive_expression -> additive_expression addop term
Rule 56    additive_expression -> term
Rule 57    addop -> PLUS
Rule 58    addop -> MINUS
Rule 59    factor -> call
Rule 60    call -> PROCCES ID
Rule 61    term -> term mulop factor
Rule 62    term -> factor
Rule 63    mulop -> TIMES
Rule 64    mulop -> DIVIDE
Rule 65    factor -> LPAREN expression RPAREN
Rule 66    factor -> var
Rule 67    factor -> NUMBER

Terminals, with rules where they appear

COLON                : 13
COMMA                : 7 22 24 25 25 26 26 28 37 37 38 38 39 39 40 40 41 41
DEQUAL               : 52
DISTINT              : 53
DIVIDE               : 64
DO                   : 35 37 38 39 40 41
ELSE                 : 34
END                  : 1 13 33 34
ENDL                 : 22 24 26
EQUAL                : 8 9 42
FLOAT                : 11
FOR                  : 37 38 39 40 41
GETIN                : 27 28
GREATER              : 50
GREATEREQUAL         : 51
ID                   : 6 7 7 8 9 12 13 21 22 29 30 31 32 43 44 60
IF                   : 33 34
INT                  : 10
LBRACKET             : 12 44
LESS                 : 48
LESSEQUAL            : 49
LOOP                 : 35
LPAREN               : 21 22 23 24 25 26 27 28 65
MINUS                : 58
MINUSMINUS           : 31 32 40 41
NUMBER               : 8 12 67
PLUS                 : 57
PLUSPLUS             : 29 30 38 39
PROCCES              : 13 60
QUOTES               : 21 21 22 22 54
RBRACKET             : 12 44
RPAREN               : 21 22 23 24 25 26 27 28 65
SETOUT               : 21 22 23 24 25 26
START                : 1
THEN                 : 33 34
TIMES                : 63
WHILE                : 35
empty                : 15
error                : 

Nonterminals, with rules where they appear

additive_expression  : 46 46 47 55
addop                : 55
call                 : 59
condition_nont       : 18
declaration          : 2 3
expression           : 20 33 34 35 37 37 38 39 40 41 42 44 65
expression_nont      : 16
factor               : 61 62
iteration_nont       : 19
mulop                : 61
process_declaration  : 5
program              : 0
program_sequence     : 1 2
relop                : 46
simple_expression    : 45
statement            : 14 33 34 34 35 37 38 39 40 41
statements_nont      : 13 14 17
term                 : 55 56 61
var                  : 9 23 24 25 25 26 26 27 28 28 37 38 38 39 39 40 40 41 41 42 66
var_declaration      : 4
var_type             : 6 7 8 9 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START program_sequence END

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . program_sequence END
    (2) program_sequence -> . program_sequence declaration
    (3) program_sequence -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . process_declaration
    (6) var_declaration -> . var_type ID
    (7) var_declaration -> . var_type ID COMMA ID
    (8) var_declaration -> . var_type ID EQUAL NUMBER
    (9) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (13) process_declaration -> . PROCCES ID COLON statements_nont END
    (10) var_type -> . INT
    (11) var_type -> . FLOAT

    PROCCES         shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    program_sequence               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    process_declaration            shift and go to state 6
    var_type                       shift and go to state 7

state 3

    (1) program -> START program_sequence . END
    (2) program_sequence -> program_sequence . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . process_declaration
    (6) var_declaration -> . var_type ID
    (7) var_declaration -> . var_type ID COMMA ID
    (8) var_declaration -> . var_type ID EQUAL NUMBER
    (9) var_declaration -> . var_type ID EQUAL var
    (12) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (13) process_declaration -> . PROCCES ID COLON statements_nont END
    (10) var_type -> . INT
    (11) var_type -> . FLOAT

    END             shift and go to state 11
    PROCCES         shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    declaration                    shift and go to state 12
    var_declaration                shift and go to state 5
    process_declaration            shift and go to state 6
    var_type                       shift and go to state 7

state 4

    (3) program_sequence -> declaration .

    END             reduce using rule 3 (program_sequence -> declaration .)
    PROCCES         reduce using rule 3 (program_sequence -> declaration .)
    INT             reduce using rule 3 (program_sequence -> declaration .)
    FLOAT           reduce using rule 3 (program_sequence -> declaration .)


state 5

    (4) declaration -> var_declaration .

    END             reduce using rule 4 (declaration -> var_declaration .)
    PROCCES         reduce using rule 4 (declaration -> var_declaration .)
    INT             reduce using rule 4 (declaration -> var_declaration .)
    FLOAT           reduce using rule 4 (declaration -> var_declaration .)


state 6

    (5) declaration -> process_declaration .

    END             reduce using rule 5 (declaration -> process_declaration .)
    PROCCES         reduce using rule 5 (declaration -> process_declaration .)
    INT             reduce using rule 5 (declaration -> process_declaration .)
    FLOAT           reduce using rule 5 (declaration -> process_declaration .)


state 7

    (6) var_declaration -> var_type . ID
    (7) var_declaration -> var_type . ID COMMA ID
    (8) var_declaration -> var_type . ID EQUAL NUMBER
    (9) var_declaration -> var_type . ID EQUAL var
    (12) var_declaration -> var_type . ID LBRACKET NUMBER RBRACKET

    ID              shift and go to state 13


state 8

    (13) process_declaration -> PROCCES . ID COLON statements_nont END

    ID              shift and go to state 14


state 9

    (10) var_type -> INT .

    ID              reduce using rule 10 (var_type -> INT .)


state 10

    (11) var_type -> FLOAT .

    ID              reduce using rule 11 (var_type -> FLOAT .)


state 11

    (1) program -> START program_sequence END .

    $end            reduce using rule 1 (program -> START program_sequence END .)


state 12

    (2) program_sequence -> program_sequence declaration .

    END             reduce using rule 2 (program_sequence -> program_sequence declaration .)
    PROCCES         reduce using rule 2 (program_sequence -> program_sequence declaration .)
    INT             reduce using rule 2 (program_sequence -> program_sequence declaration .)
    FLOAT           reduce using rule 2 (program_sequence -> program_sequence declaration .)


state 13

    (6) var_declaration -> var_type ID .
    (7) var_declaration -> var_type ID . COMMA ID
    (8) var_declaration -> var_type ID . EQUAL NUMBER
    (9) var_declaration -> var_type ID . EQUAL var
    (12) var_declaration -> var_type ID . LBRACKET NUMBER RBRACKET

    END             reduce using rule 6 (var_declaration -> var_type ID .)
    PROCCES         reduce using rule 6 (var_declaration -> var_type ID .)
    INT             reduce using rule 6 (var_declaration -> var_type ID .)
    FLOAT           reduce using rule 6 (var_declaration -> var_type ID .)
    COMMA           shift and go to state 15
    EQUAL           shift and go to state 16
    LBRACKET        shift and go to state 17


state 14

    (13) process_declaration -> PROCCES ID . COLON statements_nont END

    COLON           shift and go to state 18


state 15

    (7) var_declaration -> var_type ID COMMA . ID

    ID              shift and go to state 19


state 16

    (8) var_declaration -> var_type ID EQUAL . NUMBER
    (9) var_declaration -> var_type ID EQUAL . var
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    NUMBER          shift and go to state 21
    ID              shift and go to state 20

    var                            shift and go to state 22

state 17

    (12) var_declaration -> var_type ID LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 23


state 18

    (13) process_declaration -> PROCCES ID COLON . statements_nont END
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty

    empty           shift and go to state 25

    statements_nont                shift and go to state 24

state 19

    (7) var_declaration -> var_type ID COMMA ID .

    END             reduce using rule 7 (var_declaration -> var_type ID COMMA ID .)
    PROCCES         reduce using rule 7 (var_declaration -> var_type ID COMMA ID .)
    INT             reduce using rule 7 (var_declaration -> var_type ID COMMA ID .)
    FLOAT           reduce using rule 7 (var_declaration -> var_type ID COMMA ID .)


state 20

    (43) var -> ID .
    (44) var -> ID . LBRACKET expression RBRACKET

    END             reduce using rule 43 (var -> ID .)
    PROCCES         reduce using rule 43 (var -> ID .)
    INT             reduce using rule 43 (var -> ID .)
    FLOAT           reduce using rule 43 (var -> ID .)
    EQUAL           reduce using rule 43 (var -> ID .)
    TIMES           reduce using rule 43 (var -> ID .)
    DIVIDE          reduce using rule 43 (var -> ID .)
    LESS            reduce using rule 43 (var -> ID .)
    LESSEQUAL       reduce using rule 43 (var -> ID .)
    GREATER         reduce using rule 43 (var -> ID .)
    GREATEREQUAL    reduce using rule 43 (var -> ID .)
    DEQUAL          reduce using rule 43 (var -> ID .)
    DISTINT         reduce using rule 43 (var -> ID .)
    QUOTES          reduce using rule 43 (var -> ID .)
    PLUS            reduce using rule 43 (var -> ID .)
    MINUS           reduce using rule 43 (var -> ID .)
    RBRACKET        reduce using rule 43 (var -> ID .)
    RPAREN          reduce using rule 43 (var -> ID .)
    THEN            reduce using rule 43 (var -> ID .)
    DO              reduce using rule 43 (var -> ID .)
    COMMA           reduce using rule 43 (var -> ID .)
    SETOUT          reduce using rule 43 (var -> ID .)
    GETIN           reduce using rule 43 (var -> ID .)
    ID              reduce using rule 43 (var -> ID .)
    PLUSPLUS        reduce using rule 43 (var -> ID .)
    MINUSMINUS      reduce using rule 43 (var -> ID .)
    empty           reduce using rule 43 (var -> ID .)
    IF              reduce using rule 43 (var -> ID .)
    WHILE           reduce using rule 43 (var -> ID .)
    FOR             reduce using rule 43 (var -> ID .)
    LPAREN          reduce using rule 43 (var -> ID .)
    NUMBER          reduce using rule 43 (var -> ID .)
    ELSE            reduce using rule 43 (var -> ID .)
    LOOP            reduce using rule 43 (var -> ID .)
    LBRACKET        shift and go to state 26


state 21

    (8) var_declaration -> var_type ID EQUAL NUMBER .

    END             reduce using rule 8 (var_declaration -> var_type ID EQUAL NUMBER .)
    PROCCES         reduce using rule 8 (var_declaration -> var_type ID EQUAL NUMBER .)
    INT             reduce using rule 8 (var_declaration -> var_type ID EQUAL NUMBER .)
    FLOAT           reduce using rule 8 (var_declaration -> var_type ID EQUAL NUMBER .)


state 22

    (9) var_declaration -> var_type ID EQUAL var .

    END             reduce using rule 9 (var_declaration -> var_type ID EQUAL var .)
    PROCCES         reduce using rule 9 (var_declaration -> var_type ID EQUAL var .)
    INT             reduce using rule 9 (var_declaration -> var_type ID EQUAL var .)
    FLOAT           reduce using rule 9 (var_declaration -> var_type ID EQUAL var .)


state 23

    (12) var_declaration -> var_type ID LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 27


state 24

    (13) process_declaration -> PROCCES ID COLON statements_nont . END
    (14) statements_nont -> statements_nont . statement
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
    END             shift and go to state 31
    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

  ! END             [ reduce using rule 36 (iteration_nont -> .) ]
  ! SETOUT          [ reduce using rule 36 (iteration_nont -> .) ]
  ! GETIN           [ reduce using rule 36 (iteration_nont -> .) ]
  ! ID              [ reduce using rule 36 (iteration_nont -> .) ]
  ! PLUSPLUS        [ reduce using rule 36 (iteration_nont -> .) ]
  ! MINUSMINUS      [ reduce using rule 36 (iteration_nont -> .) ]
  ! empty           [ reduce using rule 36 (iteration_nont -> .) ]
  ! IF              [ reduce using rule 36 (iteration_nont -> .) ]
  ! WHILE           [ reduce using rule 36 (iteration_nont -> .) ]
  ! FOR             [ reduce using rule 36 (iteration_nont -> .) ]
  ! LPAREN          [ reduce using rule 36 (iteration_nont -> .) ]
  ! NUMBER          [ reduce using rule 36 (iteration_nont -> .) ]
  ! PROCCES         [ reduce using rule 36 (iteration_nont -> .) ]

    statements_nont                shift and go to state 30
    statement                      shift and go to state 32
    expression_nont                shift and go to state 33
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    expression                     shift and go to state 36
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 25

    (15) statements_nont -> empty .

    END             reduce using rule 15 (statements_nont -> empty .)
    SETOUT          reduce using rule 15 (statements_nont -> empty .)
    GETIN           reduce using rule 15 (statements_nont -> empty .)
    ID              reduce using rule 15 (statements_nont -> empty .)
    PLUSPLUS        reduce using rule 15 (statements_nont -> empty .)
    MINUSMINUS      reduce using rule 15 (statements_nont -> empty .)
    empty           reduce using rule 15 (statements_nont -> empty .)
    IF              reduce using rule 15 (statements_nont -> empty .)
    WHILE           reduce using rule 15 (statements_nont -> empty .)
    FOR             reduce using rule 15 (statements_nont -> empty .)
    LPAREN          reduce using rule 15 (statements_nont -> empty .)
    NUMBER          reduce using rule 15 (statements_nont -> empty .)
    PROCCES         reduce using rule 15 (statements_nont -> empty .)
    ELSE            reduce using rule 15 (statements_nont -> empty .)
    LOOP            reduce using rule 15 (statements_nont -> empty .)


state 26

    (44) var -> ID LBRACKET . expression RBRACKET
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    ID              shift and go to state 20
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    expression                     shift and go to state 52
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 27

    (12) var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .

    END             reduce using rule 12 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    PROCCES         reduce using rule 12 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    INT             reduce using rule 12 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    FLOAT           reduce using rule 12 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)


state 28

    (60) call -> PROCCES . ID

    ID              shift and go to state 53


state 29

    (29) expression_nont -> ID . PLUSPLUS
    (31) expression_nont -> ID . MINUSMINUS
    (43) var -> ID .
    (44) var -> ID . LBRACKET expression RBRACKET

  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    EQUAL           reduce using rule 43 (var -> ID .)
    TIMES           reduce using rule 43 (var -> ID .)
    DIVIDE          reduce using rule 43 (var -> ID .)
    LESS            reduce using rule 43 (var -> ID .)
    LESSEQUAL       reduce using rule 43 (var -> ID .)
    GREATER         reduce using rule 43 (var -> ID .)
    GREATEREQUAL    reduce using rule 43 (var -> ID .)
    DEQUAL          reduce using rule 43 (var -> ID .)
    DISTINT         reduce using rule 43 (var -> ID .)
    QUOTES          reduce using rule 43 (var -> ID .)
    PLUS            reduce using rule 43 (var -> ID .)
    MINUS           reduce using rule 43 (var -> ID .)
    END             reduce using rule 43 (var -> ID .)
    SETOUT          reduce using rule 43 (var -> ID .)
    GETIN           reduce using rule 43 (var -> ID .)
    ID              reduce using rule 43 (var -> ID .)
    empty           reduce using rule 43 (var -> ID .)
    IF              reduce using rule 43 (var -> ID .)
    WHILE           reduce using rule 43 (var -> ID .)
    FOR             reduce using rule 43 (var -> ID .)
    LPAREN          reduce using rule 43 (var -> ID .)
    NUMBER          reduce using rule 43 (var -> ID .)
    PROCCES         reduce using rule 43 (var -> ID .)
    ELSE            reduce using rule 43 (var -> ID .)
    LOOP            reduce using rule 43 (var -> ID .)
    LBRACKET        shift and go to state 26

  ! PLUSPLUS        [ reduce using rule 43 (var -> ID .) ]
  ! MINUSMINUS      [ reduce using rule 43 (var -> ID .) ]


state 30

    (17) statement -> statements_nont .
    (14) statements_nont -> statements_nont . statement
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! reduce/reduce conflict for END resolved using rule 17 (statement -> statements_nont .)
  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! reduce/reduce conflict for FOR resolved using rule 17 (statement -> statements_nont .)
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (statement -> statements_nont .)
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (statement -> statements_nont .)
  ! reduce/reduce conflict for PROCCES resolved using rule 17 (statement -> statements_nont .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (statement -> statements_nont .)
  ! reduce/reduce conflict for LOOP resolved using rule 17 (statement -> statements_nont .)
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
    END             reduce using rule 17 (statement -> statements_nont .)
    ELSE            reduce using rule 17 (statement -> statements_nont .)
    LOOP            reduce using rule 17 (statement -> statements_nont .)
    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

  ! SETOUT          [ reduce using rule 17 (statement -> statements_nont .) ]
  ! GETIN           [ reduce using rule 17 (statement -> statements_nont .) ]
  ! ID              [ reduce using rule 17 (statement -> statements_nont .) ]
  ! PLUSPLUS        [ reduce using rule 17 (statement -> statements_nont .) ]
  ! MINUSMINUS      [ reduce using rule 17 (statement -> statements_nont .) ]
  ! empty           [ reduce using rule 17 (statement -> statements_nont .) ]
  ! IF              [ reduce using rule 17 (statement -> statements_nont .) ]
  ! WHILE           [ reduce using rule 17 (statement -> statements_nont .) ]
  ! FOR             [ reduce using rule 17 (statement -> statements_nont .) ]
  ! LPAREN          [ reduce using rule 17 (statement -> statements_nont .) ]
  ! NUMBER          [ reduce using rule 17 (statement -> statements_nont .) ]
  ! PROCCES         [ reduce using rule 17 (statement -> statements_nont .) ]
  ! END             [ reduce using rule 36 (iteration_nont -> .) ]
  ! SETOUT          [ reduce using rule 36 (iteration_nont -> .) ]
  ! GETIN           [ reduce using rule 36 (iteration_nont -> .) ]
  ! ID              [ reduce using rule 36 (iteration_nont -> .) ]
  ! PLUSPLUS        [ reduce using rule 36 (iteration_nont -> .) ]
  ! MINUSMINUS      [ reduce using rule 36 (iteration_nont -> .) ]
  ! empty           [ reduce using rule 36 (iteration_nont -> .) ]
  ! IF              [ reduce using rule 36 (iteration_nont -> .) ]
  ! WHILE           [ reduce using rule 36 (iteration_nont -> .) ]
  ! FOR             [ reduce using rule 36 (iteration_nont -> .) ]
  ! LPAREN          [ reduce using rule 36 (iteration_nont -> .) ]
  ! NUMBER          [ reduce using rule 36 (iteration_nont -> .) ]
  ! PROCCES         [ reduce using rule 36 (iteration_nont -> .) ]
  ! ELSE            [ reduce using rule 36 (iteration_nont -> .) ]
  ! LOOP            [ reduce using rule 36 (iteration_nont -> .) ]

    statements_nont                shift and go to state 30
    statement                      shift and go to state 32
    expression_nont                shift and go to state 33
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    expression                     shift and go to state 36
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 31

    (13) process_declaration -> PROCCES ID COLON statements_nont END .

    END             reduce using rule 13 (process_declaration -> PROCCES ID COLON statements_nont END .)
    PROCCES         reduce using rule 13 (process_declaration -> PROCCES ID COLON statements_nont END .)
    INT             reduce using rule 13 (process_declaration -> PROCCES ID COLON statements_nont END .)
    FLOAT           reduce using rule 13 (process_declaration -> PROCCES ID COLON statements_nont END .)


state 32

    (14) statements_nont -> statements_nont statement .

    END             reduce using rule 14 (statements_nont -> statements_nont statement .)
    SETOUT          reduce using rule 14 (statements_nont -> statements_nont statement .)
    GETIN           reduce using rule 14 (statements_nont -> statements_nont statement .)
    ID              reduce using rule 14 (statements_nont -> statements_nont statement .)
    PLUSPLUS        reduce using rule 14 (statements_nont -> statements_nont statement .)
    MINUSMINUS      reduce using rule 14 (statements_nont -> statements_nont statement .)
    empty           reduce using rule 14 (statements_nont -> statements_nont statement .)
    IF              reduce using rule 14 (statements_nont -> statements_nont statement .)
    WHILE           reduce using rule 14 (statements_nont -> statements_nont statement .)
    FOR             reduce using rule 14 (statements_nont -> statements_nont statement .)
    LPAREN          reduce using rule 14 (statements_nont -> statements_nont statement .)
    NUMBER          reduce using rule 14 (statements_nont -> statements_nont statement .)
    PROCCES         reduce using rule 14 (statements_nont -> statements_nont statement .)
    ELSE            reduce using rule 14 (statements_nont -> statements_nont statement .)
    LOOP            reduce using rule 14 (statements_nont -> statements_nont statement .)


state 33

    (16) statement -> expression_nont .

    END             reduce using rule 16 (statement -> expression_nont .)
    SETOUT          reduce using rule 16 (statement -> expression_nont .)
    GETIN           reduce using rule 16 (statement -> expression_nont .)
    ID              reduce using rule 16 (statement -> expression_nont .)
    PLUSPLUS        reduce using rule 16 (statement -> expression_nont .)
    MINUSMINUS      reduce using rule 16 (statement -> expression_nont .)
    empty           reduce using rule 16 (statement -> expression_nont .)
    IF              reduce using rule 16 (statement -> expression_nont .)
    WHILE           reduce using rule 16 (statement -> expression_nont .)
    FOR             reduce using rule 16 (statement -> expression_nont .)
    LPAREN          reduce using rule 16 (statement -> expression_nont .)
    NUMBER          reduce using rule 16 (statement -> expression_nont .)
    PROCCES         reduce using rule 16 (statement -> expression_nont .)
    ELSE            reduce using rule 16 (statement -> expression_nont .)
    LOOP            reduce using rule 16 (statement -> expression_nont .)


state 34

    (18) statement -> condition_nont .

    END             reduce using rule 18 (statement -> condition_nont .)
    SETOUT          reduce using rule 18 (statement -> condition_nont .)
    GETIN           reduce using rule 18 (statement -> condition_nont .)
    ID              reduce using rule 18 (statement -> condition_nont .)
    PLUSPLUS        reduce using rule 18 (statement -> condition_nont .)
    MINUSMINUS      reduce using rule 18 (statement -> condition_nont .)
    empty           reduce using rule 18 (statement -> condition_nont .)
    IF              reduce using rule 18 (statement -> condition_nont .)
    WHILE           reduce using rule 18 (statement -> condition_nont .)
    FOR             reduce using rule 18 (statement -> condition_nont .)
    LPAREN          reduce using rule 18 (statement -> condition_nont .)
    NUMBER          reduce using rule 18 (statement -> condition_nont .)
    PROCCES         reduce using rule 18 (statement -> condition_nont .)
    ELSE            reduce using rule 18 (statement -> condition_nont .)
    LOOP            reduce using rule 18 (statement -> condition_nont .)


state 35

    (19) statement -> iteration_nont .

    END             reduce using rule 19 (statement -> iteration_nont .)
    SETOUT          reduce using rule 19 (statement -> iteration_nont .)
    GETIN           reduce using rule 19 (statement -> iteration_nont .)
    ID              reduce using rule 19 (statement -> iteration_nont .)
    PLUSPLUS        reduce using rule 19 (statement -> iteration_nont .)
    MINUSMINUS      reduce using rule 19 (statement -> iteration_nont .)
    empty           reduce using rule 19 (statement -> iteration_nont .)
    IF              reduce using rule 19 (statement -> iteration_nont .)
    WHILE           reduce using rule 19 (statement -> iteration_nont .)
    FOR             reduce using rule 19 (statement -> iteration_nont .)
    LPAREN          reduce using rule 19 (statement -> iteration_nont .)
    NUMBER          reduce using rule 19 (statement -> iteration_nont .)
    PROCCES         reduce using rule 19 (statement -> iteration_nont .)
    ELSE            reduce using rule 19 (statement -> iteration_nont .)
    LOOP            reduce using rule 19 (statement -> iteration_nont .)


state 36

    (20) expression_nont -> expression .

    END             reduce using rule 20 (expression_nont -> expression .)
    SETOUT          reduce using rule 20 (expression_nont -> expression .)
    GETIN           reduce using rule 20 (expression_nont -> expression .)
    ID              reduce using rule 20 (expression_nont -> expression .)
    PLUSPLUS        reduce using rule 20 (expression_nont -> expression .)
    MINUSMINUS      reduce using rule 20 (expression_nont -> expression .)
    empty           reduce using rule 20 (expression_nont -> expression .)
    IF              reduce using rule 20 (expression_nont -> expression .)
    WHILE           reduce using rule 20 (expression_nont -> expression .)
    FOR             reduce using rule 20 (expression_nont -> expression .)
    LPAREN          reduce using rule 20 (expression_nont -> expression .)
    NUMBER          reduce using rule 20 (expression_nont -> expression .)
    PROCCES         reduce using rule 20 (expression_nont -> expression .)
    ELSE            reduce using rule 20 (expression_nont -> expression .)
    LOOP            reduce using rule 20 (expression_nont -> expression .)


state 37

    (21) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> SETOUT . LPAREN var RPAREN
    (24) expression_nont -> SETOUT . LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> SETOUT . LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> SETOUT . LPAREN var COMMA var COMMA ENDL RPAREN

    LPAREN          shift and go to state 56


state 38

    (65) factor -> LPAREN . expression RPAREN
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    ID              shift and go to state 20
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    expression                     shift and go to state 57
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 39

    (42) expression -> var . EQUAL expression
    (66) factor -> var .

    EQUAL           shift and go to state 58
    TIMES           reduce using rule 66 (factor -> var .)
    DIVIDE          reduce using rule 66 (factor -> var .)
    LESS            reduce using rule 66 (factor -> var .)
    LESSEQUAL       reduce using rule 66 (factor -> var .)
    GREATER         reduce using rule 66 (factor -> var .)
    GREATEREQUAL    reduce using rule 66 (factor -> var .)
    DEQUAL          reduce using rule 66 (factor -> var .)
    DISTINT         reduce using rule 66 (factor -> var .)
    QUOTES          reduce using rule 66 (factor -> var .)
    PLUS            reduce using rule 66 (factor -> var .)
    MINUS           reduce using rule 66 (factor -> var .)
    END             reduce using rule 66 (factor -> var .)
    SETOUT          reduce using rule 66 (factor -> var .)
    GETIN           reduce using rule 66 (factor -> var .)
    ID              reduce using rule 66 (factor -> var .)
    PLUSPLUS        reduce using rule 66 (factor -> var .)
    MINUSMINUS      reduce using rule 66 (factor -> var .)
    empty           reduce using rule 66 (factor -> var .)
    IF              reduce using rule 66 (factor -> var .)
    WHILE           reduce using rule 66 (factor -> var .)
    FOR             reduce using rule 66 (factor -> var .)
    LPAREN          reduce using rule 66 (factor -> var .)
    NUMBER          reduce using rule 66 (factor -> var .)
    PROCCES         reduce using rule 66 (factor -> var .)
    RBRACKET        reduce using rule 66 (factor -> var .)
    ELSE            reduce using rule 66 (factor -> var .)
    LOOP            reduce using rule 66 (factor -> var .)
    RPAREN          reduce using rule 66 (factor -> var .)
    THEN            reduce using rule 66 (factor -> var .)
    DO              reduce using rule 66 (factor -> var .)
    COMMA           reduce using rule 66 (factor -> var .)


state 40

    (27) expression_nont -> GETIN . LPAREN var RPAREN
    (28) expression_nont -> GETIN . LPAREN var COMMA var RPAREN

    LPAREN          shift and go to state 59


state 41

    (30) expression_nont -> PLUSPLUS . ID

    ID              shift and go to state 60


state 42

    (32) expression_nont -> MINUSMINUS . ID

    ID              shift and go to state 61


state 43

    (33) condition_nont -> IF . expression THEN statement END
    (34) condition_nont -> IF . expression THEN statement ELSE statement END
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    ID              shift and go to state 20
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    expression                     shift and go to state 62
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 44

    (35) iteration_nont -> WHILE . expression DO statement LOOP
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    ID              shift and go to state 20
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    expression                     shift and go to state 63
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 45

    (37) iteration_nont -> FOR . var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> FOR . var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> FOR . var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> FOR . var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> FOR . var COMMA expression COMMA MINUSMINUS var DO statement
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 20

    var                            shift and go to state 64

state 46

    (45) expression -> simple_expression .

    END             reduce using rule 45 (expression -> simple_expression .)
    SETOUT          reduce using rule 45 (expression -> simple_expression .)
    GETIN           reduce using rule 45 (expression -> simple_expression .)
    ID              reduce using rule 45 (expression -> simple_expression .)
    PLUSPLUS        reduce using rule 45 (expression -> simple_expression .)
    MINUSMINUS      reduce using rule 45 (expression -> simple_expression .)
    empty           reduce using rule 45 (expression -> simple_expression .)
    IF              reduce using rule 45 (expression -> simple_expression .)
    WHILE           reduce using rule 45 (expression -> simple_expression .)
    FOR             reduce using rule 45 (expression -> simple_expression .)
    LPAREN          reduce using rule 45 (expression -> simple_expression .)
    NUMBER          reduce using rule 45 (expression -> simple_expression .)
    PROCCES         reduce using rule 45 (expression -> simple_expression .)
    RBRACKET        reduce using rule 45 (expression -> simple_expression .)
    ELSE            reduce using rule 45 (expression -> simple_expression .)
    LOOP            reduce using rule 45 (expression -> simple_expression .)
    RPAREN          reduce using rule 45 (expression -> simple_expression .)
    THEN            reduce using rule 45 (expression -> simple_expression .)
    DO              reduce using rule 45 (expression -> simple_expression .)
    COMMA           reduce using rule 45 (expression -> simple_expression .)


state 47

    (46) simple_expression -> additive_expression . relop additive_expression
    (47) simple_expression -> additive_expression .
    (55) additive_expression -> additive_expression . addop term
    (48) relop -> . LESS
    (49) relop -> . LESSEQUAL
    (50) relop -> . GREATER
    (51) relop -> . GREATEREQUAL
    (52) relop -> . DEQUAL
    (53) relop -> . DISTINT
    (54) relop -> . QUOTES
    (57) addop -> . PLUS
    (58) addop -> . MINUS

    END             reduce using rule 47 (simple_expression -> additive_expression .)
    SETOUT          reduce using rule 47 (simple_expression -> additive_expression .)
    GETIN           reduce using rule 47 (simple_expression -> additive_expression .)
    ID              reduce using rule 47 (simple_expression -> additive_expression .)
    PLUSPLUS        reduce using rule 47 (simple_expression -> additive_expression .)
    MINUSMINUS      reduce using rule 47 (simple_expression -> additive_expression .)
    empty           reduce using rule 47 (simple_expression -> additive_expression .)
    IF              reduce using rule 47 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 47 (simple_expression -> additive_expression .)
    FOR             reduce using rule 47 (simple_expression -> additive_expression .)
    LPAREN          reduce using rule 47 (simple_expression -> additive_expression .)
    NUMBER          reduce using rule 47 (simple_expression -> additive_expression .)
    PROCCES         reduce using rule 47 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 47 (simple_expression -> additive_expression .)
    ELSE            reduce using rule 47 (simple_expression -> additive_expression .)
    LOOP            reduce using rule 47 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 47 (simple_expression -> additive_expression .)
    THEN            reduce using rule 47 (simple_expression -> additive_expression .)
    DO              reduce using rule 47 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 47 (simple_expression -> additive_expression .)
    LESS            shift and go to state 67
    LESSEQUAL       shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQUAL    shift and go to state 70
    DEQUAL          shift and go to state 71
    DISTINT         shift and go to state 72
    QUOTES          shift and go to state 73
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75

    relop                          shift and go to state 65
    addop                          shift and go to state 66

state 48

    (56) additive_expression -> term .
    (61) term -> term . mulop factor
    (63) mulop -> . TIMES
    (64) mulop -> . DIVIDE

    LESS            reduce using rule 56 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 56 (additive_expression -> term .)
    GREATER         reduce using rule 56 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 56 (additive_expression -> term .)
    DEQUAL          reduce using rule 56 (additive_expression -> term .)
    DISTINT         reduce using rule 56 (additive_expression -> term .)
    QUOTES          reduce using rule 56 (additive_expression -> term .)
    PLUS            reduce using rule 56 (additive_expression -> term .)
    MINUS           reduce using rule 56 (additive_expression -> term .)
    END             reduce using rule 56 (additive_expression -> term .)
    SETOUT          reduce using rule 56 (additive_expression -> term .)
    GETIN           reduce using rule 56 (additive_expression -> term .)
    ID              reduce using rule 56 (additive_expression -> term .)
    PLUSPLUS        reduce using rule 56 (additive_expression -> term .)
    MINUSMINUS      reduce using rule 56 (additive_expression -> term .)
    empty           reduce using rule 56 (additive_expression -> term .)
    IF              reduce using rule 56 (additive_expression -> term .)
    WHILE           reduce using rule 56 (additive_expression -> term .)
    FOR             reduce using rule 56 (additive_expression -> term .)
    LPAREN          reduce using rule 56 (additive_expression -> term .)
    NUMBER          reduce using rule 56 (additive_expression -> term .)
    PROCCES         reduce using rule 56 (additive_expression -> term .)
    RBRACKET        reduce using rule 56 (additive_expression -> term .)
    ELSE            reduce using rule 56 (additive_expression -> term .)
    LOOP            reduce using rule 56 (additive_expression -> term .)
    RPAREN          reduce using rule 56 (additive_expression -> term .)
    THEN            reduce using rule 56 (additive_expression -> term .)
    DO              reduce using rule 56 (additive_expression -> term .)
    COMMA           reduce using rule 56 (additive_expression -> term .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78

    mulop                          shift and go to state 76

state 49

    (62) term -> factor .

    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    LESS            reduce using rule 62 (term -> factor .)
    LESSEQUAL       reduce using rule 62 (term -> factor .)
    GREATER         reduce using rule 62 (term -> factor .)
    GREATEREQUAL    reduce using rule 62 (term -> factor .)
    DEQUAL          reduce using rule 62 (term -> factor .)
    DISTINT         reduce using rule 62 (term -> factor .)
    QUOTES          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    END             reduce using rule 62 (term -> factor .)
    SETOUT          reduce using rule 62 (term -> factor .)
    GETIN           reduce using rule 62 (term -> factor .)
    ID              reduce using rule 62 (term -> factor .)
    PLUSPLUS        reduce using rule 62 (term -> factor .)
    MINUSMINUS      reduce using rule 62 (term -> factor .)
    empty           reduce using rule 62 (term -> factor .)
    IF              reduce using rule 62 (term -> factor .)
    WHILE           reduce using rule 62 (term -> factor .)
    FOR             reduce using rule 62 (term -> factor .)
    LPAREN          reduce using rule 62 (term -> factor .)
    NUMBER          reduce using rule 62 (term -> factor .)
    PROCCES         reduce using rule 62 (term -> factor .)
    RBRACKET        reduce using rule 62 (term -> factor .)
    ELSE            reduce using rule 62 (term -> factor .)
    LOOP            reduce using rule 62 (term -> factor .)
    RPAREN          reduce using rule 62 (term -> factor .)
    THEN            reduce using rule 62 (term -> factor .)
    DO              reduce using rule 62 (term -> factor .)
    COMMA           reduce using rule 62 (term -> factor .)


state 50

    (59) factor -> call .

    TIMES           reduce using rule 59 (factor -> call .)
    DIVIDE          reduce using rule 59 (factor -> call .)
    LESS            reduce using rule 59 (factor -> call .)
    LESSEQUAL       reduce using rule 59 (factor -> call .)
    GREATER         reduce using rule 59 (factor -> call .)
    GREATEREQUAL    reduce using rule 59 (factor -> call .)
    DEQUAL          reduce using rule 59 (factor -> call .)
    DISTINT         reduce using rule 59 (factor -> call .)
    QUOTES          reduce using rule 59 (factor -> call .)
    PLUS            reduce using rule 59 (factor -> call .)
    MINUS           reduce using rule 59 (factor -> call .)
    END             reduce using rule 59 (factor -> call .)
    SETOUT          reduce using rule 59 (factor -> call .)
    GETIN           reduce using rule 59 (factor -> call .)
    ID              reduce using rule 59 (factor -> call .)
    PLUSPLUS        reduce using rule 59 (factor -> call .)
    MINUSMINUS      reduce using rule 59 (factor -> call .)
    empty           reduce using rule 59 (factor -> call .)
    IF              reduce using rule 59 (factor -> call .)
    WHILE           reduce using rule 59 (factor -> call .)
    FOR             reduce using rule 59 (factor -> call .)
    LPAREN          reduce using rule 59 (factor -> call .)
    NUMBER          reduce using rule 59 (factor -> call .)
    PROCCES         reduce using rule 59 (factor -> call .)
    RBRACKET        reduce using rule 59 (factor -> call .)
    ELSE            reduce using rule 59 (factor -> call .)
    LOOP            reduce using rule 59 (factor -> call .)
    RPAREN          reduce using rule 59 (factor -> call .)
    THEN            reduce using rule 59 (factor -> call .)
    DO              reduce using rule 59 (factor -> call .)
    COMMA           reduce using rule 59 (factor -> call .)


state 51

    (67) factor -> NUMBER .

    TIMES           reduce using rule 67 (factor -> NUMBER .)
    DIVIDE          reduce using rule 67 (factor -> NUMBER .)
    LESS            reduce using rule 67 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 67 (factor -> NUMBER .)
    GREATER         reduce using rule 67 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 67 (factor -> NUMBER .)
    DEQUAL          reduce using rule 67 (factor -> NUMBER .)
    DISTINT         reduce using rule 67 (factor -> NUMBER .)
    QUOTES          reduce using rule 67 (factor -> NUMBER .)
    PLUS            reduce using rule 67 (factor -> NUMBER .)
    MINUS           reduce using rule 67 (factor -> NUMBER .)
    END             reduce using rule 67 (factor -> NUMBER .)
    SETOUT          reduce using rule 67 (factor -> NUMBER .)
    GETIN           reduce using rule 67 (factor -> NUMBER .)
    ID              reduce using rule 67 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 67 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 67 (factor -> NUMBER .)
    empty           reduce using rule 67 (factor -> NUMBER .)
    IF              reduce using rule 67 (factor -> NUMBER .)
    WHILE           reduce using rule 67 (factor -> NUMBER .)
    FOR             reduce using rule 67 (factor -> NUMBER .)
    LPAREN          reduce using rule 67 (factor -> NUMBER .)
    NUMBER          reduce using rule 67 (factor -> NUMBER .)
    PROCCES         reduce using rule 67 (factor -> NUMBER .)
    RBRACKET        reduce using rule 67 (factor -> NUMBER .)
    ELSE            reduce using rule 67 (factor -> NUMBER .)
    LOOP            reduce using rule 67 (factor -> NUMBER .)
    RPAREN          reduce using rule 67 (factor -> NUMBER .)
    THEN            reduce using rule 67 (factor -> NUMBER .)
    DO              reduce using rule 67 (factor -> NUMBER .)
    COMMA           reduce using rule 67 (factor -> NUMBER .)


state 52

    (44) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 79


state 53

    (60) call -> PROCCES ID .

    TIMES           reduce using rule 60 (call -> PROCCES ID .)
    DIVIDE          reduce using rule 60 (call -> PROCCES ID .)
    LESS            reduce using rule 60 (call -> PROCCES ID .)
    LESSEQUAL       reduce using rule 60 (call -> PROCCES ID .)
    GREATER         reduce using rule 60 (call -> PROCCES ID .)
    GREATEREQUAL    reduce using rule 60 (call -> PROCCES ID .)
    DEQUAL          reduce using rule 60 (call -> PROCCES ID .)
    DISTINT         reduce using rule 60 (call -> PROCCES ID .)
    QUOTES          reduce using rule 60 (call -> PROCCES ID .)
    PLUS            reduce using rule 60 (call -> PROCCES ID .)
    MINUS           reduce using rule 60 (call -> PROCCES ID .)
    END             reduce using rule 60 (call -> PROCCES ID .)
    SETOUT          reduce using rule 60 (call -> PROCCES ID .)
    GETIN           reduce using rule 60 (call -> PROCCES ID .)
    ID              reduce using rule 60 (call -> PROCCES ID .)
    PLUSPLUS        reduce using rule 60 (call -> PROCCES ID .)
    MINUSMINUS      reduce using rule 60 (call -> PROCCES ID .)
    empty           reduce using rule 60 (call -> PROCCES ID .)
    IF              reduce using rule 60 (call -> PROCCES ID .)
    WHILE           reduce using rule 60 (call -> PROCCES ID .)
    FOR             reduce using rule 60 (call -> PROCCES ID .)
    LPAREN          reduce using rule 60 (call -> PROCCES ID .)
    NUMBER          reduce using rule 60 (call -> PROCCES ID .)
    PROCCES         reduce using rule 60 (call -> PROCCES ID .)
    RBRACKET        reduce using rule 60 (call -> PROCCES ID .)
    ELSE            reduce using rule 60 (call -> PROCCES ID .)
    LOOP            reduce using rule 60 (call -> PROCCES ID .)
    RPAREN          reduce using rule 60 (call -> PROCCES ID .)
    THEN            reduce using rule 60 (call -> PROCCES ID .)
    DO              reduce using rule 60 (call -> PROCCES ID .)
    COMMA           reduce using rule 60 (call -> PROCCES ID .)


state 54

    (29) expression_nont -> ID PLUSPLUS .

    END             reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    SETOUT          reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    GETIN           reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    ID              reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    PLUSPLUS        reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    MINUSMINUS      reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    empty           reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    IF              reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    WHILE           reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    FOR             reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    LPAREN          reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    NUMBER          reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    PROCCES         reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    ELSE            reduce using rule 29 (expression_nont -> ID PLUSPLUS .)
    LOOP            reduce using rule 29 (expression_nont -> ID PLUSPLUS .)


state 55

    (31) expression_nont -> ID MINUSMINUS .

    END             reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    SETOUT          reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    GETIN           reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    ID              reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    PLUSPLUS        reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    MINUSMINUS      reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    empty           reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    IF              reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    WHILE           reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    FOR             reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    LPAREN          reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    NUMBER          reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    PROCCES         reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    ELSE            reduce using rule 31 (expression_nont -> ID MINUSMINUS .)
    LOOP            reduce using rule 31 (expression_nont -> ID MINUSMINUS .)


state 56

    (21) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES RPAREN
    (22) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> SETOUT LPAREN . var RPAREN
    (24) expression_nont -> SETOUT LPAREN . var COMMA ENDL RPAREN
    (25) expression_nont -> SETOUT LPAREN . var COMMA var COMMA RPAREN
    (26) expression_nont -> SETOUT LPAREN . var COMMA var COMMA ENDL RPAREN
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    QUOTES          shift and go to state 80
    ID              shift and go to state 20

    var                            shift and go to state 81

state 57

    (65) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 82


state 58

    (42) expression -> var EQUAL . expression
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    ID              shift and go to state 20
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    var                            shift and go to state 39
    expression                     shift and go to state 83
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 59

    (27) expression_nont -> GETIN LPAREN . var RPAREN
    (28) expression_nont -> GETIN LPAREN . var COMMA var RPAREN
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 20

    var                            shift and go to state 84

state 60

    (30) expression_nont -> PLUSPLUS ID .

    END             reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    SETOUT          reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    GETIN           reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    ID              reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    PLUSPLUS        reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    MINUSMINUS      reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    empty           reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    IF              reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    WHILE           reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    FOR             reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    LPAREN          reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    NUMBER          reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    PROCCES         reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    ELSE            reduce using rule 30 (expression_nont -> PLUSPLUS ID .)
    LOOP            reduce using rule 30 (expression_nont -> PLUSPLUS ID .)


state 61

    (32) expression_nont -> MINUSMINUS ID .

    END             reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    SETOUT          reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    GETIN           reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    ID              reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    PLUSPLUS        reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    MINUSMINUS      reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    empty           reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    IF              reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    WHILE           reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    FOR             reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    LPAREN          reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    NUMBER          reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    PROCCES         reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    ELSE            reduce using rule 32 (expression_nont -> MINUSMINUS ID .)
    LOOP            reduce using rule 32 (expression_nont -> MINUSMINUS ID .)


state 62

    (33) condition_nont -> IF expression . THEN statement END
    (34) condition_nont -> IF expression . THEN statement ELSE statement END

    THEN            shift and go to state 85


state 63

    (35) iteration_nont -> WHILE expression . DO statement LOOP

    DO              shift and go to state 86


state 64

    (37) iteration_nont -> FOR var . COMMA expression COMMA expression DO statement
    (38) iteration_nont -> FOR var . COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> FOR var . COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> FOR var . COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> FOR var . COMMA expression COMMA MINUSMINUS var DO statement

    COMMA           shift and go to state 87


state 65

    (46) simple_expression -> additive_expression relop . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28
    ID              shift and go to state 20

    additive_expression            shift and go to state 88
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50
    var                            shift and go to state 89

state 66

    (55) additive_expression -> additive_expression addop . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28
    ID              shift and go to state 20

    term                           shift and go to state 90
    factor                         shift and go to state 49
    call                           shift and go to state 50
    var                            shift and go to state 89

state 67

    (48) relop -> LESS .

    LPAREN          reduce using rule 48 (relop -> LESS .)
    NUMBER          reduce using rule 48 (relop -> LESS .)
    PROCCES         reduce using rule 48 (relop -> LESS .)
    ID              reduce using rule 48 (relop -> LESS .)


state 68

    (49) relop -> LESSEQUAL .

    LPAREN          reduce using rule 49 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 49 (relop -> LESSEQUAL .)
    PROCCES         reduce using rule 49 (relop -> LESSEQUAL .)
    ID              reduce using rule 49 (relop -> LESSEQUAL .)


state 69

    (50) relop -> GREATER .

    LPAREN          reduce using rule 50 (relop -> GREATER .)
    NUMBER          reduce using rule 50 (relop -> GREATER .)
    PROCCES         reduce using rule 50 (relop -> GREATER .)
    ID              reduce using rule 50 (relop -> GREATER .)


state 70

    (51) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 51 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 51 (relop -> GREATEREQUAL .)
    PROCCES         reduce using rule 51 (relop -> GREATEREQUAL .)
    ID              reduce using rule 51 (relop -> GREATEREQUAL .)


state 71

    (52) relop -> DEQUAL .

    LPAREN          reduce using rule 52 (relop -> DEQUAL .)
    NUMBER          reduce using rule 52 (relop -> DEQUAL .)
    PROCCES         reduce using rule 52 (relop -> DEQUAL .)
    ID              reduce using rule 52 (relop -> DEQUAL .)


state 72

    (53) relop -> DISTINT .

    LPAREN          reduce using rule 53 (relop -> DISTINT .)
    NUMBER          reduce using rule 53 (relop -> DISTINT .)
    PROCCES         reduce using rule 53 (relop -> DISTINT .)
    ID              reduce using rule 53 (relop -> DISTINT .)


state 73

    (54) relop -> QUOTES .

    LPAREN          reduce using rule 54 (relop -> QUOTES .)
    NUMBER          reduce using rule 54 (relop -> QUOTES .)
    PROCCES         reduce using rule 54 (relop -> QUOTES .)
    ID              reduce using rule 54 (relop -> QUOTES .)


state 74

    (57) addop -> PLUS .

    LPAREN          reduce using rule 57 (addop -> PLUS .)
    NUMBER          reduce using rule 57 (addop -> PLUS .)
    PROCCES         reduce using rule 57 (addop -> PLUS .)
    ID              reduce using rule 57 (addop -> PLUS .)


state 75

    (58) addop -> MINUS .

    LPAREN          reduce using rule 58 (addop -> MINUS .)
    NUMBER          reduce using rule 58 (addop -> MINUS .)
    PROCCES         reduce using rule 58 (addop -> MINUS .)
    ID              reduce using rule 58 (addop -> MINUS .)


state 76

    (61) term -> term mulop . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28
    ID              shift and go to state 20

    factor                         shift and go to state 91
    call                           shift and go to state 50
    var                            shift and go to state 89

state 77

    (63) mulop -> TIMES .

    LPAREN          reduce using rule 63 (mulop -> TIMES .)
    NUMBER          reduce using rule 63 (mulop -> TIMES .)
    PROCCES         reduce using rule 63 (mulop -> TIMES .)
    ID              reduce using rule 63 (mulop -> TIMES .)


state 78

    (64) mulop -> DIVIDE .

    LPAREN          reduce using rule 64 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 64 (mulop -> DIVIDE .)
    PROCCES         reduce using rule 64 (mulop -> DIVIDE .)
    ID              reduce using rule 64 (mulop -> DIVIDE .)


state 79

    (44) var -> ID LBRACKET expression RBRACKET .

    END             reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    PROCCES         reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    INT             reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    QUOTES          reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    empty           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 44 (var -> ID LBRACKET expression RBRACKET .)


state 80

    (21) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES RPAREN
    (22) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES COMMA ENDL RPAREN

    ID              shift and go to state 92


state 81

    (23) expression_nont -> SETOUT LPAREN var . RPAREN
    (24) expression_nont -> SETOUT LPAREN var . COMMA ENDL RPAREN
    (25) expression_nont -> SETOUT LPAREN var . COMMA var COMMA RPAREN
    (26) expression_nont -> SETOUT LPAREN var . COMMA var COMMA ENDL RPAREN

    RPAREN          shift and go to state 93
    COMMA           shift and go to state 94


state 82

    (65) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    QUOTES          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    SETOUT          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    GETIN           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    empty           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    PROCCES         reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 65 (factor -> LPAREN expression RPAREN .)


state 83

    (42) expression -> var EQUAL expression .

    END             reduce using rule 42 (expression -> var EQUAL expression .)
    SETOUT          reduce using rule 42 (expression -> var EQUAL expression .)
    GETIN           reduce using rule 42 (expression -> var EQUAL expression .)
    ID              reduce using rule 42 (expression -> var EQUAL expression .)
    PLUSPLUS        reduce using rule 42 (expression -> var EQUAL expression .)
    MINUSMINUS      reduce using rule 42 (expression -> var EQUAL expression .)
    empty           reduce using rule 42 (expression -> var EQUAL expression .)
    IF              reduce using rule 42 (expression -> var EQUAL expression .)
    WHILE           reduce using rule 42 (expression -> var EQUAL expression .)
    FOR             reduce using rule 42 (expression -> var EQUAL expression .)
    LPAREN          reduce using rule 42 (expression -> var EQUAL expression .)
    NUMBER          reduce using rule 42 (expression -> var EQUAL expression .)
    PROCCES         reduce using rule 42 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 42 (expression -> var EQUAL expression .)
    ELSE            reduce using rule 42 (expression -> var EQUAL expression .)
    LOOP            reduce using rule 42 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 42 (expression -> var EQUAL expression .)
    THEN            reduce using rule 42 (expression -> var EQUAL expression .)
    DO              reduce using rule 42 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 42 (expression -> var EQUAL expression .)


state 84

    (27) expression_nont -> GETIN LPAREN var . RPAREN
    (28) expression_nont -> GETIN LPAREN var . COMMA var RPAREN

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 96


state 85

    (33) condition_nont -> IF expression THEN . statement END
    (34) condition_nont -> IF expression THEN . statement ELSE statement END
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    END             reduce using rule 36 (iteration_nont -> .)
    ELSE            reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    expression                     shift and go to state 36
    statement                      shift and go to state 97
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 86

    (35) iteration_nont -> WHILE expression DO . statement LOOP
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    LOOP            reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    expression                     shift and go to state 36
    statement                      shift and go to state 98
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 87

    (37) iteration_nont -> FOR var COMMA . expression COMMA expression DO statement
    (38) iteration_nont -> FOR var COMMA . expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> FOR var COMMA . expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> FOR var COMMA . expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> FOR var COMMA . expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    ID              shift and go to state 20
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    var                            shift and go to state 39
    expression                     shift and go to state 99
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 88

    (46) simple_expression -> additive_expression relop additive_expression .
    (55) additive_expression -> additive_expression . addop term
    (57) addop -> . PLUS
    (58) addop -> . MINUS

    END             reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    SETOUT          reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    GETIN           reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    ID              reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    PLUSPLUS        reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    MINUSMINUS      reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    empty           reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    IF              reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    WHILE           reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    FOR             reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    LPAREN          reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    NUMBER          reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    PROCCES         reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    ELSE            reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    LOOP            reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    THEN            reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    DO              reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75

    addop                          shift and go to state 66

state 89

    (66) factor -> var .

    TIMES           reduce using rule 66 (factor -> var .)
    DIVIDE          reduce using rule 66 (factor -> var .)
    PLUS            reduce using rule 66 (factor -> var .)
    MINUS           reduce using rule 66 (factor -> var .)
    END             reduce using rule 66 (factor -> var .)
    SETOUT          reduce using rule 66 (factor -> var .)
    GETIN           reduce using rule 66 (factor -> var .)
    ID              reduce using rule 66 (factor -> var .)
    PLUSPLUS        reduce using rule 66 (factor -> var .)
    MINUSMINUS      reduce using rule 66 (factor -> var .)
    empty           reduce using rule 66 (factor -> var .)
    IF              reduce using rule 66 (factor -> var .)
    WHILE           reduce using rule 66 (factor -> var .)
    FOR             reduce using rule 66 (factor -> var .)
    LPAREN          reduce using rule 66 (factor -> var .)
    NUMBER          reduce using rule 66 (factor -> var .)
    PROCCES         reduce using rule 66 (factor -> var .)
    RBRACKET        reduce using rule 66 (factor -> var .)
    ELSE            reduce using rule 66 (factor -> var .)
    LOOP            reduce using rule 66 (factor -> var .)
    RPAREN          reduce using rule 66 (factor -> var .)
    THEN            reduce using rule 66 (factor -> var .)
    DO              reduce using rule 66 (factor -> var .)
    COMMA           reduce using rule 66 (factor -> var .)
    LESS            reduce using rule 66 (factor -> var .)
    LESSEQUAL       reduce using rule 66 (factor -> var .)
    GREATER         reduce using rule 66 (factor -> var .)
    GREATEREQUAL    reduce using rule 66 (factor -> var .)
    DEQUAL          reduce using rule 66 (factor -> var .)
    DISTINT         reduce using rule 66 (factor -> var .)
    QUOTES          reduce using rule 66 (factor -> var .)


state 90

    (55) additive_expression -> additive_expression addop term .
    (61) term -> term . mulop factor
    (63) mulop -> . TIMES
    (64) mulop -> . DIVIDE

    LESS            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 55 (additive_expression -> additive_expression addop term .)
    QUOTES          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    END             reduce using rule 55 (additive_expression -> additive_expression addop term .)
    SETOUT          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GETIN           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    ID              reduce using rule 55 (additive_expression -> additive_expression addop term .)
    PLUSPLUS        reduce using rule 55 (additive_expression -> additive_expression addop term .)
    MINUSMINUS      reduce using rule 55 (additive_expression -> additive_expression addop term .)
    empty           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 55 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 55 (additive_expression -> additive_expression addop term .)
    LPAREN          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    NUMBER          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    PROCCES         reduce using rule 55 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 55 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    LOOP            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    THEN            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DO              reduce using rule 55 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78

    mulop                          shift and go to state 76

state 91

    (61) term -> term mulop factor .

    TIMES           reduce using rule 61 (term -> term mulop factor .)
    DIVIDE          reduce using rule 61 (term -> term mulop factor .)
    LESS            reduce using rule 61 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 61 (term -> term mulop factor .)
    GREATER         reduce using rule 61 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 61 (term -> term mulop factor .)
    DEQUAL          reduce using rule 61 (term -> term mulop factor .)
    DISTINT         reduce using rule 61 (term -> term mulop factor .)
    QUOTES          reduce using rule 61 (term -> term mulop factor .)
    PLUS            reduce using rule 61 (term -> term mulop factor .)
    MINUS           reduce using rule 61 (term -> term mulop factor .)
    END             reduce using rule 61 (term -> term mulop factor .)
    SETOUT          reduce using rule 61 (term -> term mulop factor .)
    GETIN           reduce using rule 61 (term -> term mulop factor .)
    ID              reduce using rule 61 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 61 (term -> term mulop factor .)
    MINUSMINUS      reduce using rule 61 (term -> term mulop factor .)
    empty           reduce using rule 61 (term -> term mulop factor .)
    IF              reduce using rule 61 (term -> term mulop factor .)
    WHILE           reduce using rule 61 (term -> term mulop factor .)
    FOR             reduce using rule 61 (term -> term mulop factor .)
    LPAREN          reduce using rule 61 (term -> term mulop factor .)
    NUMBER          reduce using rule 61 (term -> term mulop factor .)
    PROCCES         reduce using rule 61 (term -> term mulop factor .)
    RBRACKET        reduce using rule 61 (term -> term mulop factor .)
    ELSE            reduce using rule 61 (term -> term mulop factor .)
    LOOP            reduce using rule 61 (term -> term mulop factor .)
    RPAREN          reduce using rule 61 (term -> term mulop factor .)
    THEN            reduce using rule 61 (term -> term mulop factor .)
    DO              reduce using rule 61 (term -> term mulop factor .)
    COMMA           reduce using rule 61 (term -> term mulop factor .)


state 92

    (21) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES RPAREN
    (22) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES COMMA ENDL RPAREN

    QUOTES          shift and go to state 100


state 93

    (23) expression_nont -> SETOUT LPAREN var RPAREN .

    END             reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    SETOUT          reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    GETIN           reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ID              reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    PLUSPLUS        reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    MINUSMINUS      reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    empty           reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    IF              reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    WHILE           reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FOR             reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LPAREN          reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    NUMBER          reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    PROCCES         reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ELSE            reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LOOP            reduce using rule 23 (expression_nont -> SETOUT LPAREN var RPAREN .)


state 94

    (24) expression_nont -> SETOUT LPAREN var COMMA . ENDL RPAREN
    (25) expression_nont -> SETOUT LPAREN var COMMA . var COMMA RPAREN
    (26) expression_nont -> SETOUT LPAREN var COMMA . var COMMA ENDL RPAREN
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    ENDL            shift and go to state 102
    ID              shift and go to state 20

    var                            shift and go to state 101

state 95

    (27) expression_nont -> GETIN LPAREN var RPAREN .

    END             reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    SETOUT          reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    GETIN           reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    ID              reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    PLUSPLUS        reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    MINUSMINUS      reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    empty           reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    IF              reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    WHILE           reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    FOR             reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    LPAREN          reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    NUMBER          reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    PROCCES         reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    ELSE            reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)
    LOOP            reduce using rule 27 (expression_nont -> GETIN LPAREN var RPAREN .)


state 96

    (28) expression_nont -> GETIN LPAREN var COMMA . var RPAREN
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 20

    var                            shift and go to state 103

state 97

    (33) condition_nont -> IF expression THEN statement . END
    (34) condition_nont -> IF expression THEN statement . ELSE statement END

    END             shift and go to state 104
    ELSE            shift and go to state 105


state 98

    (35) iteration_nont -> WHILE expression DO statement . LOOP

    LOOP            shift and go to state 106


state 99

    (37) iteration_nont -> FOR var COMMA expression . COMMA expression DO statement
    (38) iteration_nont -> FOR var COMMA expression . COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> FOR var COMMA expression . COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> FOR var COMMA expression . COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> FOR var COMMA expression . COMMA MINUSMINUS var DO statement

    COMMA           shift and go to state 107


state 100

    (21) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . RPAREN
    (22) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . COMMA ENDL RPAREN

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 109


state 101

    (25) expression_nont -> SETOUT LPAREN var COMMA var . COMMA RPAREN
    (26) expression_nont -> SETOUT LPAREN var COMMA var . COMMA ENDL RPAREN

    COMMA           shift and go to state 110


state 102

    (24) expression_nont -> SETOUT LPAREN var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 111


state 103

    (28) expression_nont -> GETIN LPAREN var COMMA var . RPAREN

    RPAREN          shift and go to state 112


state 104

    (33) condition_nont -> IF expression THEN statement END .

    END             reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    SETOUT          reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    GETIN           reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    ID              reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    PLUSPLUS        reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    MINUSMINUS      reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    empty           reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    IF              reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    WHILE           reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    FOR             reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    LPAREN          reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    NUMBER          reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    PROCCES         reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    ELSE            reduce using rule 33 (condition_nont -> IF expression THEN statement END .)
    LOOP            reduce using rule 33 (condition_nont -> IF expression THEN statement END .)


state 105

    (34) condition_nont -> IF expression THEN statement ELSE . statement END
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    END             reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    expression                     shift and go to state 36
    statement                      shift and go to state 113
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    var                            shift and go to state 39
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 106

    (35) iteration_nont -> WHILE expression DO statement LOOP .

    END             reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    SETOUT          reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    GETIN           reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    ID              reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    PLUSPLUS        reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    MINUSMINUS      reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    empty           reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    IF              reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    WHILE           reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    FOR             reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    LPAREN          reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    NUMBER          reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    PROCCES         reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    ELSE            reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)
    LOOP            reduce using rule 35 (iteration_nont -> WHILE expression DO statement LOOP .)


state 107

    (37) iteration_nont -> FOR var COMMA expression COMMA . expression DO statement
    (38) iteration_nont -> FOR var COMMA expression COMMA . var PLUSPLUS DO statement
    (39) iteration_nont -> FOR var COMMA expression COMMA . PLUSPLUS var DO statement
    (40) iteration_nont -> FOR var COMMA expression COMMA . var MINUSMINUS DO statement
    (41) iteration_nont -> FOR var COMMA expression COMMA . MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 117
    ID              shift and go to state 20
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

    var                            shift and go to state 114
    expression                     shift and go to state 115
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 108

    (21) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .

    END             reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    SETOUT          reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    GETIN           reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ID              reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    PLUSPLUS        reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    MINUSMINUS      reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    empty           reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    IF              reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    WHILE           reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FOR             reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LPAREN          reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    NUMBER          reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    PROCCES         reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ELSE            reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LOOP            reduce using rule 21 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)


state 109

    (22) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA . ENDL RPAREN

    ENDL            shift and go to state 118


state 110

    (25) expression_nont -> SETOUT LPAREN var COMMA var COMMA . RPAREN
    (26) expression_nont -> SETOUT LPAREN var COMMA var COMMA . ENDL RPAREN

    RPAREN          shift and go to state 119
    ENDL            shift and go to state 120


state 111

    (24) expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .

    END             reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    SETOUT          reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ID              reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    PLUSPLUS        reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    MINUSMINUS      reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    empty           reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    IF              reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FOR             reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    PROCCES         reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 24 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)


state 112

    (28) expression_nont -> GETIN LPAREN var COMMA var RPAREN .

    END             reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    SETOUT          reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    GETIN           reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ID              reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    PLUSPLUS        reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    MINUSMINUS      reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    empty           reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    IF              reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    WHILE           reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FOR             reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LPAREN          reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    NUMBER          reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    PROCCES         reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ELSE            reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LOOP            reduce using rule 28 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)


state 113

    (34) condition_nont -> IF expression THEN statement ELSE statement . END

    END             shift and go to state 121


state 114

    (38) iteration_nont -> FOR var COMMA expression COMMA var . PLUSPLUS DO statement
    (40) iteration_nont -> FOR var COMMA expression COMMA var . MINUSMINUS DO statement
    (42) expression -> var . EQUAL expression
    (66) factor -> var .

    PLUSPLUS        shift and go to state 122
    MINUSMINUS      shift and go to state 123
    EQUAL           shift and go to state 58
    TIMES           reduce using rule 66 (factor -> var .)
    DIVIDE          reduce using rule 66 (factor -> var .)
    LESS            reduce using rule 66 (factor -> var .)
    LESSEQUAL       reduce using rule 66 (factor -> var .)
    GREATER         reduce using rule 66 (factor -> var .)
    GREATEREQUAL    reduce using rule 66 (factor -> var .)
    DEQUAL          reduce using rule 66 (factor -> var .)
    DISTINT         reduce using rule 66 (factor -> var .)
    QUOTES          reduce using rule 66 (factor -> var .)
    PLUS            reduce using rule 66 (factor -> var .)
    MINUS           reduce using rule 66 (factor -> var .)
    DO              reduce using rule 66 (factor -> var .)


state 115

    (37) iteration_nont -> FOR var COMMA expression COMMA expression . DO statement

    DO              shift and go to state 124


state 116

    (39) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS . var DO statement
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 20

    var                            shift and go to state 125

state 117

    (41) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS . var DO statement
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 20

    var                            shift and go to state 126

state 118

    (22) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL . RPAREN

    RPAREN          shift and go to state 127


state 119

    (25) expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .

    END             reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    SETOUT          reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    GETIN           reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ID              reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    PLUSPLUS        reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    MINUSMINUS      reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    empty           reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    IF              reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    WHILE           reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FOR             reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LPAREN          reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    NUMBER          reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    PROCCES         reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ELSE            reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LOOP            reduce using rule 25 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)


state 120

    (26) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 128


state 121

    (34) condition_nont -> IF expression THEN statement ELSE statement END .

    END             reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    SETOUT          reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    GETIN           reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    ID              reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    PLUSPLUS        reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    MINUSMINUS      reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    empty           reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    IF              reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    WHILE           reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    FOR             reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    LPAREN          reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    NUMBER          reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    PROCCES         reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    ELSE            reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)
    LOOP            reduce using rule 34 (condition_nont -> IF expression THEN statement ELSE statement END .)


state 122

    (38) iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS . DO statement

    DO              shift and go to state 129


state 123

    (40) iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS . DO statement

    DO              shift and go to state 130


state 124

    (37) iteration_nont -> FOR var COMMA expression COMMA expression DO . statement
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    END             reduce using rule 36 (iteration_nont -> .)
    ELSE            reduce using rule 36 (iteration_nont -> .)
    LOOP            reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

  ! SETOUT          [ reduce using rule 36 (iteration_nont -> .) ]
  ! GETIN           [ reduce using rule 36 (iteration_nont -> .) ]
  ! ID              [ reduce using rule 36 (iteration_nont -> .) ]
  ! PLUSPLUS        [ reduce using rule 36 (iteration_nont -> .) ]
  ! MINUSMINUS      [ reduce using rule 36 (iteration_nont -> .) ]
  ! empty           [ reduce using rule 36 (iteration_nont -> .) ]
  ! IF              [ reduce using rule 36 (iteration_nont -> .) ]
  ! WHILE           [ reduce using rule 36 (iteration_nont -> .) ]
  ! FOR             [ reduce using rule 36 (iteration_nont -> .) ]
  ! LPAREN          [ reduce using rule 36 (iteration_nont -> .) ]
  ! NUMBER          [ reduce using rule 36 (iteration_nont -> .) ]
  ! PROCCES         [ reduce using rule 36 (iteration_nont -> .) ]

    var                            shift and go to state 39
    expression                     shift and go to state 36
    statement                      shift and go to state 131
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 125

    (39) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var . DO statement

    DO              shift and go to state 132


state 126

    (41) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var . DO statement

    DO              shift and go to state 133


state 127

    (22) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .

    END             reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    SETOUT          reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    GETIN           reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ID              reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    PLUSPLUS        reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    MINUSMINUS      reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    empty           reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    IF              reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    WHILE           reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FOR             reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    PROCCES         reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ELSE            reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LOOP            reduce using rule 22 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)


state 128

    (26) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .

    END             reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    SETOUT          reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ID              reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    PLUSPLUS        reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    MINUSMINUS      reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    empty           reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    IF              reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FOR             reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    PROCCES         reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)


state 129

    (38) iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO . statement
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    END             reduce using rule 36 (iteration_nont -> .)
    ELSE            reduce using rule 36 (iteration_nont -> .)
    LOOP            reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

  ! SETOUT          [ reduce using rule 36 (iteration_nont -> .) ]
  ! GETIN           [ reduce using rule 36 (iteration_nont -> .) ]
  ! ID              [ reduce using rule 36 (iteration_nont -> .) ]
  ! PLUSPLUS        [ reduce using rule 36 (iteration_nont -> .) ]
  ! MINUSMINUS      [ reduce using rule 36 (iteration_nont -> .) ]
  ! empty           [ reduce using rule 36 (iteration_nont -> .) ]
  ! IF              [ reduce using rule 36 (iteration_nont -> .) ]
  ! WHILE           [ reduce using rule 36 (iteration_nont -> .) ]
  ! FOR             [ reduce using rule 36 (iteration_nont -> .) ]
  ! LPAREN          [ reduce using rule 36 (iteration_nont -> .) ]
  ! NUMBER          [ reduce using rule 36 (iteration_nont -> .) ]
  ! PROCCES         [ reduce using rule 36 (iteration_nont -> .) ]

    var                            shift and go to state 39
    expression                     shift and go to state 36
    statement                      shift and go to state 134
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 130

    (40) iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO . statement
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    END             reduce using rule 36 (iteration_nont -> .)
    ELSE            reduce using rule 36 (iteration_nont -> .)
    LOOP            reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

  ! SETOUT          [ reduce using rule 36 (iteration_nont -> .) ]
  ! GETIN           [ reduce using rule 36 (iteration_nont -> .) ]
  ! ID              [ reduce using rule 36 (iteration_nont -> .) ]
  ! PLUSPLUS        [ reduce using rule 36 (iteration_nont -> .) ]
  ! MINUSMINUS      [ reduce using rule 36 (iteration_nont -> .) ]
  ! empty           [ reduce using rule 36 (iteration_nont -> .) ]
  ! IF              [ reduce using rule 36 (iteration_nont -> .) ]
  ! WHILE           [ reduce using rule 36 (iteration_nont -> .) ]
  ! FOR             [ reduce using rule 36 (iteration_nont -> .) ]
  ! LPAREN          [ reduce using rule 36 (iteration_nont -> .) ]
  ! NUMBER          [ reduce using rule 36 (iteration_nont -> .) ]
  ! PROCCES         [ reduce using rule 36 (iteration_nont -> .) ]

    var                            shift and go to state 39
    expression                     shift and go to state 36
    statement                      shift and go to state 135
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 131

    (37) iteration_nont -> FOR var COMMA expression COMMA expression DO statement .

    END             reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    SETOUT          reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    GETIN           reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    ID              reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    PLUSPLUS        reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    MINUSMINUS      reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    empty           reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    IF              reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    WHILE           reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    FOR             reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    LPAREN          reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    NUMBER          reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    PROCCES         reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    ELSE            reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)
    LOOP            reduce using rule 37 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement .)


state 132

    (39) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO . statement
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    END             reduce using rule 36 (iteration_nont -> .)
    ELSE            reduce using rule 36 (iteration_nont -> .)
    LOOP            reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

  ! SETOUT          [ reduce using rule 36 (iteration_nont -> .) ]
  ! GETIN           [ reduce using rule 36 (iteration_nont -> .) ]
  ! ID              [ reduce using rule 36 (iteration_nont -> .) ]
  ! PLUSPLUS        [ reduce using rule 36 (iteration_nont -> .) ]
  ! MINUSMINUS      [ reduce using rule 36 (iteration_nont -> .) ]
  ! empty           [ reduce using rule 36 (iteration_nont -> .) ]
  ! IF              [ reduce using rule 36 (iteration_nont -> .) ]
  ! WHILE           [ reduce using rule 36 (iteration_nont -> .) ]
  ! FOR             [ reduce using rule 36 (iteration_nont -> .) ]
  ! LPAREN          [ reduce using rule 36 (iteration_nont -> .) ]
  ! NUMBER          [ reduce using rule 36 (iteration_nont -> .) ]
  ! PROCCES         [ reduce using rule 36 (iteration_nont -> .) ]

    var                            shift and go to state 39
    expression                     shift and go to state 36
    statement                      shift and go to state 136
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 133

    (41) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO . statement
    (16) statement -> . expression_nont
    (17) statement -> . statements_nont
    (18) statement -> . condition_nont
    (19) statement -> . iteration_nont
    (20) expression_nont -> . expression
    (21) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (22) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (23) expression_nont -> . SETOUT LPAREN var RPAREN
    (24) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (27) expression_nont -> . GETIN LPAREN var RPAREN
    (28) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (29) expression_nont -> . ID PLUSPLUS
    (30) expression_nont -> . PLUSPLUS ID
    (31) expression_nont -> . ID MINUSMINUS
    (32) expression_nont -> . MINUSMINUS ID
    (14) statements_nont -> . statements_nont statement
    (15) statements_nont -> . empty
    (33) condition_nont -> . IF expression THEN statement END
    (34) condition_nont -> . IF expression THEN statement ELSE statement END
    (35) iteration_nont -> . WHILE expression DO statement LOOP
    (36) iteration_nont -> .
    (37) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement
    (38) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement
    (39) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement
    (40) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement
    (41) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement
    (42) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (43) var -> . ID
    (44) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (61) term -> . term mulop factor
    (62) term -> . factor
    (59) factor -> . call
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . var
    (67) factor -> . NUMBER
    (60) call -> . PROCCES ID

  ! shift/reduce conflict for SETOUT resolved as shift
  ! shift/reduce conflict for GETIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for PROCCES resolved as shift
    SETOUT          shift and go to state 37
    GETIN           shift and go to state 40
    ID              shift and go to state 29
    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    empty           shift and go to state 25
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    END             reduce using rule 36 (iteration_nont -> .)
    ELSE            reduce using rule 36 (iteration_nont -> .)
    LOOP            reduce using rule 36 (iteration_nont -> .)
    FOR             shift and go to state 45
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 51
    PROCCES         shift and go to state 28

  ! SETOUT          [ reduce using rule 36 (iteration_nont -> .) ]
  ! GETIN           [ reduce using rule 36 (iteration_nont -> .) ]
  ! ID              [ reduce using rule 36 (iteration_nont -> .) ]
  ! PLUSPLUS        [ reduce using rule 36 (iteration_nont -> .) ]
  ! MINUSMINUS      [ reduce using rule 36 (iteration_nont -> .) ]
  ! empty           [ reduce using rule 36 (iteration_nont -> .) ]
  ! IF              [ reduce using rule 36 (iteration_nont -> .) ]
  ! WHILE           [ reduce using rule 36 (iteration_nont -> .) ]
  ! FOR             [ reduce using rule 36 (iteration_nont -> .) ]
  ! LPAREN          [ reduce using rule 36 (iteration_nont -> .) ]
  ! NUMBER          [ reduce using rule 36 (iteration_nont -> .) ]
  ! PROCCES         [ reduce using rule 36 (iteration_nont -> .) ]

    var                            shift and go to state 39
    expression                     shift and go to state 36
    statement                      shift and go to state 137
    expression_nont                shift and go to state 33
    statements_nont                shift and go to state 30
    condition_nont                 shift and go to state 34
    iteration_nont                 shift and go to state 35
    simple_expression              shift and go to state 46
    additive_expression            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49
    call                           shift and go to state 50

state 134

    (38) iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .

    END             reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    SETOUT          reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    GETIN           reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    ID              reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    PLUSPLUS        reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    MINUSMINUS      reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    empty           reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    IF              reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    WHILE           reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    FOR             reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    LPAREN          reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    NUMBER          reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    PROCCES         reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    ELSE            reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)
    LOOP            reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement .)


state 135

    (40) iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .

    END             reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    SETOUT          reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    GETIN           reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    ID              reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    PLUSPLUS        reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    MINUSMINUS      reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    empty           reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    IF              reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    WHILE           reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    FOR             reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    LPAREN          reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    NUMBER          reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    PROCCES         reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    ELSE            reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)
    LOOP            reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement .)


state 136

    (39) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .

    END             reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    SETOUT          reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    GETIN           reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    ID              reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    PLUSPLUS        reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    MINUSMINUS      reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    empty           reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    IF              reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    WHILE           reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    FOR             reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    LPAREN          reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    NUMBER          reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    PROCCES         reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    ELSE            reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)
    LOOP            reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement .)


state 137

    (41) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .

    END             reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    SETOUT          reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    GETIN           reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    ID              reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    PLUSPLUS        reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    MINUSMINUS      reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    empty           reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    IF              reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    WHILE           reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    FOR             reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    LPAREN          reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    NUMBER          reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    PROCCES         reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    ELSE            reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)
    LOOP            reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for END in state 24 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 24 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 24 resolved as shift
WARNING: shift/reduce conflict for ID in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for empty in state 24 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 24 resolved as shift
WARNING: shift/reduce conflict for FOR in state 24 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 24 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 24 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 29 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 30 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for empty in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 30 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 30 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for empty in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 30 resolved as shift
WARNING: shift/reduce conflict for FOR in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 30 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 124 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for empty in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 124 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 124 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 124 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 129 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for empty in state 129 resolved as shift
WARNING: shift/reduce conflict for IF in state 129 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 129 resolved as shift
WARNING: shift/reduce conflict for FOR in state 129 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 129 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 129 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 130 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for empty in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 130 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 130 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 132 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for empty in state 132 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 132 resolved as shift
WARNING: shift/reduce conflict for FOR in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 132 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 132 resolved as shift
WARNING: shift/reduce conflict for SETOUT in state 133 resolved as shift
WARNING: shift/reduce conflict for GETIN in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for empty in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 133 resolved as shift
WARNING: shift/reduce conflict for PROCCES in state 133 resolved as shift
WARNING: reduce/reduce conflict in state 30 resolved using rule (statement -> statements_nont)
WARNING: rejected rule (iteration_nont -> <empty>) in state 30
