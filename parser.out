Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> START program_main END
Rule 2     program_main -> program_sequence main_declaration
Rule 3     main_declaration -> MAIN COLON statements_nont END
Rule 4     program_sequence -> program_sequence
Rule 5     program_sequence -> statements_nont
Rule 6     program_sequence -> PROCESS_declaration
Rule 7     var_declaration -> var_type ID
Rule 8     var_declaration -> var_type ID COMMA ID
Rule 9     var_declaration -> var_type ID EQUAL NUMBER
Rule 10    var_declaration -> var_type ID EQUAL var
Rule 11    var_type -> INT
Rule 12    var_type -> FLOAT
Rule 13    var_declaration -> var_type ID dimensiones
Rule 14    dimensiones -> dimensiones LBRACKET expression RBRACKET
Rule 15    dimensiones -> LBRACKET expression RBRACKET
Rule 16    PROCESS_declaration -> PROCESS ID DO statements_nont END
Rule 17    statements_nont -> statements_nont statement
Rule 18    statements_nont -> statement
Rule 19    statement -> expression_nont
Rule 20    statement -> condition_nont
Rule 21    statement -> iteration_nont
Rule 22    statement -> var_declaration
Rule 23    statement -> call
Rule 24    expression_nont -> expression
Rule 25    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN
Rule 26    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
Rule 27    expression_nont -> SETOUT LPAREN var RPAREN
Rule 28    expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN
Rule 29    expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN
Rule 30    expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
Rule 31    expression_nont -> GETIN LPAREN var RPAREN
Rule 32    expression_nont -> GETIN LPAREN var COMMA var RPAREN
Rule 33    expression_nont -> ID PLUSPLUS
Rule 34    expression_nont -> ID MINUSMINUS
Rule 35    condition_nont -> IF expression THEN statements_nont END
Rule 36    condition_nont -> IF expression THEN statements_nont ELSE statements_nont END
Rule 37    iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP
Rule 38    iteration_nont -> WHILE expression DO statements_nont LOOP
Rule 39    expression -> var EQUAL expression
Rule 40    var -> ID
Rule 41    var -> var ID LBRACKET expression RBRACKET
Rule 42    var -> ID vardimen
Rule 43    vardimen -> vardimen LBRACKET expression RBRACKET
Rule 44    vardimen -> LBRACKET expression RBRACKET
Rule 45    expression -> simple_expression
Rule 46    simple_expression -> additive_expression checkop additive_expression
Rule 47    simple_expression -> additive_expression
Rule 48    checkop -> LESS
Rule 49    checkop -> LESSEQUAL
Rule 50    checkop -> GREATER
Rule 51    checkop -> GREATEREQUAL
Rule 52    checkop -> DEQUAL
Rule 53    checkop -> DISTINT
Rule 54    additive_expression -> additive_expression addop term
Rule 55    additive_expression -> term
Rule 56    addop -> PLUS
Rule 57    addop -> MINUS
Rule 58    factor -> LPAREN expression RPAREN
Rule 59    factor -> var
Rule 60    factor -> NUMBER
Rule 61    call -> CALL LPAREN ID RPAREN
Rule 62    term -> term mulop factor
Rule 63    term -> factor
Rule 64    mulop -> TIMES
Rule 65    mulop -> DIVIDE

Terminals, with rules where they appear

ARROW                : 37
CALL                 : 61
COLON                : 3
COMMA                : 8 26 28 29 29 30 30 32
DEQUAL               : 52
DISTINT              : 53
DIVIDE               : 65
DO                   : 16 37 38
ELSE                 : 36
END                  : 1 3 16 35 36
ENDL                 : 26 28 30
EQUAL                : 9 10 39
FLOAT                : 12
FOR                  : 37
GETIN                : 31 32
GREATER              : 50
GREATEREQUAL         : 51
ID                   : 7 8 8 9 10 13 16 25 26 33 34 40 41 42 61
IF                   : 35 36
INT                  : 11
LBRACKET             : 14 15 41 43 44
LESS                 : 48
LESSEQUAL            : 49
LOOP                 : 37 38
LPAREN               : 25 26 27 28 29 30 31 32 58 61
MAIN                 : 3
MINUS                : 57
MINUSMINUS           : 34
NUMBER               : 9 60
PLUS                 : 56
PLUSPLUS             : 33
PROCESS              : 16
QUOTES               : 25 25 26 26
RBRACKET             : 14 15 41 43 44
RPAREN               : 25 26 27 28 29 30 31 32 58 61
SETOUT               : 25 26 27 28 29 30
START                : 1
THEN                 : 35 36
TIMES                : 64
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

PROCESS_declaration  : 6
additive_expression  : 46 46 47 54
addop                : 54
call                 : 23
checkop              : 46
condition_nont       : 20
dimensiones          : 13 14
expression           : 14 15 24 35 36 37 37 38 39 41 43 44 58
expression_nont      : 19
factor               : 62 63
iteration_nont       : 21
main_declaration     : 2
mulop                : 62
program              : 0
program_main         : 1
program_sequence     : 2 4
simple_expression    : 45
statement            : 17 18
statements_nont      : 3 5 16 17 35 36 36 37 38
term                 : 54 55 62
var                  : 10 27 28 29 29 30 30 31 32 32 39 41 59
var_declaration      : 22
var_type             : 7 8 9 10 13
vardimen             : 42 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START program_main END

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . program_main END
    (2) program_main -> . program_sequence main_declaration
    (4) program_sequence -> . program_sequence
    (5) program_sequence -> . statements_nont
    (6) program_sequence -> . PROCESS_declaration
    (17) statements_nont -> . statements_nont statement
    (18) statements_nont -> . statement
    (16) PROCESS_declaration -> . PROCESS ID DO statements_nont END
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    PROCESS         shift and go to state 8
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    program_main                   shift and go to state 3
    program_sequence               shift and go to state 4
    statements_nont                shift and go to state 5
    PROCESS_declaration            shift and go to state 6
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 3

    (1) program -> START program_main . END

    END             shift and go to state 32


state 4

    (2) program_main -> program_sequence . main_declaration
    (4) program_sequence -> program_sequence .
    (3) main_declaration -> . MAIN COLON statements_nont END

  ! shift/reduce conflict for MAIN resolved as shift
    MAIN            shift and go to state 34

  ! MAIN            [ reduce using rule 4 (program_sequence -> program_sequence .) ]

    main_declaration               shift and go to state 33

state 5

    (5) program_sequence -> statements_nont .
    (17) statements_nont -> statements_nont . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    MAIN            reduce using rule 5 (program_sequence -> statements_nont .)
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 6

    (6) program_sequence -> PROCESS_declaration .

    MAIN            reduce using rule 6 (program_sequence -> PROCESS_declaration .)


state 7

    (18) statements_nont -> statement .

    SETOUT          reduce using rule 18 (statements_nont -> statement .)
    GETIN           reduce using rule 18 (statements_nont -> statement .)
    ID              reduce using rule 18 (statements_nont -> statement .)
    IF              reduce using rule 18 (statements_nont -> statement .)
    FOR             reduce using rule 18 (statements_nont -> statement .)
    WHILE           reduce using rule 18 (statements_nont -> statement .)
    CALL            reduce using rule 18 (statements_nont -> statement .)
    INT             reduce using rule 18 (statements_nont -> statement .)
    FLOAT           reduce using rule 18 (statements_nont -> statement .)
    LPAREN          reduce using rule 18 (statements_nont -> statement .)
    NUMBER          reduce using rule 18 (statements_nont -> statement .)
    MAIN            reduce using rule 18 (statements_nont -> statement .)
    END             reduce using rule 18 (statements_nont -> statement .)
    ELSE            reduce using rule 18 (statements_nont -> statement .)
    LOOP            reduce using rule 18 (statements_nont -> statement .)


state 8

    (16) PROCESS_declaration -> PROCESS . ID DO statements_nont END

    ID              shift and go to state 36


state 9

    (33) expression_nont -> ID . PLUSPLUS
    (34) expression_nont -> ID . MINUSMINUS
    (40) var -> ID .
    (42) var -> ID . vardimen
    (43) vardimen -> . vardimen LBRACKET expression RBRACKET
    (44) vardimen -> . LBRACKET expression RBRACKET

    PLUSPLUS        shift and go to state 37
    MINUSMINUS      shift and go to state 38
    EQUAL           reduce using rule 40 (var -> ID .)
    ID              reduce using rule 40 (var -> ID .)
    TIMES           reduce using rule 40 (var -> ID .)
    DIVIDE          reduce using rule 40 (var -> ID .)
    LESS            reduce using rule 40 (var -> ID .)
    LESSEQUAL       reduce using rule 40 (var -> ID .)
    GREATER         reduce using rule 40 (var -> ID .)
    GREATEREQUAL    reduce using rule 40 (var -> ID .)
    DEQUAL          reduce using rule 40 (var -> ID .)
    DISTINT         reduce using rule 40 (var -> ID .)
    PLUS            reduce using rule 40 (var -> ID .)
    MINUS           reduce using rule 40 (var -> ID .)
    SETOUT          reduce using rule 40 (var -> ID .)
    GETIN           reduce using rule 40 (var -> ID .)
    IF              reduce using rule 40 (var -> ID .)
    FOR             reduce using rule 40 (var -> ID .)
    WHILE           reduce using rule 40 (var -> ID .)
    CALL            reduce using rule 40 (var -> ID .)
    INT             reduce using rule 40 (var -> ID .)
    FLOAT           reduce using rule 40 (var -> ID .)
    LPAREN          reduce using rule 40 (var -> ID .)
    NUMBER          reduce using rule 40 (var -> ID .)
    MAIN            reduce using rule 40 (var -> ID .)
    END             reduce using rule 40 (var -> ID .)
    ELSE            reduce using rule 40 (var -> ID .)
    LOOP            reduce using rule 40 (var -> ID .)
    LBRACKET        shift and go to state 40

    vardimen                       shift and go to state 39

state 10

    (19) statement -> expression_nont .

    SETOUT          reduce using rule 19 (statement -> expression_nont .)
    GETIN           reduce using rule 19 (statement -> expression_nont .)
    ID              reduce using rule 19 (statement -> expression_nont .)
    IF              reduce using rule 19 (statement -> expression_nont .)
    FOR             reduce using rule 19 (statement -> expression_nont .)
    WHILE           reduce using rule 19 (statement -> expression_nont .)
    CALL            reduce using rule 19 (statement -> expression_nont .)
    INT             reduce using rule 19 (statement -> expression_nont .)
    FLOAT           reduce using rule 19 (statement -> expression_nont .)
    LPAREN          reduce using rule 19 (statement -> expression_nont .)
    NUMBER          reduce using rule 19 (statement -> expression_nont .)
    MAIN            reduce using rule 19 (statement -> expression_nont .)
    END             reduce using rule 19 (statement -> expression_nont .)
    ELSE            reduce using rule 19 (statement -> expression_nont .)
    LOOP            reduce using rule 19 (statement -> expression_nont .)


state 11

    (20) statement -> condition_nont .

    SETOUT          reduce using rule 20 (statement -> condition_nont .)
    GETIN           reduce using rule 20 (statement -> condition_nont .)
    ID              reduce using rule 20 (statement -> condition_nont .)
    IF              reduce using rule 20 (statement -> condition_nont .)
    FOR             reduce using rule 20 (statement -> condition_nont .)
    WHILE           reduce using rule 20 (statement -> condition_nont .)
    CALL            reduce using rule 20 (statement -> condition_nont .)
    INT             reduce using rule 20 (statement -> condition_nont .)
    FLOAT           reduce using rule 20 (statement -> condition_nont .)
    LPAREN          reduce using rule 20 (statement -> condition_nont .)
    NUMBER          reduce using rule 20 (statement -> condition_nont .)
    MAIN            reduce using rule 20 (statement -> condition_nont .)
    END             reduce using rule 20 (statement -> condition_nont .)
    ELSE            reduce using rule 20 (statement -> condition_nont .)
    LOOP            reduce using rule 20 (statement -> condition_nont .)


state 12

    (21) statement -> iteration_nont .

    SETOUT          reduce using rule 21 (statement -> iteration_nont .)
    GETIN           reduce using rule 21 (statement -> iteration_nont .)
    ID              reduce using rule 21 (statement -> iteration_nont .)
    IF              reduce using rule 21 (statement -> iteration_nont .)
    FOR             reduce using rule 21 (statement -> iteration_nont .)
    WHILE           reduce using rule 21 (statement -> iteration_nont .)
    CALL            reduce using rule 21 (statement -> iteration_nont .)
    INT             reduce using rule 21 (statement -> iteration_nont .)
    FLOAT           reduce using rule 21 (statement -> iteration_nont .)
    LPAREN          reduce using rule 21 (statement -> iteration_nont .)
    NUMBER          reduce using rule 21 (statement -> iteration_nont .)
    MAIN            reduce using rule 21 (statement -> iteration_nont .)
    END             reduce using rule 21 (statement -> iteration_nont .)
    ELSE            reduce using rule 21 (statement -> iteration_nont .)
    LOOP            reduce using rule 21 (statement -> iteration_nont .)


state 13

    (22) statement -> var_declaration .

    SETOUT          reduce using rule 22 (statement -> var_declaration .)
    GETIN           reduce using rule 22 (statement -> var_declaration .)
    ID              reduce using rule 22 (statement -> var_declaration .)
    IF              reduce using rule 22 (statement -> var_declaration .)
    FOR             reduce using rule 22 (statement -> var_declaration .)
    WHILE           reduce using rule 22 (statement -> var_declaration .)
    CALL            reduce using rule 22 (statement -> var_declaration .)
    INT             reduce using rule 22 (statement -> var_declaration .)
    FLOAT           reduce using rule 22 (statement -> var_declaration .)
    LPAREN          reduce using rule 22 (statement -> var_declaration .)
    NUMBER          reduce using rule 22 (statement -> var_declaration .)
    MAIN            reduce using rule 22 (statement -> var_declaration .)
    END             reduce using rule 22 (statement -> var_declaration .)
    ELSE            reduce using rule 22 (statement -> var_declaration .)
    LOOP            reduce using rule 22 (statement -> var_declaration .)


state 14

    (23) statement -> call .

    SETOUT          reduce using rule 23 (statement -> call .)
    GETIN           reduce using rule 23 (statement -> call .)
    ID              reduce using rule 23 (statement -> call .)
    IF              reduce using rule 23 (statement -> call .)
    FOR             reduce using rule 23 (statement -> call .)
    WHILE           reduce using rule 23 (statement -> call .)
    CALL            reduce using rule 23 (statement -> call .)
    INT             reduce using rule 23 (statement -> call .)
    FLOAT           reduce using rule 23 (statement -> call .)
    LPAREN          reduce using rule 23 (statement -> call .)
    NUMBER          reduce using rule 23 (statement -> call .)
    MAIN            reduce using rule 23 (statement -> call .)
    END             reduce using rule 23 (statement -> call .)
    ELSE            reduce using rule 23 (statement -> call .)
    LOOP            reduce using rule 23 (statement -> call .)


state 15

    (24) expression_nont -> expression .

    SETOUT          reduce using rule 24 (expression_nont -> expression .)
    GETIN           reduce using rule 24 (expression_nont -> expression .)
    ID              reduce using rule 24 (expression_nont -> expression .)
    IF              reduce using rule 24 (expression_nont -> expression .)
    FOR             reduce using rule 24 (expression_nont -> expression .)
    WHILE           reduce using rule 24 (expression_nont -> expression .)
    CALL            reduce using rule 24 (expression_nont -> expression .)
    INT             reduce using rule 24 (expression_nont -> expression .)
    FLOAT           reduce using rule 24 (expression_nont -> expression .)
    LPAREN          reduce using rule 24 (expression_nont -> expression .)
    NUMBER          reduce using rule 24 (expression_nont -> expression .)
    MAIN            reduce using rule 24 (expression_nont -> expression .)
    END             reduce using rule 24 (expression_nont -> expression .)
    ELSE            reduce using rule 24 (expression_nont -> expression .)
    LOOP            reduce using rule 24 (expression_nont -> expression .)


state 16

    (25) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> SETOUT . LPAREN var RPAREN
    (28) expression_nont -> SETOUT . LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> SETOUT . LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> SETOUT . LPAREN var COMMA var COMMA ENDL RPAREN

    LPAREN          shift and go to state 41


state 17

    (58) factor -> LPAREN . expression RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 42
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 18

    (39) expression -> var . EQUAL expression
    (41) var -> var . ID LBRACKET expression RBRACKET
    (59) factor -> var .

  ! shift/reduce conflict for ID resolved as shift
    EQUAL           shift and go to state 44
    ID              shift and go to state 45
    TIMES           reduce using rule 59 (factor -> var .)
    DIVIDE          reduce using rule 59 (factor -> var .)
    LESS            reduce using rule 59 (factor -> var .)
    LESSEQUAL       reduce using rule 59 (factor -> var .)
    GREATER         reduce using rule 59 (factor -> var .)
    GREATEREQUAL    reduce using rule 59 (factor -> var .)
    DEQUAL          reduce using rule 59 (factor -> var .)
    DISTINT         reduce using rule 59 (factor -> var .)
    PLUS            reduce using rule 59 (factor -> var .)
    MINUS           reduce using rule 59 (factor -> var .)
    SETOUT          reduce using rule 59 (factor -> var .)
    GETIN           reduce using rule 59 (factor -> var .)
    IF              reduce using rule 59 (factor -> var .)
    FOR             reduce using rule 59 (factor -> var .)
    WHILE           reduce using rule 59 (factor -> var .)
    CALL            reduce using rule 59 (factor -> var .)
    INT             reduce using rule 59 (factor -> var .)
    FLOAT           reduce using rule 59 (factor -> var .)
    LPAREN          reduce using rule 59 (factor -> var .)
    NUMBER          reduce using rule 59 (factor -> var .)
    MAIN            reduce using rule 59 (factor -> var .)
    RPAREN          reduce using rule 59 (factor -> var .)
    THEN            reduce using rule 59 (factor -> var .)
    ARROW           reduce using rule 59 (factor -> var .)
    DO              reduce using rule 59 (factor -> var .)
    RBRACKET        reduce using rule 59 (factor -> var .)
    END             reduce using rule 59 (factor -> var .)
    ELSE            reduce using rule 59 (factor -> var .)
    LOOP            reduce using rule 59 (factor -> var .)

  ! ID              [ reduce using rule 59 (factor -> var .) ]


state 19

    (31) expression_nont -> GETIN . LPAREN var RPAREN
    (32) expression_nont -> GETIN . LPAREN var COMMA var RPAREN

    LPAREN          shift and go to state 46


state 20

    (35) condition_nont -> IF . expression THEN statements_nont END
    (36) condition_nont -> IF . expression THEN statements_nont ELSE statements_nont END
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 47
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 21

    (37) iteration_nont -> FOR . expression ARROW expression DO statements_nont LOOP
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 48
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 22

    (38) iteration_nont -> WHILE . expression DO statements_nont LOOP
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 49
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 23

    (7) var_declaration -> var_type . ID
    (8) var_declaration -> var_type . ID COMMA ID
    (9) var_declaration -> var_type . ID EQUAL NUMBER
    (10) var_declaration -> var_type . ID EQUAL var
    (13) var_declaration -> var_type . ID dimensiones

    ID              shift and go to state 50


state 24

    (60) factor -> NUMBER .

    TIMES           reduce using rule 60 (factor -> NUMBER .)
    DIVIDE          reduce using rule 60 (factor -> NUMBER .)
    LESS            reduce using rule 60 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 60 (factor -> NUMBER .)
    GREATER         reduce using rule 60 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 60 (factor -> NUMBER .)
    DEQUAL          reduce using rule 60 (factor -> NUMBER .)
    DISTINT         reduce using rule 60 (factor -> NUMBER .)
    PLUS            reduce using rule 60 (factor -> NUMBER .)
    MINUS           reduce using rule 60 (factor -> NUMBER .)
    SETOUT          reduce using rule 60 (factor -> NUMBER .)
    GETIN           reduce using rule 60 (factor -> NUMBER .)
    ID              reduce using rule 60 (factor -> NUMBER .)
    IF              reduce using rule 60 (factor -> NUMBER .)
    FOR             reduce using rule 60 (factor -> NUMBER .)
    WHILE           reduce using rule 60 (factor -> NUMBER .)
    CALL            reduce using rule 60 (factor -> NUMBER .)
    INT             reduce using rule 60 (factor -> NUMBER .)
    FLOAT           reduce using rule 60 (factor -> NUMBER .)
    LPAREN          reduce using rule 60 (factor -> NUMBER .)
    NUMBER          reduce using rule 60 (factor -> NUMBER .)
    MAIN            reduce using rule 60 (factor -> NUMBER .)
    RPAREN          reduce using rule 60 (factor -> NUMBER .)
    THEN            reduce using rule 60 (factor -> NUMBER .)
    ARROW           reduce using rule 60 (factor -> NUMBER .)
    DO              reduce using rule 60 (factor -> NUMBER .)
    RBRACKET        reduce using rule 60 (factor -> NUMBER .)
    END             reduce using rule 60 (factor -> NUMBER .)
    ELSE            reduce using rule 60 (factor -> NUMBER .)
    LOOP            reduce using rule 60 (factor -> NUMBER .)


state 25

    (61) call -> CALL . LPAREN ID RPAREN

    LPAREN          shift and go to state 51


state 26

    (45) expression -> simple_expression .

    SETOUT          reduce using rule 45 (expression -> simple_expression .)
    GETIN           reduce using rule 45 (expression -> simple_expression .)
    ID              reduce using rule 45 (expression -> simple_expression .)
    IF              reduce using rule 45 (expression -> simple_expression .)
    FOR             reduce using rule 45 (expression -> simple_expression .)
    WHILE           reduce using rule 45 (expression -> simple_expression .)
    CALL            reduce using rule 45 (expression -> simple_expression .)
    INT             reduce using rule 45 (expression -> simple_expression .)
    FLOAT           reduce using rule 45 (expression -> simple_expression .)
    LPAREN          reduce using rule 45 (expression -> simple_expression .)
    NUMBER          reduce using rule 45 (expression -> simple_expression .)
    MAIN            reduce using rule 45 (expression -> simple_expression .)
    RPAREN          reduce using rule 45 (expression -> simple_expression .)
    THEN            reduce using rule 45 (expression -> simple_expression .)
    ARROW           reduce using rule 45 (expression -> simple_expression .)
    DO              reduce using rule 45 (expression -> simple_expression .)
    RBRACKET        reduce using rule 45 (expression -> simple_expression .)
    END             reduce using rule 45 (expression -> simple_expression .)
    ELSE            reduce using rule 45 (expression -> simple_expression .)
    LOOP            reduce using rule 45 (expression -> simple_expression .)


state 27

    (11) var_type -> INT .

    ID              reduce using rule 11 (var_type -> INT .)


state 28

    (12) var_type -> FLOAT .

    ID              reduce using rule 12 (var_type -> FLOAT .)


state 29

    (46) simple_expression -> additive_expression . checkop additive_expression
    (47) simple_expression -> additive_expression .
    (54) additive_expression -> additive_expression . addop term
    (48) checkop -> . LESS
    (49) checkop -> . LESSEQUAL
    (50) checkop -> . GREATER
    (51) checkop -> . GREATEREQUAL
    (52) checkop -> . DEQUAL
    (53) checkop -> . DISTINT
    (56) addop -> . PLUS
    (57) addop -> . MINUS

    SETOUT          reduce using rule 47 (simple_expression -> additive_expression .)
    GETIN           reduce using rule 47 (simple_expression -> additive_expression .)
    ID              reduce using rule 47 (simple_expression -> additive_expression .)
    IF              reduce using rule 47 (simple_expression -> additive_expression .)
    FOR             reduce using rule 47 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 47 (simple_expression -> additive_expression .)
    CALL            reduce using rule 47 (simple_expression -> additive_expression .)
    INT             reduce using rule 47 (simple_expression -> additive_expression .)
    FLOAT           reduce using rule 47 (simple_expression -> additive_expression .)
    LPAREN          reduce using rule 47 (simple_expression -> additive_expression .)
    NUMBER          reduce using rule 47 (simple_expression -> additive_expression .)
    MAIN            reduce using rule 47 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 47 (simple_expression -> additive_expression .)
    THEN            reduce using rule 47 (simple_expression -> additive_expression .)
    ARROW           reduce using rule 47 (simple_expression -> additive_expression .)
    DO              reduce using rule 47 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 47 (simple_expression -> additive_expression .)
    END             reduce using rule 47 (simple_expression -> additive_expression .)
    ELSE            reduce using rule 47 (simple_expression -> additive_expression .)
    LOOP            reduce using rule 47 (simple_expression -> additive_expression .)
    LESS            shift and go to state 54
    LESSEQUAL       shift and go to state 55
    GREATER         shift and go to state 56
    GREATEREQUAL    shift and go to state 57
    DEQUAL          shift and go to state 58
    DISTINT         shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61

    checkop                        shift and go to state 52
    addop                          shift and go to state 53

state 30

    (55) additive_expression -> term .
    (62) term -> term . mulop factor
    (64) mulop -> . TIMES
    (65) mulop -> . DIVIDE

    LESS            reduce using rule 55 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 55 (additive_expression -> term .)
    GREATER         reduce using rule 55 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 55 (additive_expression -> term .)
    DEQUAL          reduce using rule 55 (additive_expression -> term .)
    DISTINT         reduce using rule 55 (additive_expression -> term .)
    PLUS            reduce using rule 55 (additive_expression -> term .)
    MINUS           reduce using rule 55 (additive_expression -> term .)
    SETOUT          reduce using rule 55 (additive_expression -> term .)
    GETIN           reduce using rule 55 (additive_expression -> term .)
    ID              reduce using rule 55 (additive_expression -> term .)
    IF              reduce using rule 55 (additive_expression -> term .)
    FOR             reduce using rule 55 (additive_expression -> term .)
    WHILE           reduce using rule 55 (additive_expression -> term .)
    CALL            reduce using rule 55 (additive_expression -> term .)
    INT             reduce using rule 55 (additive_expression -> term .)
    FLOAT           reduce using rule 55 (additive_expression -> term .)
    LPAREN          reduce using rule 55 (additive_expression -> term .)
    NUMBER          reduce using rule 55 (additive_expression -> term .)
    MAIN            reduce using rule 55 (additive_expression -> term .)
    RPAREN          reduce using rule 55 (additive_expression -> term .)
    THEN            reduce using rule 55 (additive_expression -> term .)
    ARROW           reduce using rule 55 (additive_expression -> term .)
    DO              reduce using rule 55 (additive_expression -> term .)
    RBRACKET        reduce using rule 55 (additive_expression -> term .)
    END             reduce using rule 55 (additive_expression -> term .)
    ELSE            reduce using rule 55 (additive_expression -> term .)
    LOOP            reduce using rule 55 (additive_expression -> term .)
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

    mulop                          shift and go to state 62

state 31

    (63) term -> factor .

    TIMES           reduce using rule 63 (term -> factor .)
    DIVIDE          reduce using rule 63 (term -> factor .)
    LESS            reduce using rule 63 (term -> factor .)
    LESSEQUAL       reduce using rule 63 (term -> factor .)
    GREATER         reduce using rule 63 (term -> factor .)
    GREATEREQUAL    reduce using rule 63 (term -> factor .)
    DEQUAL          reduce using rule 63 (term -> factor .)
    DISTINT         reduce using rule 63 (term -> factor .)
    PLUS            reduce using rule 63 (term -> factor .)
    MINUS           reduce using rule 63 (term -> factor .)
    SETOUT          reduce using rule 63 (term -> factor .)
    GETIN           reduce using rule 63 (term -> factor .)
    ID              reduce using rule 63 (term -> factor .)
    IF              reduce using rule 63 (term -> factor .)
    FOR             reduce using rule 63 (term -> factor .)
    WHILE           reduce using rule 63 (term -> factor .)
    CALL            reduce using rule 63 (term -> factor .)
    INT             reduce using rule 63 (term -> factor .)
    FLOAT           reduce using rule 63 (term -> factor .)
    LPAREN          reduce using rule 63 (term -> factor .)
    NUMBER          reduce using rule 63 (term -> factor .)
    MAIN            reduce using rule 63 (term -> factor .)
    RPAREN          reduce using rule 63 (term -> factor .)
    THEN            reduce using rule 63 (term -> factor .)
    ARROW           reduce using rule 63 (term -> factor .)
    DO              reduce using rule 63 (term -> factor .)
    RBRACKET        reduce using rule 63 (term -> factor .)
    END             reduce using rule 63 (term -> factor .)
    ELSE            reduce using rule 63 (term -> factor .)
    LOOP            reduce using rule 63 (term -> factor .)


state 32

    (1) program -> START program_main END .

    $end            reduce using rule 1 (program -> START program_main END .)


state 33

    (2) program_main -> program_sequence main_declaration .

    END             reduce using rule 2 (program_main -> program_sequence main_declaration .)


state 34

    (3) main_declaration -> MAIN . COLON statements_nont END

    COLON           shift and go to state 65


state 35

    (17) statements_nont -> statements_nont statement .

    SETOUT          reduce using rule 17 (statements_nont -> statements_nont statement .)
    GETIN           reduce using rule 17 (statements_nont -> statements_nont statement .)
    ID              reduce using rule 17 (statements_nont -> statements_nont statement .)
    IF              reduce using rule 17 (statements_nont -> statements_nont statement .)
    FOR             reduce using rule 17 (statements_nont -> statements_nont statement .)
    WHILE           reduce using rule 17 (statements_nont -> statements_nont statement .)
    CALL            reduce using rule 17 (statements_nont -> statements_nont statement .)
    INT             reduce using rule 17 (statements_nont -> statements_nont statement .)
    FLOAT           reduce using rule 17 (statements_nont -> statements_nont statement .)
    LPAREN          reduce using rule 17 (statements_nont -> statements_nont statement .)
    NUMBER          reduce using rule 17 (statements_nont -> statements_nont statement .)
    MAIN            reduce using rule 17 (statements_nont -> statements_nont statement .)
    END             reduce using rule 17 (statements_nont -> statements_nont statement .)
    ELSE            reduce using rule 17 (statements_nont -> statements_nont statement .)
    LOOP            reduce using rule 17 (statements_nont -> statements_nont statement .)


state 36

    (16) PROCESS_declaration -> PROCESS ID . DO statements_nont END

    DO              shift and go to state 66


state 37

    (33) expression_nont -> ID PLUSPLUS .

    SETOUT          reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    GETIN           reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    ID              reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    IF              reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    FOR             reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    WHILE           reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    CALL            reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    INT             reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    FLOAT           reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    LPAREN          reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    NUMBER          reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    MAIN            reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    END             reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    ELSE            reduce using rule 33 (expression_nont -> ID PLUSPLUS .)
    LOOP            reduce using rule 33 (expression_nont -> ID PLUSPLUS .)


state 38

    (34) expression_nont -> ID MINUSMINUS .

    SETOUT          reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    GETIN           reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    ID              reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    IF              reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    FOR             reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    WHILE           reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    CALL            reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    INT             reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    FLOAT           reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    LPAREN          reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    NUMBER          reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    MAIN            reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    END             reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    ELSE            reduce using rule 34 (expression_nont -> ID MINUSMINUS .)
    LOOP            reduce using rule 34 (expression_nont -> ID MINUSMINUS .)


state 39

    (42) var -> ID vardimen .
    (43) vardimen -> vardimen . LBRACKET expression RBRACKET

    EQUAL           reduce using rule 42 (var -> ID vardimen .)
    ID              reduce using rule 42 (var -> ID vardimen .)
    TIMES           reduce using rule 42 (var -> ID vardimen .)
    DIVIDE          reduce using rule 42 (var -> ID vardimen .)
    LESS            reduce using rule 42 (var -> ID vardimen .)
    LESSEQUAL       reduce using rule 42 (var -> ID vardimen .)
    GREATER         reduce using rule 42 (var -> ID vardimen .)
    GREATEREQUAL    reduce using rule 42 (var -> ID vardimen .)
    DEQUAL          reduce using rule 42 (var -> ID vardimen .)
    DISTINT         reduce using rule 42 (var -> ID vardimen .)
    PLUS            reduce using rule 42 (var -> ID vardimen .)
    MINUS           reduce using rule 42 (var -> ID vardimen .)
    SETOUT          reduce using rule 42 (var -> ID vardimen .)
    GETIN           reduce using rule 42 (var -> ID vardimen .)
    IF              reduce using rule 42 (var -> ID vardimen .)
    FOR             reduce using rule 42 (var -> ID vardimen .)
    WHILE           reduce using rule 42 (var -> ID vardimen .)
    CALL            reduce using rule 42 (var -> ID vardimen .)
    INT             reduce using rule 42 (var -> ID vardimen .)
    FLOAT           reduce using rule 42 (var -> ID vardimen .)
    LPAREN          reduce using rule 42 (var -> ID vardimen .)
    NUMBER          reduce using rule 42 (var -> ID vardimen .)
    MAIN            reduce using rule 42 (var -> ID vardimen .)
    RPAREN          reduce using rule 42 (var -> ID vardimen .)
    THEN            reduce using rule 42 (var -> ID vardimen .)
    ARROW           reduce using rule 42 (var -> ID vardimen .)
    DO              reduce using rule 42 (var -> ID vardimen .)
    RBRACKET        reduce using rule 42 (var -> ID vardimen .)
    COMMA           reduce using rule 42 (var -> ID vardimen .)
    END             reduce using rule 42 (var -> ID vardimen .)
    ELSE            reduce using rule 42 (var -> ID vardimen .)
    LOOP            reduce using rule 42 (var -> ID vardimen .)
    LBRACKET        shift and go to state 67


state 40

    (44) vardimen -> LBRACKET . expression RBRACKET
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 68
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 41

    (25) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES RPAREN
    (26) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> SETOUT LPAREN . var RPAREN
    (28) expression_nont -> SETOUT LPAREN . var COMMA ENDL RPAREN
    (29) expression_nont -> SETOUT LPAREN . var COMMA var COMMA RPAREN
    (30) expression_nont -> SETOUT LPAREN . var COMMA var COMMA ENDL RPAREN
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    QUOTES          shift and go to state 69
    ID              shift and go to state 43

    var                            shift and go to state 70

state 42

    (58) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 71


state 43

    (40) var -> ID .
    (42) var -> ID . vardimen
    (43) vardimen -> . vardimen LBRACKET expression RBRACKET
    (44) vardimen -> . LBRACKET expression RBRACKET

    EQUAL           reduce using rule 40 (var -> ID .)
    ID              reduce using rule 40 (var -> ID .)
    TIMES           reduce using rule 40 (var -> ID .)
    DIVIDE          reduce using rule 40 (var -> ID .)
    LESS            reduce using rule 40 (var -> ID .)
    LESSEQUAL       reduce using rule 40 (var -> ID .)
    GREATER         reduce using rule 40 (var -> ID .)
    GREATEREQUAL    reduce using rule 40 (var -> ID .)
    DEQUAL          reduce using rule 40 (var -> ID .)
    DISTINT         reduce using rule 40 (var -> ID .)
    PLUS            reduce using rule 40 (var -> ID .)
    MINUS           reduce using rule 40 (var -> ID .)
    RPAREN          reduce using rule 40 (var -> ID .)
    THEN            reduce using rule 40 (var -> ID .)
    ARROW           reduce using rule 40 (var -> ID .)
    DO              reduce using rule 40 (var -> ID .)
    RBRACKET        reduce using rule 40 (var -> ID .)
    COMMA           reduce using rule 40 (var -> ID .)
    SETOUT          reduce using rule 40 (var -> ID .)
    GETIN           reduce using rule 40 (var -> ID .)
    IF              reduce using rule 40 (var -> ID .)
    FOR             reduce using rule 40 (var -> ID .)
    WHILE           reduce using rule 40 (var -> ID .)
    CALL            reduce using rule 40 (var -> ID .)
    INT             reduce using rule 40 (var -> ID .)
    FLOAT           reduce using rule 40 (var -> ID .)
    LPAREN          reduce using rule 40 (var -> ID .)
    NUMBER          reduce using rule 40 (var -> ID .)
    MAIN            reduce using rule 40 (var -> ID .)
    END             reduce using rule 40 (var -> ID .)
    ELSE            reduce using rule 40 (var -> ID .)
    LOOP            reduce using rule 40 (var -> ID .)
    LBRACKET        shift and go to state 40

    vardimen                       shift and go to state 39

state 44

    (39) expression -> var EQUAL . expression
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    var                            shift and go to state 18
    expression                     shift and go to state 72
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 45

    (41) var -> var ID . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 73


state 46

    (31) expression_nont -> GETIN LPAREN . var RPAREN
    (32) expression_nont -> GETIN LPAREN . var COMMA var RPAREN
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    ID              shift and go to state 43

    var                            shift and go to state 74

state 47

    (35) condition_nont -> IF expression . THEN statements_nont END
    (36) condition_nont -> IF expression . THEN statements_nont ELSE statements_nont END

    THEN            shift and go to state 75


state 48

    (37) iteration_nont -> FOR expression . ARROW expression DO statements_nont LOOP

    ARROW           shift and go to state 76


state 49

    (38) iteration_nont -> WHILE expression . DO statements_nont LOOP

    DO              shift and go to state 77


state 50

    (7) var_declaration -> var_type ID .
    (8) var_declaration -> var_type ID . COMMA ID
    (9) var_declaration -> var_type ID . EQUAL NUMBER
    (10) var_declaration -> var_type ID . EQUAL var
    (13) var_declaration -> var_type ID . dimensiones
    (14) dimensiones -> . dimensiones LBRACKET expression RBRACKET
    (15) dimensiones -> . LBRACKET expression RBRACKET

    SETOUT          reduce using rule 7 (var_declaration -> var_type ID .)
    GETIN           reduce using rule 7 (var_declaration -> var_type ID .)
    ID              reduce using rule 7 (var_declaration -> var_type ID .)
    IF              reduce using rule 7 (var_declaration -> var_type ID .)
    FOR             reduce using rule 7 (var_declaration -> var_type ID .)
    WHILE           reduce using rule 7 (var_declaration -> var_type ID .)
    CALL            reduce using rule 7 (var_declaration -> var_type ID .)
    INT             reduce using rule 7 (var_declaration -> var_type ID .)
    FLOAT           reduce using rule 7 (var_declaration -> var_type ID .)
    LPAREN          reduce using rule 7 (var_declaration -> var_type ID .)
    NUMBER          reduce using rule 7 (var_declaration -> var_type ID .)
    MAIN            reduce using rule 7 (var_declaration -> var_type ID .)
    END             reduce using rule 7 (var_declaration -> var_type ID .)
    ELSE            reduce using rule 7 (var_declaration -> var_type ID .)
    LOOP            reduce using rule 7 (var_declaration -> var_type ID .)
    COMMA           shift and go to state 78
    EQUAL           shift and go to state 79
    LBRACKET        shift and go to state 81

    dimensiones                    shift and go to state 80

state 51

    (61) call -> CALL LPAREN . ID RPAREN

    ID              shift and go to state 82


state 52

    (46) simple_expression -> additive_expression checkop . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24
    ID              shift and go to state 43

    additive_expression            shift and go to state 83
    term                           shift and go to state 30
    factor                         shift and go to state 31
    var                            shift and go to state 84

state 53

    (54) additive_expression -> additive_expression addop . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24
    ID              shift and go to state 43

    term                           shift and go to state 85
    factor                         shift and go to state 31
    var                            shift and go to state 84

state 54

    (48) checkop -> LESS .

    LPAREN          reduce using rule 48 (checkop -> LESS .)
    NUMBER          reduce using rule 48 (checkop -> LESS .)
    ID              reduce using rule 48 (checkop -> LESS .)


state 55

    (49) checkop -> LESSEQUAL .

    LPAREN          reduce using rule 49 (checkop -> LESSEQUAL .)
    NUMBER          reduce using rule 49 (checkop -> LESSEQUAL .)
    ID              reduce using rule 49 (checkop -> LESSEQUAL .)


state 56

    (50) checkop -> GREATER .

    LPAREN          reduce using rule 50 (checkop -> GREATER .)
    NUMBER          reduce using rule 50 (checkop -> GREATER .)
    ID              reduce using rule 50 (checkop -> GREATER .)


state 57

    (51) checkop -> GREATEREQUAL .

    LPAREN          reduce using rule 51 (checkop -> GREATEREQUAL .)
    NUMBER          reduce using rule 51 (checkop -> GREATEREQUAL .)
    ID              reduce using rule 51 (checkop -> GREATEREQUAL .)


state 58

    (52) checkop -> DEQUAL .

    LPAREN          reduce using rule 52 (checkop -> DEQUAL .)
    NUMBER          reduce using rule 52 (checkop -> DEQUAL .)
    ID              reduce using rule 52 (checkop -> DEQUAL .)


state 59

    (53) checkop -> DISTINT .

    LPAREN          reduce using rule 53 (checkop -> DISTINT .)
    NUMBER          reduce using rule 53 (checkop -> DISTINT .)
    ID              reduce using rule 53 (checkop -> DISTINT .)


state 60

    (56) addop -> PLUS .

    LPAREN          reduce using rule 56 (addop -> PLUS .)
    NUMBER          reduce using rule 56 (addop -> PLUS .)
    ID              reduce using rule 56 (addop -> PLUS .)


state 61

    (57) addop -> MINUS .

    LPAREN          reduce using rule 57 (addop -> MINUS .)
    NUMBER          reduce using rule 57 (addop -> MINUS .)
    ID              reduce using rule 57 (addop -> MINUS .)


state 62

    (62) term -> term mulop . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24
    ID              shift and go to state 43

    factor                         shift and go to state 86
    var                            shift and go to state 84

state 63

    (64) mulop -> TIMES .

    LPAREN          reduce using rule 64 (mulop -> TIMES .)
    NUMBER          reduce using rule 64 (mulop -> TIMES .)
    ID              reduce using rule 64 (mulop -> TIMES .)


state 64

    (65) mulop -> DIVIDE .

    LPAREN          reduce using rule 65 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 65 (mulop -> DIVIDE .)
    ID              reduce using rule 65 (mulop -> DIVIDE .)


state 65

    (3) main_declaration -> MAIN COLON . statements_nont END
    (17) statements_nont -> . statements_nont statement
    (18) statements_nont -> . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    statements_nont                shift and go to state 87
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 66

    (16) PROCESS_declaration -> PROCESS ID DO . statements_nont END
    (17) statements_nont -> . statements_nont statement
    (18) statements_nont -> . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    statements_nont                shift and go to state 88
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 67

    (43) vardimen -> vardimen LBRACKET . expression RBRACKET
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 89
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 68

    (44) vardimen -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 90


state 69

    (25) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES RPAREN
    (26) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES COMMA ENDL RPAREN

    ID              shift and go to state 91


state 70

    (27) expression_nont -> SETOUT LPAREN var . RPAREN
    (28) expression_nont -> SETOUT LPAREN var . COMMA ENDL RPAREN
    (29) expression_nont -> SETOUT LPAREN var . COMMA var COMMA RPAREN
    (30) expression_nont -> SETOUT LPAREN var . COMMA var COMMA ENDL RPAREN
    (41) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 92
    COMMA           shift and go to state 93
    ID              shift and go to state 45


state 71

    (58) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    SETOUT          reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    GETIN           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    CALL            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    INT             reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    MAIN            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 58 (factor -> LPAREN expression RPAREN .)


state 72

    (39) expression -> var EQUAL expression .

    SETOUT          reduce using rule 39 (expression -> var EQUAL expression .)
    GETIN           reduce using rule 39 (expression -> var EQUAL expression .)
    ID              reduce using rule 39 (expression -> var EQUAL expression .)
    IF              reduce using rule 39 (expression -> var EQUAL expression .)
    FOR             reduce using rule 39 (expression -> var EQUAL expression .)
    WHILE           reduce using rule 39 (expression -> var EQUAL expression .)
    CALL            reduce using rule 39 (expression -> var EQUAL expression .)
    INT             reduce using rule 39 (expression -> var EQUAL expression .)
    FLOAT           reduce using rule 39 (expression -> var EQUAL expression .)
    LPAREN          reduce using rule 39 (expression -> var EQUAL expression .)
    NUMBER          reduce using rule 39 (expression -> var EQUAL expression .)
    MAIN            reduce using rule 39 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 39 (expression -> var EQUAL expression .)
    THEN            reduce using rule 39 (expression -> var EQUAL expression .)
    ARROW           reduce using rule 39 (expression -> var EQUAL expression .)
    DO              reduce using rule 39 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 39 (expression -> var EQUAL expression .)
    END             reduce using rule 39 (expression -> var EQUAL expression .)
    ELSE            reduce using rule 39 (expression -> var EQUAL expression .)
    LOOP            reduce using rule 39 (expression -> var EQUAL expression .)


state 73

    (41) var -> var ID LBRACKET . expression RBRACKET
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    var                            shift and go to state 18
    expression                     shift and go to state 94
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 74

    (31) expression_nont -> GETIN LPAREN var . RPAREN
    (32) expression_nont -> GETIN LPAREN var . COMMA var RPAREN
    (41) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 96
    ID              shift and go to state 45


state 75

    (35) condition_nont -> IF expression THEN . statements_nont END
    (36) condition_nont -> IF expression THEN . statements_nont ELSE statements_nont END
    (17) statements_nont -> . statements_nont statement
    (18) statements_nont -> . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statements_nont                shift and go to state 97
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 76

    (37) iteration_nont -> FOR expression ARROW . expression DO statements_nont LOOP
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 98
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 77

    (38) iteration_nont -> WHILE expression DO . statements_nont LOOP
    (17) statements_nont -> . statements_nont statement
    (18) statements_nont -> . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statements_nont                shift and go to state 99
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 78

    (8) var_declaration -> var_type ID COMMA . ID

    ID              shift and go to state 100


state 79

    (9) var_declaration -> var_type ID EQUAL . NUMBER
    (10) var_declaration -> var_type ID EQUAL . var
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    NUMBER          shift and go to state 101
    ID              shift and go to state 43

    var                            shift and go to state 102

state 80

    (13) var_declaration -> var_type ID dimensiones .
    (14) dimensiones -> dimensiones . LBRACKET expression RBRACKET

    SETOUT          reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    GETIN           reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    ID              reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    IF              reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    FOR             reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    WHILE           reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    CALL            reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    INT             reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    FLOAT           reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    LPAREN          reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    NUMBER          reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    MAIN            reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    END             reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    ELSE            reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    LOOP            reduce using rule 13 (var_declaration -> var_type ID dimensiones .)
    LBRACKET        shift and go to state 103


state 81

    (15) dimensiones -> LBRACKET . expression RBRACKET
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 104
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 82

    (61) call -> CALL LPAREN ID . RPAREN

    RPAREN          shift and go to state 105


state 83

    (46) simple_expression -> additive_expression checkop additive_expression .
    (54) additive_expression -> additive_expression . addop term
    (56) addop -> . PLUS
    (57) addop -> . MINUS

    SETOUT          reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    GETIN           reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    ID              reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    IF              reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    FOR             reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    WHILE           reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    CALL            reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    INT             reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    FLOAT           reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    LPAREN          reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    NUMBER          reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    MAIN            reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    RPAREN          reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    THEN            reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    ARROW           reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    DO              reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    RBRACKET        reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    END             reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    ELSE            reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    LOOP            reduce using rule 46 (simple_expression -> additive_expression checkop additive_expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61

    addop                          shift and go to state 53

state 84

    (59) factor -> var .
    (41) var -> var . ID LBRACKET expression RBRACKET

  ! shift/reduce conflict for ID resolved as shift
    TIMES           reduce using rule 59 (factor -> var .)
    DIVIDE          reduce using rule 59 (factor -> var .)
    PLUS            reduce using rule 59 (factor -> var .)
    MINUS           reduce using rule 59 (factor -> var .)
    SETOUT          reduce using rule 59 (factor -> var .)
    GETIN           reduce using rule 59 (factor -> var .)
    IF              reduce using rule 59 (factor -> var .)
    FOR             reduce using rule 59 (factor -> var .)
    WHILE           reduce using rule 59 (factor -> var .)
    CALL            reduce using rule 59 (factor -> var .)
    INT             reduce using rule 59 (factor -> var .)
    FLOAT           reduce using rule 59 (factor -> var .)
    LPAREN          reduce using rule 59 (factor -> var .)
    NUMBER          reduce using rule 59 (factor -> var .)
    MAIN            reduce using rule 59 (factor -> var .)
    RPAREN          reduce using rule 59 (factor -> var .)
    THEN            reduce using rule 59 (factor -> var .)
    ARROW           reduce using rule 59 (factor -> var .)
    DO              reduce using rule 59 (factor -> var .)
    RBRACKET        reduce using rule 59 (factor -> var .)
    END             reduce using rule 59 (factor -> var .)
    ELSE            reduce using rule 59 (factor -> var .)
    LOOP            reduce using rule 59 (factor -> var .)
    LESS            reduce using rule 59 (factor -> var .)
    LESSEQUAL       reduce using rule 59 (factor -> var .)
    GREATER         reduce using rule 59 (factor -> var .)
    GREATEREQUAL    reduce using rule 59 (factor -> var .)
    DEQUAL          reduce using rule 59 (factor -> var .)
    DISTINT         reduce using rule 59 (factor -> var .)
    ID              shift and go to state 45

  ! ID              [ reduce using rule 59 (factor -> var .) ]


state 85

    (54) additive_expression -> additive_expression addop term .
    (62) term -> term . mulop factor
    (64) mulop -> . TIMES
    (65) mulop -> . DIVIDE

    LESS            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 54 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 54 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 54 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 54 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 54 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 54 (additive_expression -> additive_expression addop term .)
    SETOUT          reduce using rule 54 (additive_expression -> additive_expression addop term .)
    GETIN           reduce using rule 54 (additive_expression -> additive_expression addop term .)
    ID              reduce using rule 54 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 54 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 54 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 54 (additive_expression -> additive_expression addop term .)
    CALL            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    INT             reduce using rule 54 (additive_expression -> additive_expression addop term .)
    FLOAT           reduce using rule 54 (additive_expression -> additive_expression addop term .)
    LPAREN          reduce using rule 54 (additive_expression -> additive_expression addop term .)
    NUMBER          reduce using rule 54 (additive_expression -> additive_expression addop term .)
    MAIN            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 54 (additive_expression -> additive_expression addop term .)
    THEN            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    ARROW           reduce using rule 54 (additive_expression -> additive_expression addop term .)
    DO              reduce using rule 54 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 54 (additive_expression -> additive_expression addop term .)
    END             reduce using rule 54 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    LOOP            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64

    mulop                          shift and go to state 62

state 86

    (62) term -> term mulop factor .

    TIMES           reduce using rule 62 (term -> term mulop factor .)
    DIVIDE          reduce using rule 62 (term -> term mulop factor .)
    LESS            reduce using rule 62 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 62 (term -> term mulop factor .)
    GREATER         reduce using rule 62 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 62 (term -> term mulop factor .)
    DEQUAL          reduce using rule 62 (term -> term mulop factor .)
    DISTINT         reduce using rule 62 (term -> term mulop factor .)
    PLUS            reduce using rule 62 (term -> term mulop factor .)
    MINUS           reduce using rule 62 (term -> term mulop factor .)
    SETOUT          reduce using rule 62 (term -> term mulop factor .)
    GETIN           reduce using rule 62 (term -> term mulop factor .)
    ID              reduce using rule 62 (term -> term mulop factor .)
    IF              reduce using rule 62 (term -> term mulop factor .)
    FOR             reduce using rule 62 (term -> term mulop factor .)
    WHILE           reduce using rule 62 (term -> term mulop factor .)
    CALL            reduce using rule 62 (term -> term mulop factor .)
    INT             reduce using rule 62 (term -> term mulop factor .)
    FLOAT           reduce using rule 62 (term -> term mulop factor .)
    LPAREN          reduce using rule 62 (term -> term mulop factor .)
    NUMBER          reduce using rule 62 (term -> term mulop factor .)
    MAIN            reduce using rule 62 (term -> term mulop factor .)
    RPAREN          reduce using rule 62 (term -> term mulop factor .)
    THEN            reduce using rule 62 (term -> term mulop factor .)
    ARROW           reduce using rule 62 (term -> term mulop factor .)
    DO              reduce using rule 62 (term -> term mulop factor .)
    RBRACKET        reduce using rule 62 (term -> term mulop factor .)
    END             reduce using rule 62 (term -> term mulop factor .)
    ELSE            reduce using rule 62 (term -> term mulop factor .)
    LOOP            reduce using rule 62 (term -> term mulop factor .)


state 87

    (3) main_declaration -> MAIN COLON statements_nont . END
    (17) statements_nont -> statements_nont . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    END             shift and go to state 106
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 88

    (16) PROCESS_declaration -> PROCESS ID DO statements_nont . END
    (17) statements_nont -> statements_nont . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    END             shift and go to state 107
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    expression                     shift and go to state 15
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 89

    (43) vardimen -> vardimen LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 108


state 90

    (44) vardimen -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    FOR             reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    CALL            reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    INT             reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    END             reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    THEN            reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    DO              reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 44 (vardimen -> LBRACKET expression RBRACKET .)


state 91

    (25) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES RPAREN
    (26) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES COMMA ENDL RPAREN

    QUOTES          shift and go to state 109


state 92

    (27) expression_nont -> SETOUT LPAREN var RPAREN .

    SETOUT          reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    GETIN           reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ID              reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    IF              reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FOR             reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    WHILE           reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    CALL            reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    INT             reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FLOAT           reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LPAREN          reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    NUMBER          reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    MAIN            reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    END             reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ELSE            reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LOOP            reduce using rule 27 (expression_nont -> SETOUT LPAREN var RPAREN .)


state 93

    (28) expression_nont -> SETOUT LPAREN var COMMA . ENDL RPAREN
    (29) expression_nont -> SETOUT LPAREN var COMMA . var COMMA RPAREN
    (30) expression_nont -> SETOUT LPAREN var COMMA . var COMMA ENDL RPAREN
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    ENDL            shift and go to state 111
    ID              shift and go to state 43

    var                            shift and go to state 110

state 94

    (41) var -> var ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 112


state 95

    (31) expression_nont -> GETIN LPAREN var RPAREN .

    SETOUT          reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    GETIN           reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    ID              reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    IF              reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    FOR             reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    WHILE           reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    CALL            reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    INT             reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    FLOAT           reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    LPAREN          reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    NUMBER          reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    MAIN            reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    END             reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    ELSE            reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)
    LOOP            reduce using rule 31 (expression_nont -> GETIN LPAREN var RPAREN .)


state 96

    (32) expression_nont -> GETIN LPAREN var COMMA . var RPAREN
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen

    ID              shift and go to state 43

    var                            shift and go to state 113

state 97

    (35) condition_nont -> IF expression THEN statements_nont . END
    (36) condition_nont -> IF expression THEN statements_nont . ELSE statements_nont END
    (17) statements_nont -> statements_nont . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    END             shift and go to state 114
    ELSE            shift and go to state 115
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 98

    (37) iteration_nont -> FOR expression ARROW expression . DO statements_nont LOOP

    DO              shift and go to state 116


state 99

    (38) iteration_nont -> WHILE expression DO statements_nont . LOOP
    (17) statements_nont -> statements_nont . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    LOOP            shift and go to state 117
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 100

    (8) var_declaration -> var_type ID COMMA ID .

    SETOUT          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    GETIN           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    ID              reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    IF              reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    FOR             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    WHILE           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    CALL            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    INT             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    FLOAT           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    LPAREN          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    NUMBER          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    MAIN            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    END             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    ELSE            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    LOOP            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)


state 101

    (9) var_declaration -> var_type ID EQUAL NUMBER .

    SETOUT          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    GETIN           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    ID              reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    IF              reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    FOR             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    WHILE           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    CALL            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    INT             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    FLOAT           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    LPAREN          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    NUMBER          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    MAIN            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    END             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    ELSE            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    LOOP            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)


state 102

    (10) var_declaration -> var_type ID EQUAL var .
    (41) var -> var . ID LBRACKET expression RBRACKET

  ! shift/reduce conflict for ID resolved as shift
    SETOUT          reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    GETIN           reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    IF              reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    FOR             reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    WHILE           reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    CALL            reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    INT             reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    FLOAT           reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    LPAREN          reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    NUMBER          reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    MAIN            reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    END             reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    ELSE            reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    LOOP            reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    ID              shift and go to state 45

  ! ID              [ reduce using rule 10 (var_declaration -> var_type ID EQUAL var .) ]


state 103

    (14) dimensiones -> dimensiones LBRACKET . expression RBRACKET
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    ID              shift and go to state 43
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 118
    var                            shift and go to state 18
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 104

    (15) dimensiones -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 119


state 105

    (61) call -> CALL LPAREN ID RPAREN .

    SETOUT          reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    GETIN           reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    ID              reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    IF              reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    FOR             reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    WHILE           reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    CALL            reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    INT             reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    FLOAT           reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    LPAREN          reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    NUMBER          reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    MAIN            reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    END             reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    ELSE            reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)
    LOOP            reduce using rule 61 (call -> CALL LPAREN ID RPAREN .)


state 106

    (3) main_declaration -> MAIN COLON statements_nont END .

    END             reduce using rule 3 (main_declaration -> MAIN COLON statements_nont END .)


state 107

    (16) PROCESS_declaration -> PROCESS ID DO statements_nont END .

    MAIN            reduce using rule 16 (PROCESS_declaration -> PROCESS ID DO statements_nont END .)


state 108

    (43) vardimen -> vardimen LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ID              reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LESS            reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    IF              reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    FOR             reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    CALL            reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    INT             reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    END             reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    THEN            reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    DO              reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 43 (vardimen -> vardimen LBRACKET expression RBRACKET .)


state 109

    (25) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . RPAREN
    (26) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . COMMA ENDL RPAREN

    RPAREN          shift and go to state 120
    COMMA           shift and go to state 121


state 110

    (29) expression_nont -> SETOUT LPAREN var COMMA var . COMMA RPAREN
    (30) expression_nont -> SETOUT LPAREN var COMMA var . COMMA ENDL RPAREN
    (41) var -> var . ID LBRACKET expression RBRACKET

    COMMA           shift and go to state 122
    ID              shift and go to state 45


state 111

    (28) expression_nont -> SETOUT LPAREN var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 123


state 112

    (41) var -> var ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    CALL            reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    INT             reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    END             reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 41 (var -> var ID LBRACKET expression RBRACKET .)


state 113

    (32) expression_nont -> GETIN LPAREN var COMMA var . RPAREN
    (41) var -> var . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 124
    ID              shift and go to state 45


state 114

    (35) condition_nont -> IF expression THEN statements_nont END .

    SETOUT          reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    GETIN           reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    ID              reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    IF              reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    FOR             reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    WHILE           reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    CALL            reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    INT             reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    FLOAT           reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    LPAREN          reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    NUMBER          reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    MAIN            reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    END             reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    ELSE            reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)
    LOOP            reduce using rule 35 (condition_nont -> IF expression THEN statements_nont END .)


state 115

    (36) condition_nont -> IF expression THEN statements_nont ELSE . statements_nont END
    (17) statements_nont -> . statements_nont statement
    (18) statements_nont -> . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statements_nont                shift and go to state 125
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 116

    (37) iteration_nont -> FOR expression ARROW expression DO . statements_nont LOOP
    (17) statements_nont -> . statements_nont statement
    (18) statements_nont -> . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statements_nont                shift and go to state 126
    statement                      shift and go to state 7
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 117

    (38) iteration_nont -> WHILE expression DO statements_nont LOOP .

    SETOUT          reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    GETIN           reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    ID              reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    IF              reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    FOR             reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    WHILE           reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    CALL            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    INT             reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    FLOAT           reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    LPAREN          reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    NUMBER          reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    MAIN            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    END             reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    ELSE            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)
    LOOP            reduce using rule 38 (iteration_nont -> WHILE expression DO statements_nont LOOP .)


state 118

    (14) dimensiones -> dimensiones LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 127


state 119

    (15) dimensiones -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    FOR             reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    CALL            reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    INT             reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    END             reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 15 (dimensiones -> LBRACKET expression RBRACKET .)


state 120

    (25) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .

    SETOUT          reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    GETIN           reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ID              reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    IF              reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FOR             reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    WHILE           reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    CALL            reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    INT             reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FLOAT           reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LPAREN          reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    NUMBER          reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    MAIN            reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    END             reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ELSE            reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LOOP            reduce using rule 25 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)


state 121

    (26) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA . ENDL RPAREN

    ENDL            shift and go to state 128


state 122

    (29) expression_nont -> SETOUT LPAREN var COMMA var COMMA . RPAREN
    (30) expression_nont -> SETOUT LPAREN var COMMA var COMMA . ENDL RPAREN

    RPAREN          shift and go to state 129
    ENDL            shift and go to state 130


state 123

    (28) expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .

    SETOUT          reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ID              reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    IF              reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FOR             reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    CALL            reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    INT             reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    MAIN            reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    END             reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)


state 124

    (32) expression_nont -> GETIN LPAREN var COMMA var RPAREN .

    SETOUT          reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    GETIN           reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ID              reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    IF              reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FOR             reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    WHILE           reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    CALL            reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    INT             reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FLOAT           reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LPAREN          reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    NUMBER          reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    MAIN            reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    END             reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ELSE            reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LOOP            reduce using rule 32 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)


state 125

    (36) condition_nont -> IF expression THEN statements_nont ELSE statements_nont . END
    (17) statements_nont -> statements_nont . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    END             shift and go to state 131
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 126

    (37) iteration_nont -> FOR expression ARROW expression DO statements_nont . LOOP
    (17) statements_nont -> statements_nont . statement
    (19) statement -> . expression_nont
    (20) statement -> . condition_nont
    (21) statement -> . iteration_nont
    (22) statement -> . var_declaration
    (23) statement -> . call
    (24) expression_nont -> . expression
    (25) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (26) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (29) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (30) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (31) expression_nont -> . GETIN LPAREN var RPAREN
    (32) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (33) expression_nont -> . ID PLUSPLUS
    (34) expression_nont -> . ID MINUSMINUS
    (35) condition_nont -> . IF expression THEN statements_nont END
    (36) condition_nont -> . IF expression THEN statements_nont ELSE statements_nont END
    (37) iteration_nont -> . FOR expression ARROW expression DO statements_nont LOOP
    (38) iteration_nont -> . WHILE expression DO statements_nont LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID dimensiones
    (61) call -> . CALL LPAREN ID RPAREN
    (39) expression -> . var EQUAL expression
    (45) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (40) var -> . ID
    (41) var -> . var ID LBRACKET expression RBRACKET
    (42) var -> . ID vardimen
    (46) simple_expression -> . additive_expression checkop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . var
    (60) factor -> . NUMBER

    LOOP            shift and go to state 132
    SETOUT          shift and go to state 16
    GETIN           shift and go to state 19
    ID              shift and go to state 9
    IF              shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    CALL            shift and go to state 25
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 24

    expression                     shift and go to state 15
    statement                      shift and go to state 35
    expression_nont                shift and go to state 10
    condition_nont                 shift and go to state 11
    iteration_nont                 shift and go to state 12
    var_declaration                shift and go to state 13
    call                           shift and go to state 14
    var                            shift and go to state 18
    var_type                       shift and go to state 23
    simple_expression              shift and go to state 26
    additive_expression            shift and go to state 29
    term                           shift and go to state 30
    factor                         shift and go to state 31

state 127

    (14) dimensiones -> dimensiones LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    ID              reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    IF              reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    FOR             reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    CALL            reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    INT             reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    END             reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 14 (dimensiones -> dimensiones LBRACKET expression RBRACKET .)


state 128

    (26) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL . RPAREN

    RPAREN          shift and go to state 133


state 129

    (29) expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .

    SETOUT          reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    GETIN           reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ID              reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    IF              reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FOR             reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    WHILE           reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    CALL            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    INT             reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FLOAT           reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LPAREN          reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    NUMBER          reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    MAIN            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    END             reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ELSE            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LOOP            reduce using rule 29 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)


state 130

    (30) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 134


state 131

    (36) condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .

    SETOUT          reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    GETIN           reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    ID              reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    IF              reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    FOR             reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    WHILE           reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    CALL            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    INT             reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    FLOAT           reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    LPAREN          reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    NUMBER          reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    MAIN            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    END             reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    ELSE            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)
    LOOP            reduce using rule 36 (condition_nont -> IF expression THEN statements_nont ELSE statements_nont END .)


state 132

    (37) iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .

    SETOUT          reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    GETIN           reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    ID              reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    IF              reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    FOR             reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    WHILE           reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    CALL            reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    INT             reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    FLOAT           reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    LPAREN          reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    NUMBER          reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    MAIN            reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    END             reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    ELSE            reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)
    LOOP            reduce using rule 37 (iteration_nont -> FOR expression ARROW expression DO statements_nont LOOP .)


state 133

    (26) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .

    SETOUT          reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    GETIN           reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ID              reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    IF              reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FOR             reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    WHILE           reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    CALL            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    INT             reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    MAIN            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    END             reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ELSE            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LOOP            reduce using rule 26 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)


state 134

    (30) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .

    SETOUT          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ID              reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    IF              reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FOR             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    CALL            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    INT             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    MAIN            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    END             reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 30 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 18 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
