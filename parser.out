Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> START program_start END
Rule 2     program_start -> program_sequence main_declaration
Rule 3     program_sequence -> program_sequence declaration
Rule 4     program_sequence -> empty
Rule 5     declaration -> procces_declaration
Rule 6     declaration -> var_declaration
Rule 7     var_declaration -> var_type ID
Rule 8     var_declaration -> var_type ID COMMA ID
Rule 9     var_declaration -> var_type ID EQUAL NUMBER
Rule 10    var_declaration -> var_type ID EQUAL var
Rule 11    var_type -> INT
Rule 12    var_type -> FLOAT
Rule 13    var_declaration -> var_type ID LBRACKET NUMBER RBRACKET
Rule 14    main_declaration -> MAIN ID COLON statements_nont END
Rule 15    procces_declaration -> PROCCES ID COLON statements_nont END
Rule 16    statements_nont -> statements_nont statement
Rule 17    statements_nont -> empty
Rule 18    statement -> expression_nont
Rule 19    statement -> condition_nont
Rule 20    statement -> iteration_nont
Rule 21    statement -> var_declaration
Rule 22    expression_nont -> expression
Rule 23    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN
Rule 24    expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
Rule 25    expression_nont -> SETOUT LPAREN var RPAREN
Rule 26    expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN
Rule 27    expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN
Rule 28    expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
Rule 29    expression_nont -> GETIN LPAREN var RPAREN
Rule 30    expression_nont -> GETIN LPAREN var COMMA var RPAREN
Rule 31    expression_nont -> ID PLUSPLUS
Rule 32    expression_nont -> PLUSPLUS ID
Rule 33    expression_nont -> ID MINUSMINUS
Rule 34    expression_nont -> MINUSMINUS ID
Rule 35    condition_nont -> IF expression THEN statement END
Rule 36    condition_nont -> IF expression THEN statement ELSE statement END
Rule 37    iteration_nont -> WHILE expression DO statement LOOP
Rule 38    iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP
Rule 39    iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
Rule 40    iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
Rule 41    iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
Rule 42    iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
Rule 43    expression -> var EQUAL expression
Rule 44    var -> ID
Rule 45    var -> ID LBRACKET expression RBRACKET
Rule 46    expression -> simple_expression
Rule 47    simple_expression -> additive_expression relop additive_expression
Rule 48    simple_expression -> additive_expression
Rule 49    relop -> LESS
Rule 50    relop -> LESSEQUAL
Rule 51    relop -> GREATER
Rule 52    relop -> GREATEREQUAL
Rule 53    relop -> DEQUAL
Rule 54    relop -> DISTINT
Rule 55    relop -> QUOTES
Rule 56    additive_expression -> additive_expression addop term
Rule 57    additive_expression -> term
Rule 58    addop -> PLUS
Rule 59    addop -> MINUS
Rule 60    factor -> call
Rule 61    call -> PROCCES ID
Rule 62    term -> term mulop factor
Rule 63    term -> factor
Rule 64    mulop -> TIMES
Rule 65    mulop -> DIVIDE
Rule 66    factor -> LPAREN expression RPAREN
Rule 67    factor -> var
Rule 68    factor -> NUMBER

Terminals, with rules where they appear

COLON                : 14 15
COMMA                : 8 24 26 27 27 28 28 30 38 38 39 39 40 40 41 41 42 42
DEQUAL               : 53
DISTINT              : 54
DIVIDE               : 65
DO                   : 37 38 39 40 41 42
ELSE                 : 36
END                  : 1 14 15 35 36
ENDL                 : 24 26 28
EQUAL                : 9 10 43
FLOAT                : 12
FOR                  : 38 39 40 41 42
GETIN                : 29 30
GREATER              : 51
GREATEREQUAL         : 52
ID                   : 7 8 8 9 10 13 14 15 23 24 31 32 33 34 44 45 61
IF                   : 35 36
INT                  : 11
LBRACKET             : 13 45
LESS                 : 49
LESSEQUAL            : 50
LOOP                 : 37 38 39 40 41 42
LPAREN               : 23 24 25 26 27 28 29 30 66
MAIN                 : 14
MINUS                : 59
MINUSMINUS           : 33 34 41 42
NUMBER               : 9 13 68
PLUS                 : 58
PLUSPLUS             : 31 32 39 40
PROCCES              : 15 61
QUOTES               : 23 23 24 24 55
RBRACKET             : 13 45
RPAREN               : 23 24 25 26 27 28 29 30 66
SETOUT               : 23 24 25 26 27 28
START                : 1
THEN                 : 35 36
TIMES                : 64
WHILE                : 37
empty                : 4 17
error                : 

Nonterminals, with rules where they appear

additive_expression  : 47 47 48 56
addop                : 56
call                 : 60
condition_nont       : 19
declaration          : 3
expression           : 22 35 36 37 38 38 39 40 41 42 43 45 66
expression_nont      : 18
factor               : 62 63
iteration_nont       : 20
main_declaration     : 2
mulop                : 62
procces_declaration  : 5
program              : 0
program_sequence     : 2 3
program_start        : 1
relop                : 47
simple_expression    : 46
statement            : 16 35 36 36 37 38 39 40 41 42
statements_nont      : 14 15 16
term                 : 56 57 62
var                  : 10 25 26 27 27 28 28 29 30 30 38 39 39 40 40 41 41 42 42 43 67
var_declaration      : 6 21
var_type             : 7 8 9 10 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START program_start END

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . program_start END
    (2) program_start -> . program_sequence main_declaration
    (3) program_sequence -> . program_sequence declaration
    (4) program_sequence -> . empty

    empty           shift and go to state 5

    program_start                  shift and go to state 3
    program_sequence               shift and go to state 4

state 3

    (1) program -> START program_start . END

    END             shift and go to state 6


state 4

    (2) program_start -> program_sequence . main_declaration
    (3) program_sequence -> program_sequence . declaration
    (14) main_declaration -> . MAIN ID COLON statements_nont END
    (5) declaration -> . procces_declaration
    (6) declaration -> . var_declaration
    (15) procces_declaration -> . PROCCES ID COLON statements_nont END
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (11) var_type -> . INT
    (12) var_type -> . FLOAT

    MAIN            shift and go to state 9
    PROCCES         shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15

    main_declaration               shift and go to state 7
    declaration                    shift and go to state 8
    procces_declaration            shift and go to state 10
    var_declaration                shift and go to state 11
    var_type                       shift and go to state 13

state 5

    (4) program_sequence -> empty .

    MAIN            reduce using rule 4 (program_sequence -> empty .)
    PROCCES         reduce using rule 4 (program_sequence -> empty .)
    INT             reduce using rule 4 (program_sequence -> empty .)
    FLOAT           reduce using rule 4 (program_sequence -> empty .)


state 6

    (1) program -> START program_start END .

    $end            reduce using rule 1 (program -> START program_start END .)


state 7

    (2) program_start -> program_sequence main_declaration .

    END             reduce using rule 2 (program_start -> program_sequence main_declaration .)


state 8

    (3) program_sequence -> program_sequence declaration .

    MAIN            reduce using rule 3 (program_sequence -> program_sequence declaration .)
    PROCCES         reduce using rule 3 (program_sequence -> program_sequence declaration .)
    INT             reduce using rule 3 (program_sequence -> program_sequence declaration .)
    FLOAT           reduce using rule 3 (program_sequence -> program_sequence declaration .)


state 9

    (14) main_declaration -> MAIN . ID COLON statements_nont END

    ID              shift and go to state 16


state 10

    (5) declaration -> procces_declaration .

    MAIN            reduce using rule 5 (declaration -> procces_declaration .)
    PROCCES         reduce using rule 5 (declaration -> procces_declaration .)
    INT             reduce using rule 5 (declaration -> procces_declaration .)
    FLOAT           reduce using rule 5 (declaration -> procces_declaration .)


state 11

    (6) declaration -> var_declaration .

    MAIN            reduce using rule 6 (declaration -> var_declaration .)
    PROCCES         reduce using rule 6 (declaration -> var_declaration .)
    INT             reduce using rule 6 (declaration -> var_declaration .)
    FLOAT           reduce using rule 6 (declaration -> var_declaration .)


state 12

    (15) procces_declaration -> PROCCES . ID COLON statements_nont END

    ID              shift and go to state 17


state 13

    (7) var_declaration -> var_type . ID
    (8) var_declaration -> var_type . ID COMMA ID
    (9) var_declaration -> var_type . ID EQUAL NUMBER
    (10) var_declaration -> var_type . ID EQUAL var
    (13) var_declaration -> var_type . ID LBRACKET NUMBER RBRACKET

    ID              shift and go to state 18


state 14

    (11) var_type -> INT .

    ID              reduce using rule 11 (var_type -> INT .)


state 15

    (12) var_type -> FLOAT .

    ID              reduce using rule 12 (var_type -> FLOAT .)


state 16

    (14) main_declaration -> MAIN ID . COLON statements_nont END

    COLON           shift and go to state 19


state 17

    (15) procces_declaration -> PROCCES ID . COLON statements_nont END

    COLON           shift and go to state 20


state 18

    (7) var_declaration -> var_type ID .
    (8) var_declaration -> var_type ID . COMMA ID
    (9) var_declaration -> var_type ID . EQUAL NUMBER
    (10) var_declaration -> var_type ID . EQUAL var
    (13) var_declaration -> var_type ID . LBRACKET NUMBER RBRACKET

    MAIN            reduce using rule 7 (var_declaration -> var_type ID .)
    PROCCES         reduce using rule 7 (var_declaration -> var_type ID .)
    INT             reduce using rule 7 (var_declaration -> var_type ID .)
    FLOAT           reduce using rule 7 (var_declaration -> var_type ID .)
    END             reduce using rule 7 (var_declaration -> var_type ID .)
    SETOUT          reduce using rule 7 (var_declaration -> var_type ID .)
    GETIN           reduce using rule 7 (var_declaration -> var_type ID .)
    ID              reduce using rule 7 (var_declaration -> var_type ID .)
    PLUSPLUS        reduce using rule 7 (var_declaration -> var_type ID .)
    MINUSMINUS      reduce using rule 7 (var_declaration -> var_type ID .)
    IF              reduce using rule 7 (var_declaration -> var_type ID .)
    WHILE           reduce using rule 7 (var_declaration -> var_type ID .)
    FOR             reduce using rule 7 (var_declaration -> var_type ID .)
    LPAREN          reduce using rule 7 (var_declaration -> var_type ID .)
    NUMBER          reduce using rule 7 (var_declaration -> var_type ID .)
    ELSE            reduce using rule 7 (var_declaration -> var_type ID .)
    LOOP            reduce using rule 7 (var_declaration -> var_type ID .)
    COMMA           shift and go to state 21
    EQUAL           shift and go to state 22
    LBRACKET        shift and go to state 23


state 19

    (14) main_declaration -> MAIN ID COLON . statements_nont END
    (16) statements_nont -> . statements_nont statement
    (17) statements_nont -> . empty

    empty           shift and go to state 25

    statements_nont                shift and go to state 24

state 20

    (15) procces_declaration -> PROCCES ID COLON . statements_nont END
    (16) statements_nont -> . statements_nont statement
    (17) statements_nont -> . empty

    empty           shift and go to state 25

    statements_nont                shift and go to state 26

state 21

    (8) var_declaration -> var_type ID COMMA . ID

    ID              shift and go to state 27


state 22

    (9) var_declaration -> var_type ID EQUAL . NUMBER
    (10) var_declaration -> var_type ID EQUAL . var
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    NUMBER          shift and go to state 29
    ID              shift and go to state 28

    var                            shift and go to state 30

state 23

    (13) var_declaration -> var_type ID LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 31


state 24

    (14) main_declaration -> MAIN ID COLON statements_nont . END
    (16) statements_nont -> statements_nont . statement
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    END             shift and go to state 33
    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    statement                      shift and go to state 34
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    expression                     shift and go to state 39
    var                            shift and go to state 42
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 25

    (17) statements_nont -> empty .

    END             reduce using rule 17 (statements_nont -> empty .)
    SETOUT          reduce using rule 17 (statements_nont -> empty .)
    GETIN           reduce using rule 17 (statements_nont -> empty .)
    ID              reduce using rule 17 (statements_nont -> empty .)
    PLUSPLUS        reduce using rule 17 (statements_nont -> empty .)
    MINUSMINUS      reduce using rule 17 (statements_nont -> empty .)
    IF              reduce using rule 17 (statements_nont -> empty .)
    WHILE           reduce using rule 17 (statements_nont -> empty .)
    FOR             reduce using rule 17 (statements_nont -> empty .)
    INT             reduce using rule 17 (statements_nont -> empty .)
    FLOAT           reduce using rule 17 (statements_nont -> empty .)
    LPAREN          reduce using rule 17 (statements_nont -> empty .)
    NUMBER          reduce using rule 17 (statements_nont -> empty .)
    PROCCES         reduce using rule 17 (statements_nont -> empty .)


state 26

    (15) procces_declaration -> PROCCES ID COLON statements_nont . END
    (16) statements_nont -> statements_nont . statement
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    END             shift and go to state 56
    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    statement                      shift and go to state 34
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    expression                     shift and go to state 39
    var                            shift and go to state 42
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 27

    (8) var_declaration -> var_type ID COMMA ID .

    MAIN            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    PROCCES         reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    INT             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    FLOAT           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    END             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    SETOUT          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    GETIN           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    ID              reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    PLUSPLUS        reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    MINUSMINUS      reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    IF              reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    WHILE           reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    FOR             reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    LPAREN          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    NUMBER          reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    ELSE            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)
    LOOP            reduce using rule 8 (var_declaration -> var_type ID COMMA ID .)


state 28

    (44) var -> ID .
    (45) var -> ID . LBRACKET expression RBRACKET

    MAIN            reduce using rule 44 (var -> ID .)
    PROCCES         reduce using rule 44 (var -> ID .)
    INT             reduce using rule 44 (var -> ID .)
    FLOAT           reduce using rule 44 (var -> ID .)
    END             reduce using rule 44 (var -> ID .)
    SETOUT          reduce using rule 44 (var -> ID .)
    GETIN           reduce using rule 44 (var -> ID .)
    ID              reduce using rule 44 (var -> ID .)
    PLUSPLUS        reduce using rule 44 (var -> ID .)
    MINUSMINUS      reduce using rule 44 (var -> ID .)
    IF              reduce using rule 44 (var -> ID .)
    WHILE           reduce using rule 44 (var -> ID .)
    FOR             reduce using rule 44 (var -> ID .)
    LPAREN          reduce using rule 44 (var -> ID .)
    NUMBER          reduce using rule 44 (var -> ID .)
    ELSE            reduce using rule 44 (var -> ID .)
    LOOP            reduce using rule 44 (var -> ID .)
    EQUAL           reduce using rule 44 (var -> ID .)
    TIMES           reduce using rule 44 (var -> ID .)
    DIVIDE          reduce using rule 44 (var -> ID .)
    LESS            reduce using rule 44 (var -> ID .)
    LESSEQUAL       reduce using rule 44 (var -> ID .)
    GREATER         reduce using rule 44 (var -> ID .)
    GREATEREQUAL    reduce using rule 44 (var -> ID .)
    DEQUAL          reduce using rule 44 (var -> ID .)
    DISTINT         reduce using rule 44 (var -> ID .)
    QUOTES          reduce using rule 44 (var -> ID .)
    PLUS            reduce using rule 44 (var -> ID .)
    MINUS           reduce using rule 44 (var -> ID .)
    RPAREN          reduce using rule 44 (var -> ID .)
    THEN            reduce using rule 44 (var -> ID .)
    DO              reduce using rule 44 (var -> ID .)
    COMMA           reduce using rule 44 (var -> ID .)
    RBRACKET        reduce using rule 44 (var -> ID .)
    LBRACKET        shift and go to state 57


state 29

    (9) var_declaration -> var_type ID EQUAL NUMBER .

    MAIN            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    PROCCES         reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    INT             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    FLOAT           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    END             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    SETOUT          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    GETIN           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    ID              reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    PLUSPLUS        reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    MINUSMINUS      reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    IF              reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    WHILE           reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    FOR             reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    LPAREN          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    NUMBER          reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    ELSE            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)
    LOOP            reduce using rule 9 (var_declaration -> var_type ID EQUAL NUMBER .)


state 30

    (10) var_declaration -> var_type ID EQUAL var .

    MAIN            reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    PROCCES         reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    INT             reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    FLOAT           reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    END             reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    SETOUT          reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    GETIN           reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    ID              reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    PLUSPLUS        reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    MINUSMINUS      reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    IF              reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    WHILE           reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    FOR             reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    LPAREN          reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    NUMBER          reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    ELSE            reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)
    LOOP            reduce using rule 10 (var_declaration -> var_type ID EQUAL var .)


state 31

    (13) var_declaration -> var_type ID LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 58


state 32

    (31) expression_nont -> ID . PLUSPLUS
    (33) expression_nont -> ID . MINUSMINUS
    (44) var -> ID .
    (45) var -> ID . LBRACKET expression RBRACKET

  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    PLUSPLUS        shift and go to state 59
    MINUSMINUS      shift and go to state 60
    EQUAL           reduce using rule 44 (var -> ID .)
    TIMES           reduce using rule 44 (var -> ID .)
    DIVIDE          reduce using rule 44 (var -> ID .)
    LESS            reduce using rule 44 (var -> ID .)
    LESSEQUAL       reduce using rule 44 (var -> ID .)
    GREATER         reduce using rule 44 (var -> ID .)
    GREATEREQUAL    reduce using rule 44 (var -> ID .)
    DEQUAL          reduce using rule 44 (var -> ID .)
    DISTINT         reduce using rule 44 (var -> ID .)
    QUOTES          reduce using rule 44 (var -> ID .)
    PLUS            reduce using rule 44 (var -> ID .)
    MINUS           reduce using rule 44 (var -> ID .)
    END             reduce using rule 44 (var -> ID .)
    SETOUT          reduce using rule 44 (var -> ID .)
    GETIN           reduce using rule 44 (var -> ID .)
    ID              reduce using rule 44 (var -> ID .)
    IF              reduce using rule 44 (var -> ID .)
    WHILE           reduce using rule 44 (var -> ID .)
    FOR             reduce using rule 44 (var -> ID .)
    INT             reduce using rule 44 (var -> ID .)
    FLOAT           reduce using rule 44 (var -> ID .)
    LPAREN          reduce using rule 44 (var -> ID .)
    NUMBER          reduce using rule 44 (var -> ID .)
    PROCCES         reduce using rule 44 (var -> ID .)
    ELSE            reduce using rule 44 (var -> ID .)
    LOOP            reduce using rule 44 (var -> ID .)
    LBRACKET        shift and go to state 57

  ! PLUSPLUS        [ reduce using rule 44 (var -> ID .) ]
  ! MINUSMINUS      [ reduce using rule 44 (var -> ID .) ]


state 33

    (14) main_declaration -> MAIN ID COLON statements_nont END .

    END             reduce using rule 14 (main_declaration -> MAIN ID COLON statements_nont END .)


state 34

    (16) statements_nont -> statements_nont statement .

    END             reduce using rule 16 (statements_nont -> statements_nont statement .)
    SETOUT          reduce using rule 16 (statements_nont -> statements_nont statement .)
    GETIN           reduce using rule 16 (statements_nont -> statements_nont statement .)
    ID              reduce using rule 16 (statements_nont -> statements_nont statement .)
    PLUSPLUS        reduce using rule 16 (statements_nont -> statements_nont statement .)
    MINUSMINUS      reduce using rule 16 (statements_nont -> statements_nont statement .)
    IF              reduce using rule 16 (statements_nont -> statements_nont statement .)
    WHILE           reduce using rule 16 (statements_nont -> statements_nont statement .)
    FOR             reduce using rule 16 (statements_nont -> statements_nont statement .)
    INT             reduce using rule 16 (statements_nont -> statements_nont statement .)
    FLOAT           reduce using rule 16 (statements_nont -> statements_nont statement .)
    LPAREN          reduce using rule 16 (statements_nont -> statements_nont statement .)
    NUMBER          reduce using rule 16 (statements_nont -> statements_nont statement .)
    PROCCES         reduce using rule 16 (statements_nont -> statements_nont statement .)


state 35

    (18) statement -> expression_nont .

    END             reduce using rule 18 (statement -> expression_nont .)
    SETOUT          reduce using rule 18 (statement -> expression_nont .)
    GETIN           reduce using rule 18 (statement -> expression_nont .)
    ID              reduce using rule 18 (statement -> expression_nont .)
    PLUSPLUS        reduce using rule 18 (statement -> expression_nont .)
    MINUSMINUS      reduce using rule 18 (statement -> expression_nont .)
    IF              reduce using rule 18 (statement -> expression_nont .)
    WHILE           reduce using rule 18 (statement -> expression_nont .)
    FOR             reduce using rule 18 (statement -> expression_nont .)
    INT             reduce using rule 18 (statement -> expression_nont .)
    FLOAT           reduce using rule 18 (statement -> expression_nont .)
    LPAREN          reduce using rule 18 (statement -> expression_nont .)
    NUMBER          reduce using rule 18 (statement -> expression_nont .)
    PROCCES         reduce using rule 18 (statement -> expression_nont .)
    ELSE            reduce using rule 18 (statement -> expression_nont .)
    LOOP            reduce using rule 18 (statement -> expression_nont .)


state 36

    (19) statement -> condition_nont .

    END             reduce using rule 19 (statement -> condition_nont .)
    SETOUT          reduce using rule 19 (statement -> condition_nont .)
    GETIN           reduce using rule 19 (statement -> condition_nont .)
    ID              reduce using rule 19 (statement -> condition_nont .)
    PLUSPLUS        reduce using rule 19 (statement -> condition_nont .)
    MINUSMINUS      reduce using rule 19 (statement -> condition_nont .)
    IF              reduce using rule 19 (statement -> condition_nont .)
    WHILE           reduce using rule 19 (statement -> condition_nont .)
    FOR             reduce using rule 19 (statement -> condition_nont .)
    INT             reduce using rule 19 (statement -> condition_nont .)
    FLOAT           reduce using rule 19 (statement -> condition_nont .)
    LPAREN          reduce using rule 19 (statement -> condition_nont .)
    NUMBER          reduce using rule 19 (statement -> condition_nont .)
    PROCCES         reduce using rule 19 (statement -> condition_nont .)
    ELSE            reduce using rule 19 (statement -> condition_nont .)
    LOOP            reduce using rule 19 (statement -> condition_nont .)


state 37

    (20) statement -> iteration_nont .

    END             reduce using rule 20 (statement -> iteration_nont .)
    SETOUT          reduce using rule 20 (statement -> iteration_nont .)
    GETIN           reduce using rule 20 (statement -> iteration_nont .)
    ID              reduce using rule 20 (statement -> iteration_nont .)
    PLUSPLUS        reduce using rule 20 (statement -> iteration_nont .)
    MINUSMINUS      reduce using rule 20 (statement -> iteration_nont .)
    IF              reduce using rule 20 (statement -> iteration_nont .)
    WHILE           reduce using rule 20 (statement -> iteration_nont .)
    FOR             reduce using rule 20 (statement -> iteration_nont .)
    INT             reduce using rule 20 (statement -> iteration_nont .)
    FLOAT           reduce using rule 20 (statement -> iteration_nont .)
    LPAREN          reduce using rule 20 (statement -> iteration_nont .)
    NUMBER          reduce using rule 20 (statement -> iteration_nont .)
    PROCCES         reduce using rule 20 (statement -> iteration_nont .)
    ELSE            reduce using rule 20 (statement -> iteration_nont .)
    LOOP            reduce using rule 20 (statement -> iteration_nont .)


state 38

    (21) statement -> var_declaration .

    END             reduce using rule 21 (statement -> var_declaration .)
    SETOUT          reduce using rule 21 (statement -> var_declaration .)
    GETIN           reduce using rule 21 (statement -> var_declaration .)
    ID              reduce using rule 21 (statement -> var_declaration .)
    PLUSPLUS        reduce using rule 21 (statement -> var_declaration .)
    MINUSMINUS      reduce using rule 21 (statement -> var_declaration .)
    IF              reduce using rule 21 (statement -> var_declaration .)
    WHILE           reduce using rule 21 (statement -> var_declaration .)
    FOR             reduce using rule 21 (statement -> var_declaration .)
    INT             reduce using rule 21 (statement -> var_declaration .)
    FLOAT           reduce using rule 21 (statement -> var_declaration .)
    LPAREN          reduce using rule 21 (statement -> var_declaration .)
    NUMBER          reduce using rule 21 (statement -> var_declaration .)
    PROCCES         reduce using rule 21 (statement -> var_declaration .)
    ELSE            reduce using rule 21 (statement -> var_declaration .)
    LOOP            reduce using rule 21 (statement -> var_declaration .)


state 39

    (22) expression_nont -> expression .

    END             reduce using rule 22 (expression_nont -> expression .)
    SETOUT          reduce using rule 22 (expression_nont -> expression .)
    GETIN           reduce using rule 22 (expression_nont -> expression .)
    ID              reduce using rule 22 (expression_nont -> expression .)
    PLUSPLUS        reduce using rule 22 (expression_nont -> expression .)
    MINUSMINUS      reduce using rule 22 (expression_nont -> expression .)
    IF              reduce using rule 22 (expression_nont -> expression .)
    WHILE           reduce using rule 22 (expression_nont -> expression .)
    FOR             reduce using rule 22 (expression_nont -> expression .)
    INT             reduce using rule 22 (expression_nont -> expression .)
    FLOAT           reduce using rule 22 (expression_nont -> expression .)
    LPAREN          reduce using rule 22 (expression_nont -> expression .)
    NUMBER          reduce using rule 22 (expression_nont -> expression .)
    PROCCES         reduce using rule 22 (expression_nont -> expression .)
    ELSE            reduce using rule 22 (expression_nont -> expression .)
    LOOP            reduce using rule 22 (expression_nont -> expression .)


state 40

    (23) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> SETOUT . LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> SETOUT . LPAREN var RPAREN
    (26) expression_nont -> SETOUT . LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> SETOUT . LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> SETOUT . LPAREN var COMMA var COMMA ENDL RPAREN

    LPAREN          shift and go to state 61


state 41

    (66) factor -> LPAREN . expression RPAREN
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    ID              shift and go to state 28
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    expression                     shift and go to state 62
    var                            shift and go to state 42
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 42

    (43) expression -> var . EQUAL expression
    (67) factor -> var .

    EQUAL           shift and go to state 63
    TIMES           reduce using rule 67 (factor -> var .)
    DIVIDE          reduce using rule 67 (factor -> var .)
    LESS            reduce using rule 67 (factor -> var .)
    LESSEQUAL       reduce using rule 67 (factor -> var .)
    GREATER         reduce using rule 67 (factor -> var .)
    GREATEREQUAL    reduce using rule 67 (factor -> var .)
    DEQUAL          reduce using rule 67 (factor -> var .)
    DISTINT         reduce using rule 67 (factor -> var .)
    QUOTES          reduce using rule 67 (factor -> var .)
    PLUS            reduce using rule 67 (factor -> var .)
    MINUS           reduce using rule 67 (factor -> var .)
    END             reduce using rule 67 (factor -> var .)
    SETOUT          reduce using rule 67 (factor -> var .)
    GETIN           reduce using rule 67 (factor -> var .)
    ID              reduce using rule 67 (factor -> var .)
    PLUSPLUS        reduce using rule 67 (factor -> var .)
    MINUSMINUS      reduce using rule 67 (factor -> var .)
    IF              reduce using rule 67 (factor -> var .)
    WHILE           reduce using rule 67 (factor -> var .)
    FOR             reduce using rule 67 (factor -> var .)
    INT             reduce using rule 67 (factor -> var .)
    FLOAT           reduce using rule 67 (factor -> var .)
    LPAREN          reduce using rule 67 (factor -> var .)
    NUMBER          reduce using rule 67 (factor -> var .)
    PROCCES         reduce using rule 67 (factor -> var .)
    RPAREN          reduce using rule 67 (factor -> var .)
    THEN            reduce using rule 67 (factor -> var .)
    DO              reduce using rule 67 (factor -> var .)
    RBRACKET        reduce using rule 67 (factor -> var .)
    ELSE            reduce using rule 67 (factor -> var .)
    LOOP            reduce using rule 67 (factor -> var .)
    COMMA           reduce using rule 67 (factor -> var .)


state 43

    (29) expression_nont -> GETIN . LPAREN var RPAREN
    (30) expression_nont -> GETIN . LPAREN var COMMA var RPAREN

    LPAREN          shift and go to state 64


state 44

    (32) expression_nont -> PLUSPLUS . ID

    ID              shift and go to state 65


state 45

    (34) expression_nont -> MINUSMINUS . ID

    ID              shift and go to state 66


state 46

    (35) condition_nont -> IF . expression THEN statement END
    (36) condition_nont -> IF . expression THEN statement ELSE statement END
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    ID              shift and go to state 28
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    expression                     shift and go to state 67
    var                            shift and go to state 42
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 47

    (37) iteration_nont -> WHILE . expression DO statement LOOP
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    ID              shift and go to state 28
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    expression                     shift and go to state 68
    var                            shift and go to state 42
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 48

    (38) iteration_nont -> FOR . var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> FOR . var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> FOR . var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> FOR . var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> FOR . var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 28

    var                            shift and go to state 69

state 49

    (68) factor -> NUMBER .

    TIMES           reduce using rule 68 (factor -> NUMBER .)
    DIVIDE          reduce using rule 68 (factor -> NUMBER .)
    LESS            reduce using rule 68 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 68 (factor -> NUMBER .)
    GREATER         reduce using rule 68 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 68 (factor -> NUMBER .)
    DEQUAL          reduce using rule 68 (factor -> NUMBER .)
    DISTINT         reduce using rule 68 (factor -> NUMBER .)
    QUOTES          reduce using rule 68 (factor -> NUMBER .)
    PLUS            reduce using rule 68 (factor -> NUMBER .)
    MINUS           reduce using rule 68 (factor -> NUMBER .)
    END             reduce using rule 68 (factor -> NUMBER .)
    SETOUT          reduce using rule 68 (factor -> NUMBER .)
    GETIN           reduce using rule 68 (factor -> NUMBER .)
    ID              reduce using rule 68 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 68 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 68 (factor -> NUMBER .)
    IF              reduce using rule 68 (factor -> NUMBER .)
    WHILE           reduce using rule 68 (factor -> NUMBER .)
    FOR             reduce using rule 68 (factor -> NUMBER .)
    INT             reduce using rule 68 (factor -> NUMBER .)
    FLOAT           reduce using rule 68 (factor -> NUMBER .)
    LPAREN          reduce using rule 68 (factor -> NUMBER .)
    NUMBER          reduce using rule 68 (factor -> NUMBER .)
    PROCCES         reduce using rule 68 (factor -> NUMBER .)
    RPAREN          reduce using rule 68 (factor -> NUMBER .)
    THEN            reduce using rule 68 (factor -> NUMBER .)
    DO              reduce using rule 68 (factor -> NUMBER .)
    RBRACKET        reduce using rule 68 (factor -> NUMBER .)
    ELSE            reduce using rule 68 (factor -> NUMBER .)
    LOOP            reduce using rule 68 (factor -> NUMBER .)
    COMMA           reduce using rule 68 (factor -> NUMBER .)


state 50

    (46) expression -> simple_expression .

    END             reduce using rule 46 (expression -> simple_expression .)
    SETOUT          reduce using rule 46 (expression -> simple_expression .)
    GETIN           reduce using rule 46 (expression -> simple_expression .)
    ID              reduce using rule 46 (expression -> simple_expression .)
    PLUSPLUS        reduce using rule 46 (expression -> simple_expression .)
    MINUSMINUS      reduce using rule 46 (expression -> simple_expression .)
    IF              reduce using rule 46 (expression -> simple_expression .)
    WHILE           reduce using rule 46 (expression -> simple_expression .)
    FOR             reduce using rule 46 (expression -> simple_expression .)
    INT             reduce using rule 46 (expression -> simple_expression .)
    FLOAT           reduce using rule 46 (expression -> simple_expression .)
    LPAREN          reduce using rule 46 (expression -> simple_expression .)
    NUMBER          reduce using rule 46 (expression -> simple_expression .)
    PROCCES         reduce using rule 46 (expression -> simple_expression .)
    RPAREN          reduce using rule 46 (expression -> simple_expression .)
    THEN            reduce using rule 46 (expression -> simple_expression .)
    DO              reduce using rule 46 (expression -> simple_expression .)
    RBRACKET        reduce using rule 46 (expression -> simple_expression .)
    ELSE            reduce using rule 46 (expression -> simple_expression .)
    LOOP            reduce using rule 46 (expression -> simple_expression .)
    COMMA           reduce using rule 46 (expression -> simple_expression .)


state 51

    (47) simple_expression -> additive_expression . relop additive_expression
    (48) simple_expression -> additive_expression .
    (56) additive_expression -> additive_expression . addop term
    (49) relop -> . LESS
    (50) relop -> . LESSEQUAL
    (51) relop -> . GREATER
    (52) relop -> . GREATEREQUAL
    (53) relop -> . DEQUAL
    (54) relop -> . DISTINT
    (55) relop -> . QUOTES
    (58) addop -> . PLUS
    (59) addop -> . MINUS

    END             reduce using rule 48 (simple_expression -> additive_expression .)
    SETOUT          reduce using rule 48 (simple_expression -> additive_expression .)
    GETIN           reduce using rule 48 (simple_expression -> additive_expression .)
    ID              reduce using rule 48 (simple_expression -> additive_expression .)
    PLUSPLUS        reduce using rule 48 (simple_expression -> additive_expression .)
    MINUSMINUS      reduce using rule 48 (simple_expression -> additive_expression .)
    IF              reduce using rule 48 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 48 (simple_expression -> additive_expression .)
    FOR             reduce using rule 48 (simple_expression -> additive_expression .)
    INT             reduce using rule 48 (simple_expression -> additive_expression .)
    FLOAT           reduce using rule 48 (simple_expression -> additive_expression .)
    LPAREN          reduce using rule 48 (simple_expression -> additive_expression .)
    NUMBER          reduce using rule 48 (simple_expression -> additive_expression .)
    PROCCES         reduce using rule 48 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 48 (simple_expression -> additive_expression .)
    THEN            reduce using rule 48 (simple_expression -> additive_expression .)
    DO              reduce using rule 48 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 48 (simple_expression -> additive_expression .)
    ELSE            reduce using rule 48 (simple_expression -> additive_expression .)
    LOOP            reduce using rule 48 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 48 (simple_expression -> additive_expression .)
    LESS            shift and go to state 72
    LESSEQUAL       shift and go to state 73
    GREATER         shift and go to state 74
    GREATEREQUAL    shift and go to state 75
    DEQUAL          shift and go to state 76
    DISTINT         shift and go to state 77
    QUOTES          shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

    relop                          shift and go to state 70
    addop                          shift and go to state 71

state 52

    (57) additive_expression -> term .
    (62) term -> term . mulop factor
    (64) mulop -> . TIMES
    (65) mulop -> . DIVIDE

    LESS            reduce using rule 57 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 57 (additive_expression -> term .)
    GREATER         reduce using rule 57 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 57 (additive_expression -> term .)
    DEQUAL          reduce using rule 57 (additive_expression -> term .)
    DISTINT         reduce using rule 57 (additive_expression -> term .)
    QUOTES          reduce using rule 57 (additive_expression -> term .)
    PLUS            reduce using rule 57 (additive_expression -> term .)
    MINUS           reduce using rule 57 (additive_expression -> term .)
    END             reduce using rule 57 (additive_expression -> term .)
    SETOUT          reduce using rule 57 (additive_expression -> term .)
    GETIN           reduce using rule 57 (additive_expression -> term .)
    ID              reduce using rule 57 (additive_expression -> term .)
    PLUSPLUS        reduce using rule 57 (additive_expression -> term .)
    MINUSMINUS      reduce using rule 57 (additive_expression -> term .)
    IF              reduce using rule 57 (additive_expression -> term .)
    WHILE           reduce using rule 57 (additive_expression -> term .)
    FOR             reduce using rule 57 (additive_expression -> term .)
    INT             reduce using rule 57 (additive_expression -> term .)
    FLOAT           reduce using rule 57 (additive_expression -> term .)
    LPAREN          reduce using rule 57 (additive_expression -> term .)
    NUMBER          reduce using rule 57 (additive_expression -> term .)
    PROCCES         reduce using rule 57 (additive_expression -> term .)
    RPAREN          reduce using rule 57 (additive_expression -> term .)
    THEN            reduce using rule 57 (additive_expression -> term .)
    DO              reduce using rule 57 (additive_expression -> term .)
    RBRACKET        reduce using rule 57 (additive_expression -> term .)
    ELSE            reduce using rule 57 (additive_expression -> term .)
    LOOP            reduce using rule 57 (additive_expression -> term .)
    COMMA           reduce using rule 57 (additive_expression -> term .)
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83

    mulop                          shift and go to state 81

state 53

    (63) term -> factor .

    TIMES           reduce using rule 63 (term -> factor .)
    DIVIDE          reduce using rule 63 (term -> factor .)
    LESS            reduce using rule 63 (term -> factor .)
    LESSEQUAL       reduce using rule 63 (term -> factor .)
    GREATER         reduce using rule 63 (term -> factor .)
    GREATEREQUAL    reduce using rule 63 (term -> factor .)
    DEQUAL          reduce using rule 63 (term -> factor .)
    DISTINT         reduce using rule 63 (term -> factor .)
    QUOTES          reduce using rule 63 (term -> factor .)
    PLUS            reduce using rule 63 (term -> factor .)
    MINUS           reduce using rule 63 (term -> factor .)
    END             reduce using rule 63 (term -> factor .)
    SETOUT          reduce using rule 63 (term -> factor .)
    GETIN           reduce using rule 63 (term -> factor .)
    ID              reduce using rule 63 (term -> factor .)
    PLUSPLUS        reduce using rule 63 (term -> factor .)
    MINUSMINUS      reduce using rule 63 (term -> factor .)
    IF              reduce using rule 63 (term -> factor .)
    WHILE           reduce using rule 63 (term -> factor .)
    FOR             reduce using rule 63 (term -> factor .)
    INT             reduce using rule 63 (term -> factor .)
    FLOAT           reduce using rule 63 (term -> factor .)
    LPAREN          reduce using rule 63 (term -> factor .)
    NUMBER          reduce using rule 63 (term -> factor .)
    PROCCES         reduce using rule 63 (term -> factor .)
    RPAREN          reduce using rule 63 (term -> factor .)
    THEN            reduce using rule 63 (term -> factor .)
    DO              reduce using rule 63 (term -> factor .)
    RBRACKET        reduce using rule 63 (term -> factor .)
    ELSE            reduce using rule 63 (term -> factor .)
    LOOP            reduce using rule 63 (term -> factor .)
    COMMA           reduce using rule 63 (term -> factor .)


state 54

    (60) factor -> call .

    TIMES           reduce using rule 60 (factor -> call .)
    DIVIDE          reduce using rule 60 (factor -> call .)
    LESS            reduce using rule 60 (factor -> call .)
    LESSEQUAL       reduce using rule 60 (factor -> call .)
    GREATER         reduce using rule 60 (factor -> call .)
    GREATEREQUAL    reduce using rule 60 (factor -> call .)
    DEQUAL          reduce using rule 60 (factor -> call .)
    DISTINT         reduce using rule 60 (factor -> call .)
    QUOTES          reduce using rule 60 (factor -> call .)
    PLUS            reduce using rule 60 (factor -> call .)
    MINUS           reduce using rule 60 (factor -> call .)
    END             reduce using rule 60 (factor -> call .)
    SETOUT          reduce using rule 60 (factor -> call .)
    GETIN           reduce using rule 60 (factor -> call .)
    ID              reduce using rule 60 (factor -> call .)
    PLUSPLUS        reduce using rule 60 (factor -> call .)
    MINUSMINUS      reduce using rule 60 (factor -> call .)
    IF              reduce using rule 60 (factor -> call .)
    WHILE           reduce using rule 60 (factor -> call .)
    FOR             reduce using rule 60 (factor -> call .)
    INT             reduce using rule 60 (factor -> call .)
    FLOAT           reduce using rule 60 (factor -> call .)
    LPAREN          reduce using rule 60 (factor -> call .)
    NUMBER          reduce using rule 60 (factor -> call .)
    PROCCES         reduce using rule 60 (factor -> call .)
    RPAREN          reduce using rule 60 (factor -> call .)
    THEN            reduce using rule 60 (factor -> call .)
    DO              reduce using rule 60 (factor -> call .)
    RBRACKET        reduce using rule 60 (factor -> call .)
    ELSE            reduce using rule 60 (factor -> call .)
    LOOP            reduce using rule 60 (factor -> call .)
    COMMA           reduce using rule 60 (factor -> call .)


state 55

    (61) call -> PROCCES . ID

    ID              shift and go to state 84


state 56

    (15) procces_declaration -> PROCCES ID COLON statements_nont END .

    MAIN            reduce using rule 15 (procces_declaration -> PROCCES ID COLON statements_nont END .)
    PROCCES         reduce using rule 15 (procces_declaration -> PROCCES ID COLON statements_nont END .)
    INT             reduce using rule 15 (procces_declaration -> PROCCES ID COLON statements_nont END .)
    FLOAT           reduce using rule 15 (procces_declaration -> PROCCES ID COLON statements_nont END .)


state 57

    (45) var -> ID LBRACKET . expression RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    ID              shift and go to state 28
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    expression                     shift and go to state 85
    var                            shift and go to state 42
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 58

    (13) var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .

    MAIN            reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    PROCCES         reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    INT             reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    FLOAT           reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    SETOUT          reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    GETIN           reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    PLUSPLUS        reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    MINUSMINUS      reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    WHILE           reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    FOR             reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    LPAREN          reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    NUMBER          reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    ELSE            reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)
    LOOP            reduce using rule 13 (var_declaration -> var_type ID LBRACKET NUMBER RBRACKET .)


state 59

    (31) expression_nont -> ID PLUSPLUS .

    END             reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    SETOUT          reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    GETIN           reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    ID              reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    PLUSPLUS        reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    MINUSMINUS      reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    IF              reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    WHILE           reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    FOR             reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    INT             reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    FLOAT           reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    LPAREN          reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    NUMBER          reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    PROCCES         reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    ELSE            reduce using rule 31 (expression_nont -> ID PLUSPLUS .)
    LOOP            reduce using rule 31 (expression_nont -> ID PLUSPLUS .)


state 60

    (33) expression_nont -> ID MINUSMINUS .

    END             reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    SETOUT          reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    GETIN           reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    ID              reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    PLUSPLUS        reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    MINUSMINUS      reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    IF              reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    WHILE           reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    FOR             reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    INT             reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    FLOAT           reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    LPAREN          reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    NUMBER          reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    PROCCES         reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    ELSE            reduce using rule 33 (expression_nont -> ID MINUSMINUS .)
    LOOP            reduce using rule 33 (expression_nont -> ID MINUSMINUS .)


state 61

    (23) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES RPAREN
    (24) expression_nont -> SETOUT LPAREN . QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> SETOUT LPAREN . var RPAREN
    (26) expression_nont -> SETOUT LPAREN . var COMMA ENDL RPAREN
    (27) expression_nont -> SETOUT LPAREN . var COMMA var COMMA RPAREN
    (28) expression_nont -> SETOUT LPAREN . var COMMA var COMMA ENDL RPAREN
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    QUOTES          shift and go to state 86
    ID              shift and go to state 28

    var                            shift and go to state 87

state 62

    (66) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 88


state 63

    (43) expression -> var EQUAL . expression
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    ID              shift and go to state 28
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 42
    expression                     shift and go to state 89
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 64

    (29) expression_nont -> GETIN LPAREN . var RPAREN
    (30) expression_nont -> GETIN LPAREN . var COMMA var RPAREN
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 28

    var                            shift and go to state 90

state 65

    (32) expression_nont -> PLUSPLUS ID .

    END             reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    SETOUT          reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    GETIN           reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    ID              reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    PLUSPLUS        reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    MINUSMINUS      reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    IF              reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    WHILE           reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    FOR             reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    INT             reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    FLOAT           reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    LPAREN          reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    NUMBER          reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    PROCCES         reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    ELSE            reduce using rule 32 (expression_nont -> PLUSPLUS ID .)
    LOOP            reduce using rule 32 (expression_nont -> PLUSPLUS ID .)


state 66

    (34) expression_nont -> MINUSMINUS ID .

    END             reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    SETOUT          reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    GETIN           reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    ID              reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    PLUSPLUS        reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    MINUSMINUS      reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    IF              reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    WHILE           reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    FOR             reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    INT             reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    FLOAT           reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    LPAREN          reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    NUMBER          reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    PROCCES         reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    ELSE            reduce using rule 34 (expression_nont -> MINUSMINUS ID .)
    LOOP            reduce using rule 34 (expression_nont -> MINUSMINUS ID .)


state 67

    (35) condition_nont -> IF expression . THEN statement END
    (36) condition_nont -> IF expression . THEN statement ELSE statement END

    THEN            shift and go to state 91


state 68

    (37) iteration_nont -> WHILE expression . DO statement LOOP

    DO              shift and go to state 92


state 69

    (38) iteration_nont -> FOR var . COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> FOR var . COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> FOR var . COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> FOR var . COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> FOR var . COMMA expression COMMA MINUSMINUS var DO statement LOOP

    COMMA           shift and go to state 93


state 70

    (47) simple_expression -> additive_expression relop . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55
    ID              shift and go to state 28

    additive_expression            shift and go to state 94
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54
    var                            shift and go to state 95

state 71

    (56) additive_expression -> additive_expression addop . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55
    ID              shift and go to state 28

    term                           shift and go to state 96
    factor                         shift and go to state 53
    call                           shift and go to state 54
    var                            shift and go to state 95

state 72

    (49) relop -> LESS .

    LPAREN          reduce using rule 49 (relop -> LESS .)
    NUMBER          reduce using rule 49 (relop -> LESS .)
    PROCCES         reduce using rule 49 (relop -> LESS .)
    ID              reduce using rule 49 (relop -> LESS .)


state 73

    (50) relop -> LESSEQUAL .

    LPAREN          reduce using rule 50 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 50 (relop -> LESSEQUAL .)
    PROCCES         reduce using rule 50 (relop -> LESSEQUAL .)
    ID              reduce using rule 50 (relop -> LESSEQUAL .)


state 74

    (51) relop -> GREATER .

    LPAREN          reduce using rule 51 (relop -> GREATER .)
    NUMBER          reduce using rule 51 (relop -> GREATER .)
    PROCCES         reduce using rule 51 (relop -> GREATER .)
    ID              reduce using rule 51 (relop -> GREATER .)


state 75

    (52) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 52 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 52 (relop -> GREATEREQUAL .)
    PROCCES         reduce using rule 52 (relop -> GREATEREQUAL .)
    ID              reduce using rule 52 (relop -> GREATEREQUAL .)


state 76

    (53) relop -> DEQUAL .

    LPAREN          reduce using rule 53 (relop -> DEQUAL .)
    NUMBER          reduce using rule 53 (relop -> DEQUAL .)
    PROCCES         reduce using rule 53 (relop -> DEQUAL .)
    ID              reduce using rule 53 (relop -> DEQUAL .)


state 77

    (54) relop -> DISTINT .

    LPAREN          reduce using rule 54 (relop -> DISTINT .)
    NUMBER          reduce using rule 54 (relop -> DISTINT .)
    PROCCES         reduce using rule 54 (relop -> DISTINT .)
    ID              reduce using rule 54 (relop -> DISTINT .)


state 78

    (55) relop -> QUOTES .

    LPAREN          reduce using rule 55 (relop -> QUOTES .)
    NUMBER          reduce using rule 55 (relop -> QUOTES .)
    PROCCES         reduce using rule 55 (relop -> QUOTES .)
    ID              reduce using rule 55 (relop -> QUOTES .)


state 79

    (58) addop -> PLUS .

    LPAREN          reduce using rule 58 (addop -> PLUS .)
    NUMBER          reduce using rule 58 (addop -> PLUS .)
    PROCCES         reduce using rule 58 (addop -> PLUS .)
    ID              reduce using rule 58 (addop -> PLUS .)


state 80

    (59) addop -> MINUS .

    LPAREN          reduce using rule 59 (addop -> MINUS .)
    NUMBER          reduce using rule 59 (addop -> MINUS .)
    PROCCES         reduce using rule 59 (addop -> MINUS .)
    ID              reduce using rule 59 (addop -> MINUS .)


state 81

    (62) term -> term mulop . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55
    ID              shift and go to state 28

    factor                         shift and go to state 97
    call                           shift and go to state 54
    var                            shift and go to state 95

state 82

    (64) mulop -> TIMES .

    LPAREN          reduce using rule 64 (mulop -> TIMES .)
    NUMBER          reduce using rule 64 (mulop -> TIMES .)
    PROCCES         reduce using rule 64 (mulop -> TIMES .)
    ID              reduce using rule 64 (mulop -> TIMES .)


state 83

    (65) mulop -> DIVIDE .

    LPAREN          reduce using rule 65 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 65 (mulop -> DIVIDE .)
    PROCCES         reduce using rule 65 (mulop -> DIVIDE .)
    ID              reduce using rule 65 (mulop -> DIVIDE .)


state 84

    (61) call -> PROCCES ID .

    TIMES           reduce using rule 61 (call -> PROCCES ID .)
    DIVIDE          reduce using rule 61 (call -> PROCCES ID .)
    LESS            reduce using rule 61 (call -> PROCCES ID .)
    LESSEQUAL       reduce using rule 61 (call -> PROCCES ID .)
    GREATER         reduce using rule 61 (call -> PROCCES ID .)
    GREATEREQUAL    reduce using rule 61 (call -> PROCCES ID .)
    DEQUAL          reduce using rule 61 (call -> PROCCES ID .)
    DISTINT         reduce using rule 61 (call -> PROCCES ID .)
    QUOTES          reduce using rule 61 (call -> PROCCES ID .)
    PLUS            reduce using rule 61 (call -> PROCCES ID .)
    MINUS           reduce using rule 61 (call -> PROCCES ID .)
    END             reduce using rule 61 (call -> PROCCES ID .)
    SETOUT          reduce using rule 61 (call -> PROCCES ID .)
    GETIN           reduce using rule 61 (call -> PROCCES ID .)
    ID              reduce using rule 61 (call -> PROCCES ID .)
    PLUSPLUS        reduce using rule 61 (call -> PROCCES ID .)
    MINUSMINUS      reduce using rule 61 (call -> PROCCES ID .)
    IF              reduce using rule 61 (call -> PROCCES ID .)
    WHILE           reduce using rule 61 (call -> PROCCES ID .)
    FOR             reduce using rule 61 (call -> PROCCES ID .)
    INT             reduce using rule 61 (call -> PROCCES ID .)
    FLOAT           reduce using rule 61 (call -> PROCCES ID .)
    LPAREN          reduce using rule 61 (call -> PROCCES ID .)
    NUMBER          reduce using rule 61 (call -> PROCCES ID .)
    PROCCES         reduce using rule 61 (call -> PROCCES ID .)
    RPAREN          reduce using rule 61 (call -> PROCCES ID .)
    THEN            reduce using rule 61 (call -> PROCCES ID .)
    DO              reduce using rule 61 (call -> PROCCES ID .)
    RBRACKET        reduce using rule 61 (call -> PROCCES ID .)
    ELSE            reduce using rule 61 (call -> PROCCES ID .)
    LOOP            reduce using rule 61 (call -> PROCCES ID .)
    COMMA           reduce using rule 61 (call -> PROCCES ID .)


state 85

    (45) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 98


state 86

    (23) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES RPAREN
    (24) expression_nont -> SETOUT LPAREN QUOTES . ID QUOTES COMMA ENDL RPAREN

    ID              shift and go to state 99


state 87

    (25) expression_nont -> SETOUT LPAREN var . RPAREN
    (26) expression_nont -> SETOUT LPAREN var . COMMA ENDL RPAREN
    (27) expression_nont -> SETOUT LPAREN var . COMMA var COMMA RPAREN
    (28) expression_nont -> SETOUT LPAREN var . COMMA var COMMA ENDL RPAREN

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 101


state 88

    (66) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    QUOTES          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    SETOUT          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    GETIN           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    INT             reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    PROCCES         reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 66 (factor -> LPAREN expression RPAREN .)


state 89

    (43) expression -> var EQUAL expression .

    END             reduce using rule 43 (expression -> var EQUAL expression .)
    SETOUT          reduce using rule 43 (expression -> var EQUAL expression .)
    GETIN           reduce using rule 43 (expression -> var EQUAL expression .)
    ID              reduce using rule 43 (expression -> var EQUAL expression .)
    PLUSPLUS        reduce using rule 43 (expression -> var EQUAL expression .)
    MINUSMINUS      reduce using rule 43 (expression -> var EQUAL expression .)
    IF              reduce using rule 43 (expression -> var EQUAL expression .)
    WHILE           reduce using rule 43 (expression -> var EQUAL expression .)
    FOR             reduce using rule 43 (expression -> var EQUAL expression .)
    INT             reduce using rule 43 (expression -> var EQUAL expression .)
    FLOAT           reduce using rule 43 (expression -> var EQUAL expression .)
    LPAREN          reduce using rule 43 (expression -> var EQUAL expression .)
    NUMBER          reduce using rule 43 (expression -> var EQUAL expression .)
    PROCCES         reduce using rule 43 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 43 (expression -> var EQUAL expression .)
    THEN            reduce using rule 43 (expression -> var EQUAL expression .)
    DO              reduce using rule 43 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 43 (expression -> var EQUAL expression .)
    ELSE            reduce using rule 43 (expression -> var EQUAL expression .)
    LOOP            reduce using rule 43 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 43 (expression -> var EQUAL expression .)


state 90

    (29) expression_nont -> GETIN LPAREN var . RPAREN
    (30) expression_nont -> GETIN LPAREN var . COMMA var RPAREN

    RPAREN          shift and go to state 102
    COMMA           shift and go to state 103


state 91

    (35) condition_nont -> IF expression THEN . statement END
    (36) condition_nont -> IF expression THEN . statement ELSE statement END
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    expression                     shift and go to state 39
    statement                      shift and go to state 104
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var                            shift and go to state 42
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 92

    (37) iteration_nont -> WHILE expression DO . statement LOOP
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    expression                     shift and go to state 39
    statement                      shift and go to state 105
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var                            shift and go to state 42
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 93

    (38) iteration_nont -> FOR var COMMA . expression COMMA expression DO statement LOOP
    (39) iteration_nont -> FOR var COMMA . expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> FOR var COMMA . expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> FOR var COMMA . expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> FOR var COMMA . expression COMMA MINUSMINUS var DO statement LOOP
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    ID              shift and go to state 28
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 42
    expression                     shift and go to state 106
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 94

    (47) simple_expression -> additive_expression relop additive_expression .
    (56) additive_expression -> additive_expression . addop term
    (58) addop -> . PLUS
    (59) addop -> . MINUS

    END             reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    SETOUT          reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    GETIN           reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    ID              reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    PLUSPLUS        reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    MINUSMINUS      reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    IF              reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    WHILE           reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    FOR             reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    INT             reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    FLOAT           reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    LPAREN          reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    NUMBER          reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    PROCCES         reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    THEN            reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    DO              reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    ELSE            reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    LOOP            reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

    addop                          shift and go to state 71

state 95

    (67) factor -> var .

    TIMES           reduce using rule 67 (factor -> var .)
    DIVIDE          reduce using rule 67 (factor -> var .)
    PLUS            reduce using rule 67 (factor -> var .)
    MINUS           reduce using rule 67 (factor -> var .)
    END             reduce using rule 67 (factor -> var .)
    SETOUT          reduce using rule 67 (factor -> var .)
    GETIN           reduce using rule 67 (factor -> var .)
    ID              reduce using rule 67 (factor -> var .)
    PLUSPLUS        reduce using rule 67 (factor -> var .)
    MINUSMINUS      reduce using rule 67 (factor -> var .)
    IF              reduce using rule 67 (factor -> var .)
    WHILE           reduce using rule 67 (factor -> var .)
    FOR             reduce using rule 67 (factor -> var .)
    INT             reduce using rule 67 (factor -> var .)
    FLOAT           reduce using rule 67 (factor -> var .)
    LPAREN          reduce using rule 67 (factor -> var .)
    NUMBER          reduce using rule 67 (factor -> var .)
    PROCCES         reduce using rule 67 (factor -> var .)
    RPAREN          reduce using rule 67 (factor -> var .)
    THEN            reduce using rule 67 (factor -> var .)
    DO              reduce using rule 67 (factor -> var .)
    RBRACKET        reduce using rule 67 (factor -> var .)
    ELSE            reduce using rule 67 (factor -> var .)
    LOOP            reduce using rule 67 (factor -> var .)
    COMMA           reduce using rule 67 (factor -> var .)
    LESS            reduce using rule 67 (factor -> var .)
    LESSEQUAL       reduce using rule 67 (factor -> var .)
    GREATER         reduce using rule 67 (factor -> var .)
    GREATEREQUAL    reduce using rule 67 (factor -> var .)
    DEQUAL          reduce using rule 67 (factor -> var .)
    DISTINT         reduce using rule 67 (factor -> var .)
    QUOTES          reduce using rule 67 (factor -> var .)


state 96

    (56) additive_expression -> additive_expression addop term .
    (62) term -> term . mulop factor
    (64) mulop -> . TIMES
    (65) mulop -> . DIVIDE

    LESS            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 56 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 56 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 56 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 56 (additive_expression -> additive_expression addop term .)
    QUOTES          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    END             reduce using rule 56 (additive_expression -> additive_expression addop term .)
    SETOUT          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    GETIN           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    ID              reduce using rule 56 (additive_expression -> additive_expression addop term .)
    PLUSPLUS        reduce using rule 56 (additive_expression -> additive_expression addop term .)
    MINUSMINUS      reduce using rule 56 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 56 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 56 (additive_expression -> additive_expression addop term .)
    INT             reduce using rule 56 (additive_expression -> additive_expression addop term .)
    FLOAT           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    LPAREN          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    NUMBER          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    PROCCES         reduce using rule 56 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 56 (additive_expression -> additive_expression addop term .)
    THEN            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    DO              reduce using rule 56 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 56 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    LOOP            reduce using rule 56 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 56 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83

    mulop                          shift and go to state 81

state 97

    (62) term -> term mulop factor .

    TIMES           reduce using rule 62 (term -> term mulop factor .)
    DIVIDE          reduce using rule 62 (term -> term mulop factor .)
    LESS            reduce using rule 62 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 62 (term -> term mulop factor .)
    GREATER         reduce using rule 62 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 62 (term -> term mulop factor .)
    DEQUAL          reduce using rule 62 (term -> term mulop factor .)
    DISTINT         reduce using rule 62 (term -> term mulop factor .)
    QUOTES          reduce using rule 62 (term -> term mulop factor .)
    PLUS            reduce using rule 62 (term -> term mulop factor .)
    MINUS           reduce using rule 62 (term -> term mulop factor .)
    END             reduce using rule 62 (term -> term mulop factor .)
    SETOUT          reduce using rule 62 (term -> term mulop factor .)
    GETIN           reduce using rule 62 (term -> term mulop factor .)
    ID              reduce using rule 62 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 62 (term -> term mulop factor .)
    MINUSMINUS      reduce using rule 62 (term -> term mulop factor .)
    IF              reduce using rule 62 (term -> term mulop factor .)
    WHILE           reduce using rule 62 (term -> term mulop factor .)
    FOR             reduce using rule 62 (term -> term mulop factor .)
    INT             reduce using rule 62 (term -> term mulop factor .)
    FLOAT           reduce using rule 62 (term -> term mulop factor .)
    LPAREN          reduce using rule 62 (term -> term mulop factor .)
    NUMBER          reduce using rule 62 (term -> term mulop factor .)
    PROCCES         reduce using rule 62 (term -> term mulop factor .)
    RPAREN          reduce using rule 62 (term -> term mulop factor .)
    THEN            reduce using rule 62 (term -> term mulop factor .)
    DO              reduce using rule 62 (term -> term mulop factor .)
    RBRACKET        reduce using rule 62 (term -> term mulop factor .)
    ELSE            reduce using rule 62 (term -> term mulop factor .)
    LOOP            reduce using rule 62 (term -> term mulop factor .)
    COMMA           reduce using rule 62 (term -> term mulop factor .)


state 98

    (45) var -> ID LBRACKET expression RBRACKET .

    MAIN            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    PROCCES         reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    INT             reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    SETOUT          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    GETIN           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    QUOTES          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)


state 99

    (23) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES RPAREN
    (24) expression_nont -> SETOUT LPAREN QUOTES ID . QUOTES COMMA ENDL RPAREN

    QUOTES          shift and go to state 107


state 100

    (25) expression_nont -> SETOUT LPAREN var RPAREN .

    END             reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    SETOUT          reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    GETIN           reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ID              reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    PLUSPLUS        reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    MINUSMINUS      reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    IF              reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    WHILE           reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FOR             reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    INT             reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    FLOAT           reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LPAREN          reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    NUMBER          reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    PROCCES         reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    ELSE            reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)
    LOOP            reduce using rule 25 (expression_nont -> SETOUT LPAREN var RPAREN .)


state 101

    (26) expression_nont -> SETOUT LPAREN var COMMA . ENDL RPAREN
    (27) expression_nont -> SETOUT LPAREN var COMMA . var COMMA RPAREN
    (28) expression_nont -> SETOUT LPAREN var COMMA . var COMMA ENDL RPAREN
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    ENDL            shift and go to state 109
    ID              shift and go to state 28

    var                            shift and go to state 108

state 102

    (29) expression_nont -> GETIN LPAREN var RPAREN .

    END             reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    SETOUT          reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    GETIN           reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    ID              reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    PLUSPLUS        reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    MINUSMINUS      reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    IF              reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    WHILE           reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    FOR             reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    INT             reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    FLOAT           reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    LPAREN          reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    NUMBER          reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    PROCCES         reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    ELSE            reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)
    LOOP            reduce using rule 29 (expression_nont -> GETIN LPAREN var RPAREN .)


state 103

    (30) expression_nont -> GETIN LPAREN var COMMA . var RPAREN
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 28

    var                            shift and go to state 110

state 104

    (35) condition_nont -> IF expression THEN statement . END
    (36) condition_nont -> IF expression THEN statement . ELSE statement END

    END             shift and go to state 111
    ELSE            shift and go to state 112


state 105

    (37) iteration_nont -> WHILE expression DO statement . LOOP

    LOOP            shift and go to state 113


state 106

    (38) iteration_nont -> FOR var COMMA expression . COMMA expression DO statement LOOP
    (39) iteration_nont -> FOR var COMMA expression . COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> FOR var COMMA expression . COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> FOR var COMMA expression . COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> FOR var COMMA expression . COMMA MINUSMINUS var DO statement LOOP

    COMMA           shift and go to state 114


state 107

    (23) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . RPAREN
    (24) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES . COMMA ENDL RPAREN

    RPAREN          shift and go to state 115
    COMMA           shift and go to state 116


state 108

    (27) expression_nont -> SETOUT LPAREN var COMMA var . COMMA RPAREN
    (28) expression_nont -> SETOUT LPAREN var COMMA var . COMMA ENDL RPAREN

    COMMA           shift and go to state 117


state 109

    (26) expression_nont -> SETOUT LPAREN var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 118


state 110

    (30) expression_nont -> GETIN LPAREN var COMMA var . RPAREN

    RPAREN          shift and go to state 119


state 111

    (35) condition_nont -> IF expression THEN statement END .

    END             reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    SETOUT          reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    GETIN           reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    ID              reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    PLUSPLUS        reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    MINUSMINUS      reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    IF              reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    WHILE           reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    FOR             reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    INT             reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    FLOAT           reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    LPAREN          reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    NUMBER          reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    PROCCES         reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    ELSE            reduce using rule 35 (condition_nont -> IF expression THEN statement END .)
    LOOP            reduce using rule 35 (condition_nont -> IF expression THEN statement END .)


state 112

    (36) condition_nont -> IF expression THEN statement ELSE . statement END
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    expression                     shift and go to state 39
    statement                      shift and go to state 120
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var                            shift and go to state 42
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 113

    (37) iteration_nont -> WHILE expression DO statement LOOP .

    END             reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    SETOUT          reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    GETIN           reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    ID              reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    PLUSPLUS        reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    MINUSMINUS      reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    IF              reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    WHILE           reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    FOR             reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    INT             reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    FLOAT           reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    LPAREN          reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    NUMBER          reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    PROCCES         reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    ELSE            reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)
    LOOP            reduce using rule 37 (iteration_nont -> WHILE expression DO statement LOOP .)


state 114

    (38) iteration_nont -> FOR var COMMA expression COMMA . expression DO statement LOOP
    (39) iteration_nont -> FOR var COMMA expression COMMA . var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> FOR var COMMA expression COMMA . PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> FOR var COMMA expression COMMA . var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> FOR var COMMA expression COMMA . MINUSMINUS var DO statement LOOP
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    PLUSPLUS        shift and go to state 123
    MINUSMINUS      shift and go to state 124
    ID              shift and go to state 28
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 121
    expression                     shift and go to state 122
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 115

    (23) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .

    END             reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    SETOUT          reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    GETIN           reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ID              reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    PLUSPLUS        reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    MINUSMINUS      reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    IF              reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    WHILE           reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FOR             reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    INT             reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    FLOAT           reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LPAREN          reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    NUMBER          reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    PROCCES         reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    ELSE            reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)
    LOOP            reduce using rule 23 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES RPAREN .)


state 116

    (24) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA . ENDL RPAREN

    ENDL            shift and go to state 125


state 117

    (27) expression_nont -> SETOUT LPAREN var COMMA var COMMA . RPAREN
    (28) expression_nont -> SETOUT LPAREN var COMMA var COMMA . ENDL RPAREN

    RPAREN          shift and go to state 126
    ENDL            shift and go to state 127


state 118

    (26) expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .

    END             reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    SETOUT          reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ID              reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    PLUSPLUS        reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    MINUSMINUS      reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    IF              reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FOR             reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    INT             reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    PROCCES         reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 26 (expression_nont -> SETOUT LPAREN var COMMA ENDL RPAREN .)


state 119

    (30) expression_nont -> GETIN LPAREN var COMMA var RPAREN .

    END             reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    SETOUT          reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    GETIN           reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ID              reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    PLUSPLUS        reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    MINUSMINUS      reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    IF              reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    WHILE           reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FOR             reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    INT             reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    FLOAT           reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LPAREN          reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    NUMBER          reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    PROCCES         reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    ELSE            reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)
    LOOP            reduce using rule 30 (expression_nont -> GETIN LPAREN var COMMA var RPAREN .)


state 120

    (36) condition_nont -> IF expression THEN statement ELSE statement . END

    END             shift and go to state 128


state 121

    (39) iteration_nont -> FOR var COMMA expression COMMA var . PLUSPLUS DO statement LOOP
    (41) iteration_nont -> FOR var COMMA expression COMMA var . MINUSMINUS DO statement LOOP
    (43) expression -> var . EQUAL expression
    (67) factor -> var .

    PLUSPLUS        shift and go to state 129
    MINUSMINUS      shift and go to state 130
    EQUAL           shift and go to state 63
    TIMES           reduce using rule 67 (factor -> var .)
    DIVIDE          reduce using rule 67 (factor -> var .)
    LESS            reduce using rule 67 (factor -> var .)
    LESSEQUAL       reduce using rule 67 (factor -> var .)
    GREATER         reduce using rule 67 (factor -> var .)
    GREATEREQUAL    reduce using rule 67 (factor -> var .)
    DEQUAL          reduce using rule 67 (factor -> var .)
    DISTINT         reduce using rule 67 (factor -> var .)
    QUOTES          reduce using rule 67 (factor -> var .)
    PLUS            reduce using rule 67 (factor -> var .)
    MINUS           reduce using rule 67 (factor -> var .)
    DO              reduce using rule 67 (factor -> var .)


state 122

    (38) iteration_nont -> FOR var COMMA expression COMMA expression . DO statement LOOP

    DO              shift and go to state 131


state 123

    (40) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS . var DO statement LOOP
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 28

    var                            shift and go to state 132

state 124

    (42) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS . var DO statement LOOP
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 28

    var                            shift and go to state 133

state 125

    (24) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL . RPAREN

    RPAREN          shift and go to state 134


state 126

    (27) expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .

    END             reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    SETOUT          reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    GETIN           reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ID              reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    PLUSPLUS        reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    MINUSMINUS      reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    IF              reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    WHILE           reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FOR             reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    INT             reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    FLOAT           reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LPAREN          reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    NUMBER          reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    PROCCES         reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    ELSE            reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)
    LOOP            reduce using rule 27 (expression_nont -> SETOUT LPAREN var COMMA var COMMA RPAREN .)


state 127

    (28) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL . RPAREN

    RPAREN          shift and go to state 135


state 128

    (36) condition_nont -> IF expression THEN statement ELSE statement END .

    END             reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    SETOUT          reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    GETIN           reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    ID              reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    PLUSPLUS        reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    MINUSMINUS      reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    IF              reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    WHILE           reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    FOR             reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    INT             reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    FLOAT           reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    LPAREN          reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    NUMBER          reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    PROCCES         reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    ELSE            reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)
    LOOP            reduce using rule 36 (condition_nont -> IF expression THEN statement ELSE statement END .)


state 129

    (39) iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS . DO statement LOOP

    DO              shift and go to state 136


state 130

    (41) iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS . DO statement LOOP

    DO              shift and go to state 137


state 131

    (38) iteration_nont -> FOR var COMMA expression COMMA expression DO . statement LOOP
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 42
    expression                     shift and go to state 39
    statement                      shift and go to state 138
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 132

    (40) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var . DO statement LOOP

    DO              shift and go to state 139


state 133

    (42) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var . DO statement LOOP

    DO              shift and go to state 140


state 134

    (24) expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .

    END             reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    SETOUT          reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    GETIN           reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ID              reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    PLUSPLUS        reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    MINUSMINUS      reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    IF              reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    WHILE           reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FOR             reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    INT             reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    PROCCES         reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    ELSE            reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)
    LOOP            reduce using rule 24 (expression_nont -> SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN .)


state 135

    (28) expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .

    END             reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    SETOUT          reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    GETIN           reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ID              reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    PLUSPLUS        reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    MINUSMINUS      reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    IF              reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    WHILE           reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FOR             reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    INT             reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    FLOAT           reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LPAREN          reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    NUMBER          reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    PROCCES         reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    ELSE            reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)
    LOOP            reduce using rule 28 (expression_nont -> SETOUT LPAREN var COMMA var COMMA ENDL RPAREN .)


state 136

    (39) iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO . statement LOOP
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 42
    expression                     shift and go to state 39
    statement                      shift and go to state 141
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 137

    (41) iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO . statement LOOP
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 42
    expression                     shift and go to state 39
    statement                      shift and go to state 142
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 138

    (38) iteration_nont -> FOR var COMMA expression COMMA expression DO statement . LOOP

    LOOP            shift and go to state 143


state 139

    (40) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO . statement LOOP
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 42
    expression                     shift and go to state 39
    statement                      shift and go to state 144
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 140

    (42) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO . statement LOOP
    (18) statement -> . expression_nont
    (19) statement -> . condition_nont
    (20) statement -> . iteration_nont
    (21) statement -> . var_declaration
    (22) expression_nont -> . expression
    (23) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES RPAREN
    (24) expression_nont -> . SETOUT LPAREN QUOTES ID QUOTES COMMA ENDL RPAREN
    (25) expression_nont -> . SETOUT LPAREN var RPAREN
    (26) expression_nont -> . SETOUT LPAREN var COMMA ENDL RPAREN
    (27) expression_nont -> . SETOUT LPAREN var COMMA var COMMA RPAREN
    (28) expression_nont -> . SETOUT LPAREN var COMMA var COMMA ENDL RPAREN
    (29) expression_nont -> . GETIN LPAREN var RPAREN
    (30) expression_nont -> . GETIN LPAREN var COMMA var RPAREN
    (31) expression_nont -> . ID PLUSPLUS
    (32) expression_nont -> . PLUSPLUS ID
    (33) expression_nont -> . ID MINUSMINUS
    (34) expression_nont -> . MINUSMINUS ID
    (35) condition_nont -> . IF expression THEN statement END
    (36) condition_nont -> . IF expression THEN statement ELSE statement END
    (37) iteration_nont -> . WHILE expression DO statement LOOP
    (38) iteration_nont -> . FOR var COMMA expression COMMA expression DO statement LOOP
    (39) iteration_nont -> . FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP
    (40) iteration_nont -> . FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP
    (41) iteration_nont -> . FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP
    (42) iteration_nont -> . FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP
    (7) var_declaration -> . var_type ID
    (8) var_declaration -> . var_type ID COMMA ID
    (9) var_declaration -> . var_type ID EQUAL NUMBER
    (10) var_declaration -> . var_type ID EQUAL var
    (13) var_declaration -> . var_type ID LBRACKET NUMBER RBRACKET
    (43) expression -> . var EQUAL expression
    (46) expression -> . simple_expression
    (11) var_type -> . INT
    (12) var_type -> . FLOAT
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (56) additive_expression -> . additive_expression addop term
    (57) additive_expression -> . term
    (62) term -> . term mulop factor
    (63) term -> . factor
    (60) factor -> . call
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . var
    (68) factor -> . NUMBER
    (61) call -> . PROCCES ID

    SETOUT          shift and go to state 40
    GETIN           shift and go to state 43
    ID              shift and go to state 32
    PLUSPLUS        shift and go to state 44
    MINUSMINUS      shift and go to state 45
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    LPAREN          shift and go to state 41
    NUMBER          shift and go to state 49
    PROCCES         shift and go to state 55

    var                            shift and go to state 42
    expression                     shift and go to state 39
    statement                      shift and go to state 145
    expression_nont                shift and go to state 35
    condition_nont                 shift and go to state 36
    iteration_nont                 shift and go to state 37
    var_declaration                shift and go to state 38
    var_type                       shift and go to state 13
    simple_expression              shift and go to state 50
    additive_expression            shift and go to state 51
    term                           shift and go to state 52
    factor                         shift and go to state 53
    call                           shift and go to state 54

state 141

    (39) iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement . LOOP

    LOOP            shift and go to state 146


state 142

    (41) iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement . LOOP

    LOOP            shift and go to state 147


state 143

    (38) iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .

    END             reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    SETOUT          reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    GETIN           reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    ID              reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    PLUSPLUS        reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    MINUSMINUS      reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    IF              reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    WHILE           reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    FOR             reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    INT             reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    FLOAT           reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    LPAREN          reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    NUMBER          reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    PROCCES         reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    ELSE            reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)
    LOOP            reduce using rule 38 (iteration_nont -> FOR var COMMA expression COMMA expression DO statement LOOP .)


state 144

    (40) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement . LOOP

    LOOP            shift and go to state 148


state 145

    (42) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement . LOOP

    LOOP            shift and go to state 149


state 146

    (39) iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .

    END             reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    SETOUT          reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    GETIN           reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    ID              reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    PLUSPLUS        reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    MINUSMINUS      reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    IF              reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    WHILE           reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    FOR             reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    INT             reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    FLOAT           reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    LPAREN          reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    NUMBER          reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    PROCCES         reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    ELSE            reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)
    LOOP            reduce using rule 39 (iteration_nont -> FOR var COMMA expression COMMA var PLUSPLUS DO statement LOOP .)


state 147

    (41) iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .

    END             reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    SETOUT          reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    GETIN           reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    ID              reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    PLUSPLUS        reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    MINUSMINUS      reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    IF              reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    WHILE           reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    FOR             reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    INT             reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    FLOAT           reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    LPAREN          reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    NUMBER          reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    PROCCES         reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    ELSE            reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)
    LOOP            reduce using rule 41 (iteration_nont -> FOR var COMMA expression COMMA var MINUSMINUS DO statement LOOP .)


state 148

    (40) iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .

    END             reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    SETOUT          reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    GETIN           reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    ID              reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    PLUSPLUS        reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    MINUSMINUS      reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    IF              reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    WHILE           reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    FOR             reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    INT             reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    FLOAT           reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    LPAREN          reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    NUMBER          reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    PROCCES         reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    ELSE            reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)
    LOOP            reduce using rule 40 (iteration_nont -> FOR var COMMA expression COMMA PLUSPLUS var DO statement LOOP .)


state 149

    (42) iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .

    END             reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    SETOUT          reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    GETIN           reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    ID              reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    PLUSPLUS        reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    MINUSMINUS      reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    IF              reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    WHILE           reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    FOR             reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    INT             reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    FLOAT           reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    LPAREN          reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    NUMBER          reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    PROCCES         reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    ELSE            reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)
    LOOP            reduce using rule 42 (iteration_nont -> FOR var COMMA expression COMMA MINUSMINUS var DO statement LOOP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUSPLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 32 resolved as shift
